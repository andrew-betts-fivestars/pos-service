"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionType = exports.EarlyCheckinModal = void 0;
// import * as moment from 'moment';
// import { ActionType } from 'typesafe-actions';
// import { ArqcResponse, CardSwipeResponse } from '@instore/hardware/cardReader/types';
// import { IPromotion } from '@instore/redux/customer/types';
// import { StartPaymentOptions, StartRefundOptions } from '@instore/redux/merchant/types';
// import { IReward } from '@instore/redux/rewards/types';
// import { CardInputType, Status } from '@instore/utils/enums';
// import { IMoney } from "./money"
// import { PaymentTypes } from "./utils"
// import * as transactionActions from './actions';
// export enum CardError {
//     GENERAL = 'GENERAL',
//     DECLINE = 'DECLINE',
//     READ = 'READ',
//     REQUIRE_DIP = 'REQUIRE_DIP',
//     REQUIRE_SWIPE = 'REQUIRE_SWIPE'
// }
var EarlyCheckinModal;
(function (EarlyCheckinModal) {
    EarlyCheckinModal["CHECKING_IN"] = "checkingIn";
    EarlyCheckinModal["NO_REWARD_SELECTED"] = "noRewardSelected";
    EarlyCheckinModal["NONE"] = "none";
    EarlyCheckinModal["REWARD_BANNER"] = "rewardBanner";
    EarlyCheckinModal["REWARD_REMOVED"] = "rewardRemoved";
    EarlyCheckinModal["REWARD_SELECTED"] = "rewardSelected";
    EarlyCheckinModal["SELECTING_REWARD"] = "selectingReward";
})(EarlyCheckinModal = exports.EarlyCheckinModal || (exports.EarlyCheckinModal = {}));
// // This is the encrypted information from the card-reader plus a type
// // indicating whether it was dip or swipe.  Impression is the name that
// // the server team has given to this information packet.  Using the same
// // name so we can have a common vernacular with the server team.
// export type CardImpression = {
//     readonly type: CardInputType;
//     readonly payload: CardSwipeResponse | ArqcResponse | KeyedEntryCardData;
// };
// // This is the human recognizable representation of the card (ex., last4 and brand)
// // plus other information used to identify the card but it is all PCI compliant.
// export type CardCompliantDetails = {
//     readonly cardBrand: string;
//     // the server is not always
//     // able to scrape the name
//     // from the encrypted card
//     readonly fullName: string | null;
//     readonly last4: string;
//     // the tokenUid is populated and
//     // used to run stripe transactions
//     tokenUid: string | null;
//     // we only have an accountUid
//     // if the card is already linked
//     accountUid: string | null;
//     // allowing these to be null
//     // because we populated them
//     // for stripe in two passes
//     cardUid: string | null;
//     createdAt: moment.Moment | null;
// };
var TransactionType;
(function (TransactionType) {
    TransactionType["NONE"] = "none";
    TransactionType["PAYMENT"] = "payment";
    TransactionType["REFUND"] = "refund";
    TransactionType["UNKNOWN"] = "unknown";
    TransactionType["EARLY_CHECKIN"] = "earlyCheckin";
})(TransactionType = exports.TransactionType || (exports.TransactionType = {}));
