"use strict";
// import { AxiosResponse } from 'axios';
// import { SagaIterator } from 'redux-saga';
// import { call } from 'redux-saga/effects';
// import { CONFIG } from '@app/config';
// import { device } from '@instore/hardware';
// import { makeApiRequest } from '@instore/middleware/api/makeApiRequest';
// import { getClientType } from '@instore/utils/clientType';
// import { AnalyticsEventCategory } from '@instore/utils/enums';
// import { LoyaltyOnlyHeaderProvider } from '../headers';
// import { HeartbeatReponse } from '../types';
// import { AlwaysLoyaltyUrlProvider, LoyaltyUrls, URL } from '../urls';
// import { LOYALTY_PARAMS } from './params';
// export function* ping() {
//     return yield call(makeApiRequest, {
//         ...LOYALTY_PARAMS,
//         category: AnalyticsEventCategory.NON_TRANSACTION,
//         functionName: 'ping',
//         headerProvider: undefined,
//         maxRetryAttempts: 0,
//         method: 'get',
//         path: LoyaltyUrls.getRootApiPath('ping')
//     });
// }
// // This call occurs on the merchant side of pairing and allows Mission Control to display the pairing relationship
// // Example Call:
// // https://api.nerfstars.com/api/unified/businesses/PAYINSTORE1/merchant-tablets/5d3efda1c84f4a0281189892b45178f9
// export function* setPairedCustomerApiKey(pairedCustomerApiKey: string | null) {
//     return yield call(makeApiRequest, {
//         ...LOYALTY_PARAMS,
//         category: AnalyticsEventCategory.NON_TRANSACTION,
//         functionName: 'setPairedCustomerApiKey',
//         method: 'patch',
//         path: LoyaltyUrls.getBusinessPath(`${URL.PRODUCT}/${LoyaltyUrls.getApiKey()}`),
//         payload: {
//             cts_apikey: pairedCustomerApiKey
//         }
//     });
// }
// // This function is only needed while we have both the old cts/mtab clients, and the new instore client
// // We expect to migrate fully to using the instore client in the near future [INSTORE-1510]
// export function* _sendHeartbeatInstoreClients(): SagaIterator<AxiosResponse<HeartbeatReponse>> {
//     const heartbeatPath = `${URL.PRODUCT}/${LoyaltyUrls.getApiKey()}`;
//     return yield call(makeApiRequest, {
//         ...LOYALTY_PARAMS,
//         category: AnalyticsEventCategory.NON_TRANSACTION,
//         functionName: 'sendHeartbeat',
//         headerProvider: new LoyaltyOnlyHeaderProvider(),
//         maxRetryAttempts: 0,
//         method: 'patch',
//         path: LoyaltyUrls.getBusinessPath(heartbeatPath),
//         payload: {
//             client_type: getClientType(),
//             device_type: device.DEVICE_TYPE,
//             platform: device.PLATFORM,
//             product: CONFIG.PRODUCT,
//             version: device.SOFTWARE_VERSION
//         },
//         urlProvider: new AlwaysLoyaltyUrlProvider()
//     });
// }
// export function* sendHeartbeat(): SagaIterator<AxiosResponse<HeartbeatReponse>> {
//     if (URL.PRODUCT === 'instore-clients') {
//         return yield call(_sendHeartbeatInstoreClients);
//     }
//     const heartbeatPath = `${URL.PRODUCT}/${LoyaltyUrls.getApiKey()}/heartbeat`;
//     return yield call(makeApiRequest, {
//         ...LOYALTY_PARAMS,
//         category: AnalyticsEventCategory.NON_TRANSACTION,
//         functionName: 'sendHeartbeat',
//         headerProvider: new LoyaltyOnlyHeaderProvider(),
//         maxRetryAttempts: 0,
//         method: 'post',
//         path: LoyaltyUrls.getBusinessPath(heartbeatPath),
//         payload: {
//             // This is the host version (i.e., Falco)
//             app_version: device.APP_VERSION,
//             // This is the embedded webapp version (i.e., mPay)
//             software_version: device.SOFTWARE_VERSION
//             // Note: We want to change these names!
//         },
//         urlProvider: new AlwaysLoyaltyUrlProvider()
//     });
// }
// export function* getS3LogCredentials(): SagaIterator<AxiosResponse> {
//     return yield call(makeApiRequest, {
//         ...LOYALTY_PARAMS,
//         category: AnalyticsEventCategory.NON_TRANSACTION,
//         functionName: 'getS3LogCredentials',
//         method: 'get',
//         path: LoyaltyUrls.getBusinessPath(URL.S3_LOG_CREDENTIALS)
//     });
// }
