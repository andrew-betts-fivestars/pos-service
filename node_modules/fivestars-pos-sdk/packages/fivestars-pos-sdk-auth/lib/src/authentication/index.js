"use strict";
// //import { ILoyaltyCredentials } from '@instore/redux/authentication/types';
// import { ILogin } from '@instore/redux/business/types';
// //import { getUseEdge } from '@instore/redux/features/selectors';
// //import { StartupCondition, startupConditions } from '@instore/redux/startupConditions';
// //import * as systemActions from '@instore/redux/system/actions';
// import * as jwt from './jwt';
// import * as loyalty from './loyalty';
// // /**
// //  * Use stored loyalty credentials to authenticate with loyalty
// //  * Start JWT auth
// //  */
// // export function* authenticateFromCredentials(): SagaIterator<ILoyaltyCredentials | null> {
// //     const loyaltyCredentials: ILoyaltyCredentials | null = yield call(loyalty.authenticateFromCredentials);
// //     // skip JWT attempt if storage credentials not there
// //     if (!loyaltyCredentials) {
// //         return null;
// //     }
// //     yield call(postLoyaltyAuthentication);
// //     return loyaltyCredentials;
// // }
// /**
//  * Use email and password to authenticate with loyalty
//  * Store the credentials
//  * Start JWT auth
//  */
// export function* authenticateFromLogin(loginInfo: ILogin): SagaIterator<ILoyaltyCredentials> {
//     const loyaltyCredentials: ILoyaltyCredentials = yield call(loyalty.authenticateFromLogin, loginInfo);
//     yield call(postLoyaltyAuthentication);
//     return loyaltyCredentials;
// }
// /**
//  * Dispatch action to trigger LOYALTY_AUTH startup condition
//  *
//  * Then wait for the REMOTE_CONFIG startup condition; so that the experiment can be checked before
//  * initializing the jwt.
//  * Note: Remove this (and potentially the REMOTE_CONFIG startup condition) once the edge gateway experiment is over
//  *
//  * If the experiment is enabled, then login with the jwt; otherwise do not initiate
//  */
// function* postLoyaltyAuthentication(): SagaIterator<void> {
//     yield put(systemActions.loyaltyAuth());
// //    yield call(startupConditions, [StartupCondition.REMOTE_CONFIG]);
//     // const useEdge: boolean = yield select(getUseEdge);
//     // if (!useEdge) {
//     //     return;
//     // }
//     yield call(jwt.bootstrapJwt);
// }
// // export const privates = {
// //     postLoyaltyAuthentication
// // };
