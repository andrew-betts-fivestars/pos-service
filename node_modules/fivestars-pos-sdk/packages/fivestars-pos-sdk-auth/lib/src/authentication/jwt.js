"use strict";
// import { SagaIterator } from 'redux-saga';
// import { call, delay, put, spawn, select } from 'redux-saga/effects';
// import { loyaltyApi } from '@instore/middleware/api';
// import { FsJwt, EdgeAuthDetails } from '@instore/middleware/api/types';
// import * as authenticationActions from '@instore/redux/authentication/actions';
// import { getEdgeRefreshToken } from '@instore/redux/authentication/selectors';
// import * as systemActions from '@instore/redux/system/actions';
// import { log } from '@instore/utils/log';
// import { retryWithBackOff } from '@instore/utils/retryWithBackOff';
// import { storage } from '@instore/utils/storage';
// /**
//  * Fetch initial JWT and set it in redux
//  * Spawn a saga that continuously refreshes the token
//  *
//  * If refresh token exists in local storage, attempt to use it to keep the same session alive, and retrieve a new jwt access token
//  * If refresh token fails, we fall back to fetching a fresh session
//  *
//  * If no refresh token exists, fetch a new nession
//  */
// export function* bootstrapJwt(): SagaIterator<void> {
//     //
//     // if refresh token fails, we fall back to fetching a fresh session
//     const refreshToken: string | null = yield call(storage.getItem, storage.getKeys().EDGE_REFRESH_TOKEN);
//     if (refreshToken) {
//         yield put(authenticationActions.setEdgeRefreshToken(refreshToken));
//         try {
//             const jwt: FsJwt = yield call(refreshJwt);
//             yield spawn(refreshJwtLoop, jwt);
//             return;
//         } catch (error) {
//             log.info('authentication::jwt::bootstrapJwt', error);
//             log.info(
//                 'authentication::jwt::bootstrapJwt',
//                 'initial refresh token failed, falling back to fetching a fresh session'
//             );
//         }
//     }
//     const jwt: FsJwt = yield call(retryWithBackOff, {
//         failureAction: systemActions.startHalted(),
//         fn: fetchAndSetJwt,
//         fnName: 'authentication::jwt::bootstrapJwt'
//     });
//     yield spawn(refreshJwtLoop, jwt);
// }
// const REFRESH_JWT_BEFORE_EXPIRATION_SECONDS = 5 * 60; // 5 minutes
// // KDEV has a very long TTL on tokens, which can cause us to pass in a value too large for setTimeout
// // which will instantly trigger the delay
// const MAX_DELAY = 2_147_483_647; // 32 bit int max
// /**
//  * Infinite loop that tries to refresh the JWT before it expires
//  *
//  * If refreshing fails for some reason, try to obtain a new session by doing edge login with loyalty credentials again
//  *
//  * @param initialJwt
//  */
// function* refreshJwtLoop(initialJwt: FsJwt) {
//     const logPrefix = 'authentication::jwt::refreshJwtLoop';
//     try {
//         let currentJwt = initialJwt;
//         for (;;) {
//             const expirationDelaySeconds = currentJwt.exp - currentJwt.iat;
//             let refreshDelayMs = (expirationDelaySeconds - REFRESH_JWT_BEFORE_EXPIRATION_SECONDS) * 1000;
//             refreshDelayMs = Math.max(
//                 Math.min(refreshDelayMs, MAX_DELAY),
//                 REFRESH_JWT_BEFORE_EXPIRATION_SECONDS * 1000
//             );
//             yield delay(refreshDelayMs);
//             try {
//                 const newJwt: FsJwt = yield call(refreshJwt);
//                 currentJwt = newJwt;
//             } catch (error) {
//                 log.info(`${logPrefix}::failed`, error);
//                 log.info(logPrefix, 'Attempting to do /edge/login again with Hawk credentials');
//                 const newJwt: FsJwt = yield call(retryWithBackOff, {
//                     fn: fetchAndSetJwt,
//                     fnName: 'authentication::jwt::refreshJwtLoop'
//                 });
//                 currentJwt = newJwt;
//             }
//         }
//     } catch (error) {
//         log.info(
//             logPrefix,
//             'Error occurred causing this saga to quit pre-maturely; should run for lifetime of application'
//         );
//         log.warn(`${logPrefix}::error::quittingSaga`, error);
//     }
// }
// /**
//  * Fetch JWT using standard Loyalty Credentials
//  * Save the raw JWT string into redux
//  */
// function* fetchAndSetJwt(): SagaIterator<FsJwt> {
//     const edgeAuthDetails: EdgeAuthDetails = yield call(loyaltyApi.edgeLogin);
//     yield put(authenticationActions.edgeCredentialsUpdate(edgeAuthDetails.rawJwt, edgeAuthDetails.refreshToken));
//     return edgeAuthDetails.decodedJwt;
// }
// /**
//  * Use refresh token to get a new JWT
//  */
// function* refreshJwt(): SagaIterator<FsJwt> {
//     const refreshToken: string | null = yield select(getEdgeRefreshToken);
//     if (!refreshToken) {
//         throw new Error('Cannot use null refresh token');
//     }
//     const edgeAuthDetails: EdgeAuthDetails = yield call(loyaltyApi.edgeRefresh, refreshToken);
//     yield put(authenticationActions.edgeCredentialsUpdate(edgeAuthDetails.rawJwt, edgeAuthDetails.refreshToken));
//     return edgeAuthDetails.decodedJwt;
// }
// export const privates = {
//     fetchAndSetJwt,
//     refreshJwt,
//     refreshJwtLoop
// };
