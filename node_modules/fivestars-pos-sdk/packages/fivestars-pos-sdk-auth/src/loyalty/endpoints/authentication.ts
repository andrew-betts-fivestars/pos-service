// import { AxiosResponse } from 'axios';
// import jwtDecode from 'jwt-decode';
// import { SagaIterator } from 'redux-saga';
// import { call } from 'redux-saga/effects';

// import { CONFIG } from '@app/config';
// import { device } from '@instore/hardware';
// import { makeApiRequest } from '@instore/middleware/api/makeApiRequest';
// import { getClientType } from '@instore/utils/clientType';
// import { AnalyticsEventCategory } from '@instore/utils/enums';
// import { log } from '@instore/utils/log';

// import { LoyaltyOnlyHeaderProvider } from '../headers';
// import { LoginLoyaltyPayload, LoginLoyaltyResponse, FsJwt, EdgeAuthDetails, EdgeAuthResponse } from '../types';
// import { AlwaysLoyaltyUrlProvider, LoyaltyUrls, URL } from '../urls';
// import { LOYALTY_PARAMS } from './params';

// export const LOG_PREFIX = 'loyaltyApi';

// export function* loginLoyalty(
//     email: string,
//     password: string,
//     softwareId: string
// ): SagaIterator<AxiosResponse<LoginLoyaltyResponse>> {
//     yield call(LoyaltyUrls.setSoftwareId, softwareId);

//     const PAYLOAD: LoginLoyaltyPayload = {
//         app_version: device.APP_VERSION,
//         client_type: getClientType(),
//         description: null,
//         device_type: device.DEVICE_TYPE,
//         email,
//         hardware_identifier: device.HARDWARE_ID,
//         password,
//         platform: device.PLATFORM,
//         product: CONFIG.PRODUCT,
//         software_version: device.SOFTWARE_VERSION,
//         version: device.SOFTWARE_VERSION
//     };

//     log.info(`${LOG_PREFIX}::loginLoyalty`, PAYLOAD);
//     return yield call(makeApiRequest, {
//         ...LOYALTY_PARAMS,
//         category: AnalyticsEventCategory.NON_TRANSACTION,
//         functionName: 'loginLoyalty',
//         headerProvider: undefined,
//         maxRetryAttempts: 0,
//         method: 'post',
//         path: LoyaltyUrls.getBusinessPath(URL.PRODUCT),
//         payload: PAYLOAD,
//         urlProvider: new AlwaysLoyaltyUrlProvider()
//     });
// }

// export function* edgeLogin(): SagaIterator<EdgeAuthDetails> {
//     const response: AxiosResponse<EdgeAuthResponse> = yield call(makeApiRequest, {
//         ...LOYALTY_PARAMS,
//         category: AnalyticsEventCategory.NON_TRANSACTION,
//         functionName: 'edgeLogin',
//         // using edge URL, but Authorization header should have HAWK credentials
//         headerProvider: new LoyaltyOnlyHeaderProvider(),
//         method: 'post',
//         params: { expose_tokens: true },
//         path: LoyaltyUrls.getRootApiPath(URL.EDGE_LOGIN),
//         // for some reason, need to use an empty payload object here instead of using the default (undefined)
//         payload: {}
//     });

//     const jwt = jwtDecode<FsJwt>(response.data.access_token);

//     return {
//         decodedJwt: jwt,
//         rawJwt: response.data.access_token,
//         refreshToken: response.data.refresh_token
//     };
// }

// export function* edgeRefresh(refreshToken: string): SagaIterator<EdgeAuthDetails> {
//     const response: AxiosResponse<EdgeAuthResponse> = yield call(makeApiRequest, {
//         ...LOYALTY_PARAMS,
//         category: AnalyticsEventCategory.NON_TRANSACTION,
//         functionName: 'edgeRefresh',
//         method: 'post',
//         params: { expose_tokens: true },
//         path: LoyaltyUrls.getRootApiPath(URL.EDGE_REFRESH),
//         payload: { refresh_token: refreshToken }
//     });

//     const jwt = jwtDecode<FsJwt>(response.data.access_token);

//     return {
//         decodedJwt: jwt,
//         rawJwt: response.data.access_token,
//         refreshToken: response.data.refresh_token
//     };
// }
