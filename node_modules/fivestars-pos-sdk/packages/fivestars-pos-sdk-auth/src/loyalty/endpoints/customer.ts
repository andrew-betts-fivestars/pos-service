// import { AxiosResponse } from 'axios';
// import { SagaIterator } from 'redux-saga';
// import { call, select } from 'redux-saga/effects';

// import { makeApiRequest } from '@instore/middleware/api/makeApiRequest';
// import { IApiCustomer } from '@instore/redux/customer/types';
// import { getProduct } from '@instore/redux/system/selectors';
// import { ITransactionItem } from '@instore/redux/transaction/types';
// import { Product } from '@instore/utils/enums';

// import { SaleResponse } from '../types';
// import { LoyaltyUrls, URL } from '../urls';
// import { LOYALTY_PARAMS } from './params';

// /* eslint-disable-next-line @typescript-eslint/no-var-requires */
// const sha1 = require('sha1');

// type GetCustomerMode = 'by-card' | 'by-uid' | 'by-phone';

// /**
//  * [UPAY-253] added double opt in for upay checkin
//  * We need to send 'Store Registration' as source for upay to trigger the double opt in
//  * sms flow, since we can't be sure that the customer is the one handling the device
//  */
// export enum StoreRegistrationSource {
//     Upay = 'Store Registration',
//     Rest = 'Store Registration - CTS'
// }

// export function* getCustomer(identifier: string, mode: GetCustomerMode): SagaIterator<AxiosResponse<IApiCustomer>> {
//     let customerPath = '';
//     if (mode === 'by-uid') {
//         customerPath = `${URL.CUSTOMER}/${identifier}`;
//     } else {
//         const identifierHash: string = sha1(identifier).toString();
//         customerPath = `${URL.CUSTOMER}/${mode}/${identifierHash}`;
//     }

//     return yield call(makeApiRequest, {
//         ...LOYALTY_PARAMS,
//         functionName: 'getCustomer',
//         method: 'get',
//         path: LoyaltyUrls.getBusinessPath(customerPath)
//     });
// }

// export function* registerCustomer(identifier: string): SagaIterator<AxiosResponse<IApiCustomer>> {
//     const product: Product = yield select(getProduct);
//     return yield call(makeApiRequest, {
//         ...LOYALTY_PARAMS,
//         functionName: 'registerCustomer',
//         method: 'post',
//         path: LoyaltyUrls.getBusinessPath('customers'),
//         payload: {
//             phone: identifier,
//             source: product === Product.UPAY ? StoreRegistrationSource.Upay : StoreRegistrationSource.Rest
//         }
//     });
// }

// interface PointItem {
//     amount: number;
// }

// interface RewardItem {
//     uid: string;
// }

// interface SaleData {
//     checkin_type: string;
//     points: PointItem[];
//     promotion_trackers: RewardItem[];
//     rewards: RewardItem[];
//     state: string;
// }

// export function* createSale(
//     accountUid: string,
//     checkinType: string,
//     points: number,
//     rewardItems: ITransactionItem[]
// ): SagaIterator<AxiosResponse<SaleResponse>> {
//     const salePath = `${URL.CUSTOMER}/${accountUid}/sales`;
//     const data: SaleData = {
//         checkin_type: checkinType,
//         points: [],
//         promotion_trackers: [],
//         rewards: [],
//         state: 'completed'
//     };

//     if (points !== 0) {
//         data.points.push({ amount: points });
//     }

//     if (rewardItems.length) {
//         const REWARD_ITEM = rewardItems[0];
//         if (REWARD_ITEM.external_uid) {
//             if (REWARD_ITEM.type === 'promotion') {
//                 data.promotion_trackers.push({ uid: REWARD_ITEM.external_uid });
//             } else if (REWARD_ITEM.type === 'reward') {
//                 data.rewards.push({ uid: REWARD_ITEM.external_uid });
//             }
//         }
//     }

//     return yield call(makeApiRequest, {
//         ...LOYALTY_PARAMS,
//         functionName: 'createSale',
//         maxRetryAttempts: 0,
//         method: 'post',
//         path: LoyaltyUrls.getBusinessPath(salePath),
//         payload: data
//     });
// }

// export function* createPoints(accountUid: string, points: number) {
//     const pointPath = `${URL.CUSTOMER}/${accountUid}/points`;
//     return yield call(makeApiRequest, {
//         ...LOYALTY_PARAMS,
//         functionName: 'createPoints',
//         maxRetryAttempts: 0,
//         method: 'post',
//         path: LoyaltyUrls.getBusinessPath(pointPath),
//         payload: { amount: points }
//     });
// }
