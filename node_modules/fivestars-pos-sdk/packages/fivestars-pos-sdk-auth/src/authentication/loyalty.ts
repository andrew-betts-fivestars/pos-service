// import { AxiosResponse } from 'axios';
// import { SagaIterator } from 'redux-saga';
// import { call, put } from 'redux-saga/effects';

// import { getStartConfig, StartConfig } from '@app/middleware/sagas/appStartHelper';
// import { loyaltyApi, applyLoyaltyCredentials } from '@instore/middleware/api';
// import { initializeAnalyticsWithSoftwareId } from '@instore/middleware/sagas/appStartHelper';
// import * as authenticationActions from '@instore/redux/authentication/actions';
// import { ILoyaltyCredentials } from '@instore/redux/authentication/types';
// import * as businessActions from '@instore/redux/business/actions';
// import { Business, ILogin } from '@instore/redux/business/types';
// import * as pairingActions from '@instore/redux/pairing/actions';
// import * as systemActions from '@instore/redux/system/actions';
// import { log } from '@instore/utils/log';
// import { retryWithBackOff } from '@instore/utils/retryWithBackOff';
// import { storage } from '@instore/utils/storage';

// /**
//  * Attempt to authenticate with Loyalty server, using stored loyalty credentials
//  * Returns the loyalty credentials on success, null if credentials do not exist
//  */
// export function* authenticateFromCredentials(): SagaIterator<ILoyaltyCredentials | null> {
//     // Note: For host based applications the call to getStartConfig
//     // can result in changing the hardware identifier
//     const startConfig: StartConfig = yield call(getStartConfig);
//     const loyaltyCredentials = startConfig.loyaltyCredentials;

//     // if loyalty credentials are null, cannot start from storage
//     if (!loyaltyCredentials) {
//         return null;
//     }

//     yield call(initializeAnalyticsWithSoftwareId, loyaltyCredentials.softwareId, 'storage');

//     // Restore business info from local storage
//     // this is to populate redux so the out of service page can display business name
//     const business: Business | null = yield call(storage.getItem, storage.getKeys().BUSINESS);
//     if (business) {
//         yield put(businessActions.setBusiness(business));
//     }

//     // need to set loyalty credentials before making heartbeat call; which is an authenticated call
//     yield call(applyLoyaltyCredentials, loyaltyCredentials);
//     yield put(authenticationActions.loyaltyCredentialsUpdate(loyaltyCredentials));
//     const heartbeat: AxiosResponse = yield call(retryWithBackOff, {
//         failureAction: systemActions.startHalted(),
//         fn: loyaltyApi.sendHeartbeat,
//         fnName: 'authentication::loyalty::sendHeartbeat'
//     });

//     /**
//      * The device description from loyalty is the source of truth
//      * If someone updates the device description through the django console
//      * it gets reflected in the app through this call to the heartbeat
//      */
//     const deviceDescription: string = heartbeat.data.description;

//     yield call(postAuthentication, loyaltyCredentials, deviceDescription);
//     return loyaltyCredentials;
// }

// /**
//  * Attempt to authenticate with Loyalty server with the given email/password/softwareId
//  * Returns loyalty credentials object on success, will throw on unsuccessful login
//  */
// //export function* authenticateFromLogin(loginInfo: ILogin): SagaIterator<ILoyaltyCredentials> {
// export authenticateFromLogin(loginInfo: ILogin): Promise<ILoyaltyCredentials> {
//     const loyalty: AxiosResponse = yield call(
//         loyaltyApi.loginLoyalty,
//         loginInfo.email,
//         loginInfo.password,
//         loginInfo.softwareId
//     );
//     const loyaltyCredentials: ILoyaltyCredentials = {
//         apiKey: loyalty.data.apikey,
//         apiSecret: loyalty.data.apisecret,
//         softwareId: loginInfo.softwareId
//     };
//     const deviceDesciption: string = loyalty.data.description;

//     yield call(postAuthentication, loyaltyCredentials, deviceDesciption);

//     return loyaltyCredentials;
// }

// function* postAuthentication(loyaltyCredentials: ILoyaltyCredentials, deviceDescription: string) {
//     log.info('device description', deviceDescription);
//     log.info('loyalty credentials', loyaltyCredentials);

//     yield call(applyLoyaltyCredentials, loyaltyCredentials);

//     // writes loyalty credentials to local storage
//     yield put(authenticationActions.loyaltyCredentialsUpdate(loyaltyCredentials));

//     yield put(pairingActions.deviceDescriptionUpdate(deviceDescription));
//     yield put(businessActions.setSoftwareId(loyaltyCredentials.softwareId));
// }
