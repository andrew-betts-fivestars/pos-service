import { ILoyaltyCredentials, KnownDevice, MessageDetails, PairedDevice, SendOptions } from '@fivestars-pos-sdk/types';
import WebSocket from 'isomorphic-ws';
export declare const LOG_PREFIX = "Pairing";
export declare class Pairing {
    private core;
    constructor();
    start: (loyaltyCredentials: ILoyaltyCredentials) => void;
    pair(pairedDevice: PairedDevice): Promise<boolean>;
    unPair(notifyPairedDevice?: boolean): Promise<boolean>;
    getInPairingMode(): Promise<boolean>;
    getPairedDevice(): PairedDevice | null;
    isPairingConfigured(): Promise<boolean>;
    getDeviceDescription(): Promise<string | null>;
    getKnownDevices(): KnownDevice[];
    setKnownDevices(knownDevices: KnownDevice[]): Promise<KnownDevice[]>;
    /**
    * Get known devices -- minus the known device that corresponds to our paired apikey
    */
    getOtherKnownDevices(): Promise<KnownDevice[]>;
    /**
    * Get KnownDevice representation of the paired device. If it is not found in the known devices, construct one with incomplete info
    */
    getPairedKnownDevice(): Promise<KnownDevice>;
    private deletePairedDevice;
    /**
        Function: processDeviceMapping

        Paramaters:
            apiKey:
            apiSecret:
            bluetoothMacAddress:
            deviceDescription:
            hardwareId:
            udpPort:

        Description: called when @fivestars-pos-sdk-messenger receives 'ws.device_mapping' websocket message
    */
    onDeviceMapping: (event: WebSocket.MessageEvent) => void;
    /**
        Function: processErroneousPairing

        Parameters:
            erroneousDeviceApiKey: string,
            pairedDeviceApiKey: string)

        Description:
        This is a special case action for clearing out an erroneous pairing relationship
        which doesn't have the side-effects of "unpair"
    */
    onErroneousPairing: (event: WebSocket.MessageEvent) => void;
    onDeviceInfoUpdate: (event: any) => void;
    sendPairedMessage: (messageDetails: MessageDetails, options: SendOptions) => Promise<string | null>;
    constructPairedMessageDetails: (messageData: any, messageType: string) => MessageDetails;
    sendSubscriberAuthenticated: () => void;
}
