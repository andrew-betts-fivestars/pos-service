import { EventEmitter } from 'events';
import WebSocket from 'isomorphic-ws'
import { Messenger, WebRtcTransport, WebSocketTransport, UdpTransport } from '@fivestars-pos-sdk/fivestars-pos-sdk-messenger'
import { ILoyaltyCredentials, MessageDetails, PairedDevice, SendOptions } from '@fivestars-pos-sdk/types'
import { PairingModel } from '@fivestars-pos-sdk/fivestars-pos-sdk-storage'

export class Core extends EventEmitter {
    public webSocketTransport:WebSocketTransport | null
    public webRtcTransport:WebRtcTransport | null
    public udpTransport:UdpTransport | null
    private messenger: Messenger

    constructor() {
        super()
        this.webRtcTransport = new WebRtcTransport()
        this.webSocketTransport = new WebSocketTransport()
        this.udpTransport = new UdpTransport()
        this.messenger = new Messenger(this.udpTransport, this.webSocketTransport, this.webRtcTransport)
        this.messenger.on("message", this.onMessage)
    }
    
    public start(loyaltyCredentials: ILoyaltyCredentials): void {
        console.log("Core::start")
        this.messenger?.start(loyaltyCredentials)
    }

    public setPairedDevice(pairedDevice: PairedDevice | null): void {
        console.log('Core::setPairedDevice', pairedDevice)
        this.messenger.setPairedDevice(pairedDevice)
    }

    public async sendPaired(messageDetails: MessageDetails, options: SendOptions): Promise<string | null> {
        return await this.messenger?.sendPaired(messageDetails, options)    
    }

    public startTransaction(): void {
        //   return await this.messenger?.sendPaired(messageDetails, options)            
    }

    public abortTransaction(): void {
        // dispatch(messengerActions.clearPairedMessageQueue());
        // dispatch(messengerActions.sendAbortTransaction());
    }    


    public onMessage = (event: any): void => {
        console.debug("Core::on message", event)
        this.emit(event.action, event.data)
    }
}