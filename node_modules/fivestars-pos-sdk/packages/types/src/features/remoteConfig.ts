export interface RemoteConfigState {
    remoteConfig: RemoteConfig;
    experimentConfigs: ExperimentConfigs;
}

export interface RemoteConfig {
    [key: string]: boolean | string | object;
}

export interface ExperimentListRule {
    type: ExperimentAssignmentRule.LIST;
    softwareIds: string[];
}

export interface ExperimentRangeRule {
    type: ExperimentAssignmentRule.RANGE;
    min: number;
    max: number;
}

export interface ExperimentConfig {
    cells: {
        // mandatory excluded cell that will always be a list of software ids
        excluded: ExperimentListRule;

        // any number of arbitrary cell names with an associated rule for assignment
        [cellName: string]: ExperimentListRule | ExperimentRangeRule;
    };

    // only report the assignment if the active flag is on
    active: boolean;

    // if merchant does not get assigned to any cell; use general rollout percent
    general_rollout_percent: number;
}

export type ExperimentConfigs = Partial<Record<Experiment, ExperimentConfig>>;

export enum Experiment {
    EARLY_CHECKIN = 'feature_early_checkin',
    CONSUMER_MOBILE_REWARD_REDEMPTION = 'feature_consumer_mobile_reward_redemption',
    EDGE_GATEWAY_LOYALTY = 'feature_edge_gateway_loyalty',

    /**
     * mostly used to get coverage on cases where we explicitly are skipping over
     * previous experiments that no longer have an entry in the remote config
     */
    PLACEHOLDER = 'placeholder',
    PLACEHOLDER_INACTIVE = 'placeholder_inactive'
}

export enum ExperimentAssignmentRule {
    LIST = 'list',
    RANGE = 'range'
}

export type ExperimentAssignment = {
    cell: string | null;
    percentile: number;
    rule: ExperimentAssignmentRule | null;
};

export type ExperimentAssignments = Map<Experiment, ExperimentAssignment>;
