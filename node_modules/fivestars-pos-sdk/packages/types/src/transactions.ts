// import * as moment from 'moment';
// import { ActionType } from 'typesafe-actions';

// import { ArqcResponse, CardSwipeResponse } from '@instore/hardware/cardReader/types';
// import { IPromotion } from '@instore/redux/customer/types';
// import { StartPaymentOptions, StartRefundOptions } from '@instore/redux/merchant/types';
// import { IReward } from '@instore/redux/rewards/types';
// import { CardInputType, Status } from '@instore/utils/enums';
// import { IMoney } from "./money"
import { PaymentTypes } from "./utils"

// import * as transactionActions from './actions';

// export enum CardError {
//     GENERAL = 'GENERAL',
//     DECLINE = 'DECLINE',
//     READ = 'READ',
//     REQUIRE_DIP = 'REQUIRE_DIP',
//     REQUIRE_SWIPE = 'REQUIRE_SWIPE'
// }

export enum EarlyCheckinModal {
    CHECKING_IN = 'checkingIn',
    NO_REWARD_SELECTED = 'noRewardSelected',
    NONE = 'none',
    REWARD_BANNER = 'rewardBanner',
    REWARD_REMOVED = 'rewardRemoved',
    REWARD_SELECTED = 'rewardSelected',
    SELECTING_REWARD = 'selectingReward'
}

// // This is the encrypted information from the card-reader plus a type
// // indicating whether it was dip or swipe.  Impression is the name that
// // the server team has given to this information packet.  Using the same
// // name so we can have a common vernacular with the server team.
// export type CardImpression = {
//     readonly type: CardInputType;
//     readonly payload: CardSwipeResponse | ArqcResponse | KeyedEntryCardData;
// };

// // This is the human recognizable representation of the card (ex., last4 and brand)
// // plus other information used to identify the card but it is all PCI compliant.
// export type CardCompliantDetails = {
//     readonly cardBrand: string;
//     // the server is not always
//     // able to scrape the name
//     // from the encrypted card
//     readonly fullName: string | null;
//     readonly last4: string;
//     // the tokenUid is populated and
//     // used to run stripe transactions
//     tokenUid: string | null;
//     // we only have an accountUid
//     // if the card is already linked
//     accountUid: string | null;
//     // allowing these to be null
//     // because we populated them
//     // for stripe in two passes
//     cardUid: string | null;
//     createdAt: moment.Moment | null;
// };

export enum TransactionType {
    NONE = 'none',
    PAYMENT = 'payment',
    REFUND = 'refund',
    UNKNOWN = 'unknown',
    EARLY_CHECKIN = 'earlyCheckin'
}

// export enum TenderType {
//     NONE = '',
//     CASH = 'cash',
//     CREDIT = 'credit'
// }

// export interface TransactionState {
//     approveTotalNeeded: boolean;
//     cardAuthorizationAttempts: number;
//     cardError: CardError | null;
//     cardImpression: CardImpression | null;
//     cardCompliantDetails: CardCompliantDetails | null;
//     cashAmount: IMoney;
//     cashDiscount: IMoney;
//     cdAdjustment: IMoney;
//     isConsumerMobileAppDownloadTextSent: boolean;
//     earlyCheckinModal: EarlyCheckinModal;
//     failedOcrPayload: FailedOcrPayload | null;
//     failedOcr: FailedOcr | null;
//     groupRefundSuccesses: IApiTransaction[];
//     groupRefundFailures: IApiTransaction[];
//     groupUid: string | null;
//     groupUidStatus: Status;
//     hostSplitPayment: boolean;
//     idempotencyKey: string | null;
//     initialTransactionAmount: IMoney;
//     initialTransactionAmountMinusReward: IMoney;
//     initiateTransactionSent: boolean;
//     isEarlyCheckin: boolean;
//     options: ITransactionOptions;
//     orderSummaryOrderTabSelected: boolean;
//     paymentType: string;
//     pendingPayment: StartPaymentOptions | null;
//     pendingRefund: StartRefundOptions | null;
//     points: number;
//     receiptUid: string;
//     rewardApplied: boolean;
//     refundAmount: IMoney;
//     refundStatus: Status;
//     refundableTransactions: IApiTransaction[];
//     selectedRefund: IApiTransaction | null;
//     selectedReward: ISelectedReward;
//     sessionId: string;
//     showCancelSplitPaymentModal: boolean;
//     splitPayment: boolean;
//     splitPaymentAmount: IMoney;
//     splitPaymentCashDiscount: IMoney;
//     splitPaymentCdAdjustment: IMoney;
//     splitPaymentEqualSplits: number;
//     splitPaymentNumber: number;
//     splitPaymentStates: TransactionState[];
//     splitPaymentTotalSplits: number;
//     splitPaymentEqualSplitTotal: IMoney;
//     tip: IMoney;
//     transactionSent: boolean;
//     transactionTotalUid: string | null;
//     transactionType: TransactionType;
//     transactionCreatedTime: moment.Moment | null;
//     transactionCompletedTime: moment.Moment | null;
//     transactionsCount: number;
//     transactionsList: IApiTransaction[];
//     transactionsListStatus: Status;
//     transactionUid: string;
// }

// export interface ISelectedReward {
//     active: boolean;
//     // item name goes on receipt
//     itemName: string;
//     // shortname appears on reward confirmation
//     perkShortName: string;
//     type: TransactionItemType | '';
//     value: number;
//     pointCost: number;
//     uid: string;
// }

// export interface ITransactionItem {
//     type: TransactionItemType;
//     amount: number;
//     // ws expects this snake cased
//     external_uid?: string;
// }

// export enum TransactionItemType {
//     TIP = 'tip',
//     TOTAL = 'total',
//     PROMOTION = 'promotion',
//     REWARD = 'reward',
//     // if there was a cash discount applied, the value of this item should be a negative number
//     // e.g. -400 corresponds to 4 dollars off
//     CASH_DISCOUNT = 'cash-discount',
//     CD_ADJUSTMENT = 'cd-adjustment'
// }

// export type KeyedEntryCardPayload = {
//     readonly uid: string;
//     readonly expiration_date: string;
//     readonly cvc: string;
// };

// export type KeyedEntryCardData = {
//     readonly card: KeyedEntryCardPayload;
//     readonly zip: string;
// };

// export interface ITrackData {
//     cardNumber: string;
//     expiryMonth: string;
//     expiryYear: string;
//     firstName: string | null;
//     lastName: string | null;
// }

// export interface ITransactionSelectReward {
//     readonly reward: IReward;
// }

// export interface ITransactionSelectPromotion {
//     readonly promotion: IPromotion;
// }

// export interface ITransactionSetTip {
//     readonly tip: IMoney;
// }

// export interface ITransactionRefundAmount {
//     readonly refundAmount: IMoney;
//     readonly isManualTransaction: boolean;
//     readonly transactionTotalUid: string | null;
// }

// export interface ITransactionCashAmount {
//     readonly cashAmount: IMoney;
// }

export interface TransactionCancel {
    readonly location: string;
}

export interface ITransactionOptions {
    readonly cashEnabled: boolean;
    readonly manualTransaction: boolean;
    readonly showRewards: boolean;
    readonly splitPayment: boolean;
    readonly splitPaymentNumber: number;
    readonly groupUid: string | null;
}

// export interface ITransactionSetInitialTransactionAmount {
//     readonly paymentType: string;
//     readonly initialTransactionAmount: IMoney;
//     readonly options: ITransactionOptions;
//     readonly transactionTotalUid: string | null;
// }

// export interface ITransactionSetReward {
//     item: ITransactionItem;
//     perkShortName: string;
//     rewardValue: number;
//     itemName: string;
//     pointCost: number;
// }

// export interface ITransactionSetInitialTransactionAmountMinusReward {
//     readonly initialTransactionAmountMinusReward: IMoney;
//     readonly transactionTotalUid: string | null;
// }

// export interface ITransactionUpdateInitialTransactionAmount {
//     readonly initialTransactionAmount: IMoney;
//     readonly options: ITransactionOptions;
// }

// export interface ICardError {
//     readonly cardError: CardError;
// }

// export interface IApiAccount {
//     readonly uid?: string;
//     readonly name?: string | null;
//     readonly phone?: string;
// }
// export interface ApiCard {
//     readonly account_uid?: string;
//     readonly brand: string;
//     readonly created_at: string;
//     readonly last4: string;
//     readonly uid: string;
// }

// export interface IApiTransaction {
//     readonly account: IApiAccount;
//     readonly amount: number;
//     readonly business_uid: string;
//     readonly created_at: string;
//     readonly group: {
//         readonly uid?: string;
//         readonly transactions?: IApiTransaction[];
//     };
//     readonly hash_id: string;
//     readonly items: ITransactionItem[];
//     readonly purchase_transaction_uid: string | null; // the original purchase transaction uid reference for a refund transaction, null otherwise.
//     readonly refundable_amount: number;
//     readonly refund_transaction?: any;
//     readonly transaction_type: string;
//     readonly token: {
//         readonly uid?: string;
//         readonly type?: string;
//         readonly token?: string;
//         readonly card?: {
//             readonly uid?: string;
//             readonly last4?: string;
//             readonly brand?: string;
//             readonly fingerprint?: string;
//             readonly created_at?: string;
//         };
//     };
//     readonly uid: string;
// }

// export interface FailedOcr {
//     readonly image: string;
//     readonly region: number[];
// }

export interface FailedOcrPayload {
    readonly isRefund: boolean;
    readonly type?: string;
    readonly options?: {
        showRewards: boolean;
    };
    readonly transactionTotalUid: string | null;
}

// export interface RefundData {
//     amount: IMoney;
//     transaction: IApiTransaction;
// }

// export const DEFAULT_TRANSACTION_OPTIONS: ITransactionOptions = {
//     cashEnabled: true,
//     groupUid: null,
//     manualTransaction: false,
//     showRewards: true,
//     splitPayment: false,
//     splitPaymentNumber: 1
// };

// export type TransactionAction = ActionType<typeof transactionActions>;

