//import { ActionType } from 'typesafe-actions';
import { CustomError } from 'ts-custom-error';

import { PingPongDurationStats, PingPongStats } from './transports';
import { UdpBroadcastStats } from './transports/udp';
import { WebRtcErrorStats } from './transports/webrtc';
//import { TransportType } from '';
import { HealthStateDatum } from './health';

//import * as messengerActions from './actions';

export const Acknowledgment = 'ack';

export interface MessageDetails {
    readonly destination: string | null;
    readonly messageData: { [key: string]: unknown };
    readonly messageType: string;
    readonly source: string | null;
    readonly webappVersion: string;
}

export type Acknowledgment = {
    acknowledgedTime: number;
    sessionId: string | null;
    uuid: string;
};

export type SentMessageStatistics = {
    averageRoundtripDuration: number;
    countAcknowledged: number;
    countUnacknowledged: number;
    endTime: number;
    maxDuration: number;
    maxSentDateTime: string;
    maxSentTime: number;
    medianRoundtripDuration: number;
    minDuration: number;
    minSentDateTime: string;
    minSentTime: number;
    minToMaxDuration: number;
    periodDuration: number;
    startTime: number;
};

export type SentMessageStatisticsPerTransport = { [transportType in TransportType]: SentMessageStatistics };

export type BluetoothStats = { pingPongStats: PingPongStats; pingPongDurationStats: PingPongDurationStats };
export type UdpStats = {
    broadcastStats: UdpBroadcastStats;
    pingPongStats: PingPongStats;
    pingPongDurationStats: PingPongDurationStats;
};
export type WebRtcStats = {
    errorStats: WebRtcErrorStats;
    pingPongStats: PingPongStats;
    pingPongDurationStats: PingPongDurationStats;
};

export type TransportStatistics = {
    // AB todo: need to uncomment bluetooth if needed in future
//    [TransportType.BLUETOOTH]: BluetoothStats;
    [TransportType.UDP]: UdpStats;
    [TransportType.WEB_RTC]: WebRtcStats;
    [TransportType.WEB_SOCKET]: WebsocketConnectStatistics;
};

export interface WebsocketConnectStatistics {
    connectedButNotOnLine: number;
    connectRequests: number;
    failedReconnect: number;
    maxBufferedAmount: number;
    pingTimeouts: number;
    reconnectAttempts: number;
    reconnectRequests: number;
    reconnectUnacknowledged: number;
}

export type HealthStateSnapshot = {
    event: 'state';
    platform: string;
    version: string;
    start_time: number;
    states: HealthStateDatum[];
};

export type HealthHeartbeatSnapshot = {
    event: 'heartbeat';
    heartbeat_uuid: string;
    app_type: string;
    product: string;
    platform: string;
    version: string;
    webapp_version: string;
    start_time: number;
    states: HealthStateDatum[];
};

export type SendOptions = {
    skipAcknowledgment: boolean;
    uuid: string | null;
};

export type SentMessage = {
    acknowledgedTime: number | null;
    payload: any;
    reconnectCount: number;
    resendCount: number;
    responseTime: number | null;
    sentTime: number;
    skipAcknowledgment: boolean;
};

export interface Message {
    action: string;
    data: { [key: string]: unknown };
    destination: string | null;
    webappVersion: string;
    source: string | null;
    uuid: string;
}

export type MessageAcknowledgment = {
    action: 'ack';
    data: Acknowledgment;
    destination: string | null;
    source: string | null;
    uuid: string;
};

export type MessageGeneral = {
    action: string;
    data: { [key: string]: unknown };
    destination: string | null;
    source: string | null;
    uuid: string;
    webappVersion: string;
};

export type Callbacks = {
    onCloseCallback: (_event: any) => void
    onErrorCallback: (_event: any) => void
//    onMessageCallback: (message: any, extra?: MessageExtra) => void    
    onMessageCallback: (message: any, extra?: any) => void
    onOpenCallback: (_event: any) => void
};

//export type MessengerAction = ActionType<typeof messengerActions>;

export interface MessengerState {
    bluetoothMacAddress: string;
    transport: TransportType;
    udpPort: number;
}

export enum TransportType {
    BLUETOOTH = 'Bluetooth',
    UDP = 'UDP',
    WEB_SOCKET = 'WebSocket',
    WEB_RTC = 'WebRtc'
}

export interface TransportPairedQueueThresholds {
    reconnect: number;
    resend: number;
}

export type SentMessages = {
    [uuid: string]: SentMessage;
};

export type SentMessagesPerTransport = { 
    [transportType in TransportType]: SentMessages
 };

export class PairedQueueFailedMessage extends CustomError {}

///

// The following types are taken from redux/messenger/types in instore

//

//import { ActionType } from 'typesafe-actions';
//import { TransportType } from '@instore/middleware/messenger/types';
//import * as messengerActions from './actions';

//export const Acknowledgment = 'ack';

export interface MessageDetails {
    readonly destination: string | null;
    readonly messageData: { [key: string]: unknown; };
    readonly messageType: string;
    readonly source: string | null;
    readonly webappVersion: string;
}

// export type Acknowledgment = {
//     acknowledgedTime: number;
//     sessionId: string | null;
//     uuid: string;
// };

// export type SentMessageStatistics = {
//     averageRoundtripDuration: number;
//     countAcknowledged: number;
//     countUnacknowledged: number;
//     endTime: number;
//     maxDuration: number;
//     maxSentDateTime: string;
//     maxSentTime: number;
//     medianRoundtripDuration: number;
//     minDuration: number;
//     minSentDateTime: string;
//     minSentTime: number;
//     minToMaxDuration: number;
//     periodDuration: number;
//     startTime: number;
// };

//export type SentMessageStatisticsPerTransport = { [transportType in TransportType]: SentMessageStatistics };

// export type BluetoothStats = { pingPongStats: PingPongStats; pingPongDurationStats: PingPongDurationStats };
// export type UdpStats = {
//     broadcastStats: UdpBroadcastStats;
//     pingPongStats: PingPongStats;
//     pingPongDurationStats: PingPongDurationStats;
// };

// export type WebRtcStats = {
//     errorStats: WebRtcErrorStats;
//     pingPongStats: PingPongStats;
//     pingPongDurationStats: PingPongDurationStats;
// };

// export type TransportStatistics = {
//     [TransportType.BLUETOOTH]: BluetoothStats;
//     [TransportType.UDP]: UdpStats;
//     [TransportType.WEB_RTC]: WebRtcStats;
//     [TransportType.WEB_SOCKET]: WebsocketConnectStatistics;
// };

export interface WebsocketConnectStatistics {
    connectedButNotOnLine: number;
    connectRequests: number;
    failedReconnect: number;
    maxBufferedAmount: number;
    pingTimeouts: number;
    reconnectAttempts: number;
    reconnectRequests: number;
    reconnectUnacknowledged: number;
}

// export type HealthStateSnapshot = {
//     event: 'state';
//     platform: string;
//     version: string;
//     start_time: number;
//     states: HealthStateDatum[];
// };

// export type HealthHeartbeatSnapshot = {
//     event: 'heartbeat';
//     heartbeat_uuid: string;
//     app_type: string;
//     product: string;
//     platform: string;
//     version: string;
//     webapp_version: string;
//     start_time: number;
//     states: HealthStateDatum[];
// };

// export type SendOptions = {
//     skipAcknowledgment: boolean;
//     uuid: string | null;
// };

// export type SentMessage = {
//     acknowledgedTime: number | null;
//     payload: any;
//     reconnectCount: number;
//     resendCount: number;
//     responseTime: number | null;
//     sentTime: number;
//     skipAcknowledgment: boolean;
// };

export interface Message {
    action: string;
    data: { [key: string]: unknown; };
    destination: string | null;
    webappVersion: string;
    source: string | null;
    uuid: string;
}

// export type MessageAcknowledgment = {
//     action: 'ack';
//     data: Acknowledgment;
//     destination: string | null;
//     source: string | null;
//     uuid: string;
// };

// export type MessageGeneral = {
//     action: string;
//     data: object;
//     destination: string | null;
//     source: string | null;
//     uuid: string;
//     webappVersion: string;
// };

// export type Callbacks = {
//     onCloseCallback: Function;
//     onErrorCallback: Function;
//     onMessageCallback: Function;
//     onOpenCallback: Function;
// };

//export type MessengerAction = ActionType<typeof messengerActions>;

export interface MessengerState {
    bluetoothMacAddress: string;
    transport: TransportType;
    udpPort: number;
}   
