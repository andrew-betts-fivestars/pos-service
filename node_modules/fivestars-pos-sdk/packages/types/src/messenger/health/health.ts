//import { ActionType } from 'typesafe-actions';

// import * as healthAggregationActions from './aggregation/actions';
// import { HealthAggregationState } from './aggregation/types';
// import { DiscreteHealthState } from './discrete/types';

// export type HealthAction = ActionType<typeof healthAggregationActions>;

// export interface HealthState {
//     aggregation: HealthAggregationState;
//     discrete: DiscreteHealthState;
// }

export enum HealthStateLabel {
    BATTERY_HEALTH = 'BatteryHealth',
    BATTERY_LEVEL = 'BatteryLevel',
    BATTERY_TEMPERATURE = 'BatteryTemperature',
    CARD_READER_STATUS = 'CardReaderStatus',
    CHARGING_STATUS = 'ChargingStatus',
    CLOCK_SKEW = 'ClockSkew',
    DYNAWAVE_STATUS = 'DynaWaveStatus',
    EDYNAMO_STATUS = 'EDynamoStatus',
    PAIRING = 'Pairing',
    PLUGGED_IN = 'PluggedIn',
    WEB_SOCKET_UNACKNOWLEDGED = 'WebSocketUnacknowledged',
    WIFI_SIGNAL = 'WifiSignal'
}

export enum HealthCardReaderStatusValue {
    UNPLUGGED = 'Unplugged',
    NO_USB_PERMISSION = 'No USB Permission',
    REPORTING_ERROR = 'Reporting Error',
    WORKING_CORRECTLY = 'Working Correctly'
}

export enum HealthSeverityLabel {
    NORMAL = 'normal',
    MINOR = 'minor',
    MAJOR = 'major',
    CRITICAL = 'critical'
}

export enum HealthSeverity {
    NORMAL,
    MINOR,
    MAJOR,
    CRITICAL
}

export enum HealthAttributeName {
    CARD_READER_HARDWARE_NAME = 'card_reader_hardware_name'
}

export const severityToLabel = (sev: HealthSeverity): HealthSeverityLabel => {
    switch (sev) {
        case HealthSeverity.NORMAL:
            return HealthSeverityLabel.NORMAL;
        case HealthSeverity.MINOR:
            return HealthSeverityLabel.MINOR;
        case HealthSeverity.MAJOR:
            return HealthSeverityLabel.MAJOR;
        case HealthSeverity.CRITICAL:
            return HealthSeverityLabel.CRITICAL;
    }
};

export type HealthStateDatum = {
    state: HealthStateLabel | string;
    severity: HealthSeverityLabel;
    value: string | number | boolean | null;
    text?: string;
};
