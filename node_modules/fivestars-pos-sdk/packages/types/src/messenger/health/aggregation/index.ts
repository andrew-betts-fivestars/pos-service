// import { ActionType } from 'typesafe-actions';

import { HealthSeverityLabel } from '../health';

// import * as healthAggregationActions from './actions';

/* Aggregate Alert definitions */

export interface HealthAggregationRules {
    name: string;
    rules: HealthAggregationRule[];
}

export enum HealthAggregationRuleType {
    PERCENT = 'percent',
    COUNT = 'count'
}

export interface HealthAggregationRule {
    type: HealthAggregationRuleType;
    numHeartbeats: number;

    // minimum number of events that must happen for this rule to apply
    minimumCount: number | null;

    // if none of the defined thresholds are hit, "normal" state is assumed
    thresholds: {
        // key is optional, otherwise when creating an object literal you would
        // have to define all possible HealthSeverity values
        [severity in HealthSeverityLabel]?: number;
    };
}

/* end Alert definitions */

/* Aggregation of state */

export interface HealthEvent {
    state: string;
    isHealthy: boolean;
}

export interface HealthEventAggregation {
    healthy: number;
    unhealthy: number;

    percent: number;
}

export interface CurrentHeartbeatAggregations {
    [state: string]: HealthEventAggregation;
}

/*
    Each entry in the HealthAggregate array is the agggregate for that heartbeat number
    E.g. data in nth index is the total aggregate of events from that heartbeat and the previous n-1
*/
export interface RollingHeartbeatAggregations {
    [state: string]: HealthEventAggregation[];
}

/* end Aggregation of state */

/* Reducer */
export interface HealthAggregationState {
    currentHeartbeat: CurrentHeartbeatAggregations;
    rollingHeartbeats: RollingHeartbeatAggregations;
    aggregationRules: HealthAggregationRules[];
}
/* end Reducer */

//export type HealthAggregationActions = ActionType<typeof healthAggregationActions>;
