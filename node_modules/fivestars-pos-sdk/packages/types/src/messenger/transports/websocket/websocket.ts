import { CustomError } from 'ts-custom-error';

import { WebSocketCommonAction } from '../../../utils/enums';

export interface WebSocketConfiguration {
    host: string;
    maxRetryDelay: number;
    pathEnd: string;
    pathStart: string;
    port: number;
    retryDelay: number;
    scheme: string;
}

export type ReconnectOptions = {
    tryReconnect: boolean;
};

export enum ReadyState {
    CONNECTING = 0,
    OPEN = 1,
    CLOSING = 2,
    CLOSED = 3
}

export type MessageAuthenticationResponse = {
    action: WebSocketCommonAction.AUTHENTICATION_RESPONSE;
    data: {
        success: boolean;
    };
};

export type MessageFailure = {
    action: WebSocketCommonAction.FAILURE;
};

// Note: This structure matches the AxiosError structure
//       so we can use it with the retryWithBackOff
export class WebSocketError extends CustomError {
    response: {
        status: number;
    } = {
        status: 200
    };

    // this is necessary because there is a bug in jest
    // https://stackoverflow.com/questions/51216056/jest-unit-testing-if-super-is-called
    // https://github.com/gotwarlost/istanbul/issues/690
    /* istanbul ignore next */
    public constructor(status: number, message?: string) {
        super(message);
        this.response.status = status;
    }
}

export enum WebSocketReconnectReason {
    UNACKED_MESSAGE
}
