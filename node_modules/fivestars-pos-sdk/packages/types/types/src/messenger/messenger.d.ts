import { CustomError } from 'ts-custom-error';
import { PingPongDurationStats, PingPongStats } from './transports';
import { UdpBroadcastStats } from './transports/udp';
import { WebRtcErrorStats } from './transports/webrtc';
import { HealthStateDatum } from './health';
export declare const Acknowledgment = "ack";
export interface MessageDetails {
    readonly destination: string | null;
    readonly messageData: {
        [key: string]: unknown;
    };
    readonly messageType: string;
    readonly source: string | null;
    readonly webappVersion: string;
}
export declare type Acknowledgment = {
    acknowledgedTime: number;
    sessionId: string | null;
    uuid: string;
};
export declare type SentMessageStatistics = {
    averageRoundtripDuration: number;
    countAcknowledged: number;
    countUnacknowledged: number;
    endTime: number;
    maxDuration: number;
    maxSentDateTime: string;
    maxSentTime: number;
    medianRoundtripDuration: number;
    minDuration: number;
    minSentDateTime: string;
    minSentTime: number;
    minToMaxDuration: number;
    periodDuration: number;
    startTime: number;
};
export declare type SentMessageStatisticsPerTransport = {
    [transportType in TransportType]: SentMessageStatistics;
};
export declare type BluetoothStats = {
    pingPongStats: PingPongStats;
    pingPongDurationStats: PingPongDurationStats;
};
export declare type UdpStats = {
    broadcastStats: UdpBroadcastStats;
    pingPongStats: PingPongStats;
    pingPongDurationStats: PingPongDurationStats;
};
export declare type WebRtcStats = {
    errorStats: WebRtcErrorStats;
    pingPongStats: PingPongStats;
    pingPongDurationStats: PingPongDurationStats;
};
export declare type TransportStatistics = {
    [TransportType.BLUETOOTH]: BluetoothStats;
    [TransportType.UDP]: UdpStats;
    [TransportType.WEB_RTC]: WebRtcStats;
    [TransportType.WEB_SOCKET]: WebsocketConnectStatistics;
};
export interface WebsocketConnectStatistics {
    connectedButNotOnLine: number;
    connectRequests: number;
    failedReconnect: number;
    maxBufferedAmount: number;
    pingTimeouts: number;
    reconnectAttempts: number;
    reconnectRequests: number;
    reconnectUnacknowledged: number;
}
export declare type HealthStateSnapshot = {
    event: 'state';
    platform: string;
    version: string;
    start_time: number;
    states: HealthStateDatum[];
};
export declare type HealthHeartbeatSnapshot = {
    event: 'heartbeat';
    heartbeat_uuid: string;
    app_type: string;
    product: string;
    platform: string;
    version: string;
    webapp_version: string;
    start_time: number;
    states: HealthStateDatum[];
};
export declare type SendOptions = {
    skipAcknowledgment: boolean;
    uuid: string | null;
};
export declare type SentMessage = {
    acknowledgedTime: number | null;
    payload: any;
    reconnectCount: number;
    resendCount: number;
    responseTime: number | null;
    sentTime: number;
    skipAcknowledgment: boolean;
};
export interface Message {
    action: string;
    data: {
        [key: string]: unknown;
    };
    destination: string | null;
    webappVersion: string;
    source: string | null;
    uuid: string;
}
export declare type MessageAcknowledgment = {
    action: 'ack';
    data: Acknowledgment;
    destination: string | null;
    source: string | null;
    uuid: string;
};
export declare type MessageGeneral = {
    action: string;
    data: {
        [key: string]: unknown;
    };
    destination: string | null;
    source: string | null;
    uuid: string;
    webappVersion: string;
};
export declare type Callbacks = {
    onCloseCallback: (_event: any) => void;
    onErrorCallback: (_event: any) => void;
    onMessageCallback: (message: any, extra?: any) => void;
    onOpenCallback: (_event: any) => void;
};
export interface MessengerState {
    bluetoothMacAddress: string;
    transport: TransportType;
    udpPort: number;
}
export declare enum TransportType {
    BLUETOOTH = "Bluetooth",
    UDP = "UDP",
    WEB_SOCKET = "WebSocket",
    WEB_RTC = "WebRtc"
}
export interface TransportPairedQueueThresholds {
    reconnect: number;
    resend: number;
}
export declare type SentMessages = {
    [uuid: string]: SentMessage;
};
export declare type SentMessagesPerTransport = {
    [transportType in TransportType]: SentMessages;
};
export declare class PairedQueueFailedMessage extends CustomError {
}
