export interface RemoteConfigState {
    remoteConfig: RemoteConfig;
    experimentConfigs: ExperimentConfigs;
}
export interface RemoteConfig {
    [key: string]: boolean | string | object;
}
export interface ExperimentListRule {
    type: ExperimentAssignmentRule.LIST;
    softwareIds: string[];
}
export interface ExperimentRangeRule {
    type: ExperimentAssignmentRule.RANGE;
    min: number;
    max: number;
}
export interface ExperimentConfig {
    cells: {
        excluded: ExperimentListRule;
        [cellName: string]: ExperimentListRule | ExperimentRangeRule;
    };
    active: boolean;
    general_rollout_percent: number;
}
export declare type ExperimentConfigs = Partial<Record<Experiment, ExperimentConfig>>;
export declare enum Experiment {
    EARLY_CHECKIN = "feature_early_checkin",
    CONSUMER_MOBILE_REWARD_REDEMPTION = "feature_consumer_mobile_reward_redemption",
    EDGE_GATEWAY_LOYALTY = "feature_edge_gateway_loyalty",
    /**
     * mostly used to get coverage on cases where we explicitly are skipping over
     * previous experiments that no longer have an entry in the remote config
     */
    PLACEHOLDER = "placeholder",
    PLACEHOLDER_INACTIVE = "placeholder_inactive"
}
export declare enum ExperimentAssignmentRule {
    LIST = "list",
    RANGE = "range"
}
export declare type ExperimentAssignment = {
    cell: string | null;
    percentile: number;
    rule: ExperimentAssignmentRule | null;
};
export declare type ExperimentAssignments = Map<Experiment, ExperimentAssignment>;
