import { TransportType } from '../messenger';
import { FeatureFlags, TipType } from '../utils/enums';
export interface FeatureFlagState {
    allowManualRefund: boolean;
    pairedMessageQueueDisabled: boolean;
    keyedEntryDisabled: boolean;
    tips: TipSpec | null;
    messengerTransports: MessengerTransportsSpec;
    logRocket: LogRocketSpec | null;
    cashDiscounting: CashDiscountingSpec | null;
}
export interface LogRocketSpec {
    readonly newSessionPerTransaction: boolean;
}
export interface TipSpec {
    readonly default_to_custom: boolean;
    readonly tip_setting: 'dynamic' | 'fixed';
    readonly tip_type: TipType;
    readonly tips: number[];
}
export interface MessengerTransportsSpec {
    readonly ordered_transports: TransportType[];
}
/**
 * Also known as adjustments.
 *
 * We automatically apply a "cd adjustment" to all transactions that is equal to the the merchants processing fee
 * Applied post-tax & pre-tip (we assume the merchant has calculated tax before entering the total)
 * For cash transactions we also include a “cash discount” that is equal to the service fee applied to the transaction
 * If the merchant increases their item prices manually so that they already include the "cd adjustment", then we
 * allow that field to be set to 0 and we only apply the "cash discount" for cash transactions.
 *
 * cd_adjustment_rate
 * is an integer where cd_adjustment_rate / 100 = percentage fee
 * e.g. a value of 400 corresponds to 4.00% fee
 * We will apply (cd_adjustment_rate / 100) * transaction total as a fee to all transactions.
 * This value may be 0 if the merchant has already updated their sale prices to account for the fee
 *
 * cash_discount_rate
 * is an integer, where cash_discount_rate / 100 = percentage discount
 * This indicates the percentage discount for cash transactions.
 * We will apply -(cash_discount_rate) * transaction total as a discount to cash transactions
 *
 * We expect either cd_adjustment_rate === cash_discount_rate OR cd_adjustment_rate === 0
 */
export interface CashDiscountingSpec {
    cash_discount_rate: number;
    cd_adjustment_rate: number;
}
/**
 * @template T Feature Flag Spec definition
 */
export interface IApiFeatureSetting<T = {}> {
    readonly description: string;
    readonly name: FeatureFlags;
    readonly spec: T;
    readonly state: boolean;
}
