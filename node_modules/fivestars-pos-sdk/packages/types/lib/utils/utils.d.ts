declare type AllKeyOf<T> = T extends never ? never : keyof T;
/**
 * Make a single property in a type be optional
 */
export declare type Optional<T, K> = {
    [P in Extract<keyof T, K>]?: T[P];
};
/**
 * Make parts of a type be optional
 *
 * e.g.
 * ```
 * interface Thing {
 *  required: string;
 *  b: number;
 *  c: OtherThing
 * }
 *
 * type LooseThing = WithOptional<Thing, 'b' | 'c'>;
 *
 * interface Equivalent {
 *   required: string;
 *   b: number | undefined;
 *   c: OtherThing | undefined;
 * }
 * ```
 */
export declare type WithOptional<T, K extends AllKeyOf<T>> = T extends never ? never : Omit<T, K> & Optional<T, K>;
export declare type NullableProperties<T> = {
    [P in keyof T]: T[P] | null;
};
export {};
