import { PairedDevice } from '../pairing';
import { PropName } from '../utils/enums';
export interface PluginErrorMessage {
    error: string;
    stackTrace: string;
}
interface Plugin {
    initialize(): Promise<void>;
    getIsInitialized(): boolean;
}
export declare namespace BatteryModule {
    interface BatteryEvent {
        isPresent: boolean;
        batteryPercentage: number;
        isPluggedIn: boolean;
    }
    interface Battery extends Plugin {
        start(callback: (event: BatteryEvent) => void): void;
    }
}
export declare type BatteryEvent = BatteryModule.BatteryEvent;
export declare namespace BluetoothSerialModule {
    interface BluetoothSerial extends Plugin {
        getAddress(): Promise<string>;
        isEnabled(): Promise<boolean>;
        enable(): Promise<void>;
        listen(): Promise<void>;
        connect(macAddress: string): Promise<void>;
        disconnect(): Promise<void>;
        send(dataStr: string): Promise<void>;
        registerOnAdapterStatus(onUpdate: () => void): void;
        registerOnData(onData: (data: string) => void): void;
        registerOnConnect(onConnect: (macAddress: string) => void): void;
        registerOnClosed(onClosed: () => void): void;
    }
}
export declare namespace ThermalModule {
    interface SensorReadings {
        cpu: number;
    }
    interface Thermal extends Plugin {
        readSensors(): Promise<SensorReadings>;
    }
}
export declare namespace DeviceModule {
    interface DeviceInfo {
        uuid: string;
        version: string;
        platform: string;
        model: string;
        serial: string;
    }
    interface Device extends Plugin {
        getDeviceInfo(): DeviceInfo;
    }
}
export declare type DeviceInfo = DeviceModule.DeviceInfo;
export declare namespace DgramModule {
    interface MessageResult {
        message: string;
        address: string;
        port: number;
    }
    interface Dgram extends Plugin {
        open(port: number): Promise<void>;
        close(): Promise<void>;
        send(message: string, address: string, port: number): Promise<void>;
        listen(onMessage: (result: MessageResult) => void, onError: (error: string) => void): void;
    }
}
export declare type MessageResult = DgramModule.MessageResult;
export declare enum ORIENTATION {
    PORTRAIT = "portrait",
    LANDSCAPE = "landscape"
}
export declare namespace DisplayModule {
    interface Display extends Plugin {
        enterImmersive(): void;
        keepAwake(): void;
        setBrightness(brightnessPercent: number): Promise<void>;
        setRequestedOrientation(orientation: ORIENTATION): Promise<void>;
    }
}
export declare namespace FileModule {
    interface File extends Plugin {
        getFiles(directory: string): Promise<string[]>;
        removeFile(directory: string, fileName: string): Promise<void>;
        getFullPath(directory: string, fileName: string): Promise<string>;
        readFile(directory: string, fileName: string): Promise<string>;
        readFileCompressed(directory: string, fileName: string): Promise<string>;
        writeToFile(directory: string, fileName: string, data: string): Promise<void>;
        writeToChunkedFile(directory: string, fileName: string, extension: string, data: string): Promise<void>;
        writeBlobToFile(directory: string, fileName: string, data: Blob): Promise<void>;
    }
}
export declare namespace KardReaderModule {
    export interface InitializeResponse {
        rebootRequired: boolean;
    }
    export interface StartTransactionResponse {
        dip: boolean;
        nfc: boolean | null;
    }
    type StringOrNullCallback = (data: string | null) => void;
    interface CommonCardSwipeProperties {
        name: string;
        iin: string;
        last_four: string;
        ksn: string;
    }
    export interface MagtekCardSwipeResponse extends CommonCardSwipeProperties {
        payload_type: PayloadType.MAGTEK;
        exp_date: string;
        service_code: string;
        chip_enabled: boolean;
        device_sn: string;
        magneprint: string;
        magneprint_status: string;
        track1: string;
        track2: string;
    }
    export interface PaxCardSwipeResponse extends CommonCardSwipeProperties {
        payload_type: PayloadType.PAX;
        encrypted_track2: string;
    }
    export type CardSwipeResponse = MagtekCardSwipeResponse | PaxCardSwipeResponse;
    export interface EDynamoStatus {
        cardReaderDevice: 'EDYNAMO';
        deviceConnected: boolean;
        cardInserted: boolean | null;
        batteryLevel: number;
        usbPermission: boolean | null;
    }
    export interface MDynamoStatus {
        deviceConnected: boolean;
        cardInserted: boolean | null;
        batteryLevel: number;
        usbPermission: boolean | null;
        lastDisplayMessage: string | null;
    }
    export interface DynaWaveStatus {
        cardReaderDevice: 'DYNAWAVE';
        deviceConnected: boolean;
        batteryLevel: number;
        usbPermission: boolean | null;
    }
    export enum PayloadType {
        MAGTEK = "Magtek",
        PAX = "Pax"
    }
    interface CommonArqcProperties {
        name: string;
        iin: string;
        last_four: string;
        ksn: string;
    }
    export interface MagtekArqcResponse extends CommonArqcProperties {
        payload_type: PayloadType.MAGTEK;
        exp_date: string;
        service_code: string;
        chip_enabled: boolean;
        card_type: string;
        encryption_type: string;
        emv_sred: string;
        num_padding: string;
    }
    export interface PaxArqcResponse extends CommonArqcProperties {
        payload_type: PayloadType.PAX;
        encrypted_tlv: string;
        unencrypted_tlv: string;
    }
    export type ArqcResponse = MagtekArqcResponse | PaxArqcResponse;
    export interface CardReaderTransactionStatusEventMessage {
        cardReaderDevice: CardReaderDevice;
        transactionStatusEvent: string | null;
        transactionStatusProgress: string | null;
    }
    /**
     * Topics used to subscribe to card reader status updates from the edynamo plugin
     */
    export enum CardReaderStatusTopic {
        BATTERY_LEVEL = "BATTERY_LEVEL",
        CONNECTED = "CONNECTED",
        CARD_INSERTED = "CARD_INSERTED",
        USB_PERMISSION = "USB_PERMISSION"
    }
    export enum CardReaderTransactionStatusEvent {
        NO_EVENTS = "NO_EVENTS",
        CARD_INSERTED = "CARD_INSERTED",
        CARD_ERROR = "CARD_ERROR",
        TRANSACTION_PROGRESS_CHANGE = "TRANSACTION_PROGRESS_CHANGE",
        WAITING_FOR_USER_RESPONSE = "WAITING_FOR_USER_RESPONSE",
        TIMEOUT = "TIMEOUT",
        TRANSACTION_TERMINATED = "TRANSACTION_TERMINATED",
        HOST_CANCELLED_TRANSACTION = "HOST_CANCELLED_TRANSACTION",
        CARD_REMOVED = "CARD_REMOVED"
    }
    export enum CardReaderTransactionStatusProgress {
        NO_TRANSACTION_IN_PROGRESS = "NO_TRANSACTION_IN_PROGRESS",
        WAITING_FOR_USER_TO_INSERT_CARD = "WAITING_FOR_USER_TO_INSERT_CARD",
        POWERING_UP_CARD = "POWERING_UP_CARD",
        SELECTING_APPLICATION = "SELECTING_APPLICATION",
        WAITING_USER_LANGUAGE_SELECTION = "WAITING_USER_LANGUAGE_SELECTION",
        WAITING_USER_APP_SELECTION = "WAITING_USER_APP_SELECTION",
        INITIATING_APPLICATION = "INITIATING_APPLICATION",
        READING_APP_DATA = "READING_APP_DATA",
        OFFLINE_DATA_AUTHENTICATION = "OFFLINE_DATA_AUTHENTICATION",
        PROCESS_RESTRICTIONS = "PROCESS_RESTRICTIONS",
        CARDHOLDER_VERIFICATION = "CARDHOLDER_VERIFICATION",
        TERMINAL_RISK_MANAGEMENT = "TERMINAL_RISK_MANAGEMENT",
        TERMINAL_ACTION_ANALYSIS = "TERMINAL_ACTION_ANALYSIS",
        GENERATING_FIRST_APP_CRYPTOGRAM = "GENERATING_FIRST_APP_CRYPTOGRAM",
        CARD_ACTION_ANALYSIS = "CARD_ACTION_ANALYSIS",
        ONLINE_PROCESSING = "ONLINE_PROCESSING",
        WAITING_ONLINE_PROCESSING_RESPONSE = "WAITING_ONLINE_PROCESSING_RESPONSE",
        TRANSACTION_COMPLETION = "TRANSACTION_COMPLETION",
        TRANSACTION_ERROR = "TRANSACTION_ERROR",
        TRANSACTION_APPROVED = "TRANSACTION_APPROVED",
        TRANSACTION_DECLINED = "TRANSACTION_DECLINED",
        BUSY = "BUSY"
    }
    export enum CardReaderDevice {
        EDYNAMO = "EDYNAMO",
        DYNAWAVE = "DYNAWAVE",
        MDYNAMO = "MDYNAMO",
        INTELLIHEAD = "INTELLIHEAD"
    }
    export interface CardReaderConnectedUpdate {
        cardReaderDevice: CardReaderDevice;
        topic: CardReaderStatusTopic.CONNECTED;
        newState: boolean;
        oldState: boolean;
    }
    export interface CardReaderUsbPermissionUpdate {
        cardReaderDevice: CardReaderDevice;
        topic: CardReaderStatusTopic.USB_PERMISSION;
        newState: boolean | null;
        oldState: boolean | null;
    }
    export interface CardReaderBatteryUpdate {
        cardReaderDevice: CardReaderDevice;
        topic: CardReaderStatusTopic.BATTERY_LEVEL;
        newState: number;
        oldState: number;
    }
    export interface CardReaderCardInsertedUpdate {
        cardReaderDevice: CardReaderDevice;
        topic: CardReaderStatusTopic.CARD_INSERTED;
        newState: boolean | null;
        oldState: boolean | null;
    }
    export type CardReaderUpdate = CardReaderConnectedUpdate | CardReaderUsbPermissionUpdate | CardReaderBatteryUpdate | CardReaderCardInsertedUpdate;
    export interface CardReaderStatus {
        eDynamoStatus: EDynamoStatus | null;
        dynaWaveStatus: DynaWaveStatus | null;
        mDynamoStatus: MDynamoStatus | null;
    }
    export interface KardReader extends Plugin {
        initializeHardware(hardwareConfiguration: string): Promise<InitializeResponse>;
        getStatus(): Promise<CardReaderStatus>;
        registerStatusUpdatedCallback(callback: () => void): void;
        registerRequestRebootCallback(callback: () => void): void;
        registerPluginErrorCallback(callback: (error: PluginErrorMessage) => void): void;
        registerTransactionStatusCallback(callback: (transactionStatus: CardReaderTransactionStatusEventMessage) => void): void;
        registerReinitializedCallback(callback: () => void): void;
        registerSwipeCallback(success: (data: CardSwipeResponse) => void, failure: StringOrNullCallback): void;
        registerRequireDip(callback: () => void): void;
        registerDipFallbackToSwipe(callback: () => void): void;
        registerDipCardRemoved(success: () => void): void;
        registerDipTimeout(success: () => void): void;
        registerDipStartReadCallback(success: () => void, failure: StringOrNullCallback): void;
        registerDipReadCallback(success: (arqc: ArqcResponse) => void, failure: StringOrNullCallback): void;
        registerNfcStartReadCallback(success: () => void, failure: StringOrNullCallback): void;
        registerNfcReadCallback(success: (arqc: ArqcResponse) => void, failure: StringOrNullCallback): void;
        startTransaction(): Promise<StartTransactionResponse>;
        cancelTransaction(): Promise<void>;
        resetDevice(): Promise<void>;
    }
    export {};
}
export declare namespace MetadataModule {
    interface WebappMetadata {
        appVersion: string;
        hardwareId: string;
        release: string;
        softwareId: string;
        webappEnvironment: string;
        webappVersion: string;
    }
    interface Metadata extends Plugin {
        setWebappMetadata(config: WebappMetadata): Promise<void>;
        setSessionId(sessionId: string): Promise<void>;
    }
}
export declare namespace NavigateModule {
    interface Navigate extends Plugin {
        toWifiSettings(): void;
    }
}
export declare namespace SystemModule {
    interface System extends Plugin {
        enableCharging(): Promise<void>;
        installApk(filename: string): Promise<void>;
        registerOnShutdown(callback: () => void): void;
        restartApplication(delayBeforeStartupMs?: number): void;
        restartDevice(): void;
        shutdownDevice(): void;
    }
}
export declare namespace SystemStatsModule {
    interface SystemStatsInfo {
        batteryCurrent: number | null;
        batteryVoltage: number | null;
        netstat: Netstat | null;
        networkInfo: NetworkInfo | null;
        trafficStats: TrafficStats | null;
        uptimeAndroid: number | null;
        uptimeSystem: number | null;
    }
    interface Netstat {
        IpExt: Record<string, unknown>;
        TcpExt: Record<string, unknown>;
    }
    interface NetworkInfo {
        interfaceFlags: string[];
        macAddress: string;
        networkName: string;
        rxBytes: number;
        rxDropped: number;
        rxErrors: number;
        rxMcast: number;
        rxOverrun: number;
        rxPackets: number;
        txBytes: number;
        txCarrier: number;
        txCollsns: number;
        txDropped: number;
        txErrors: number;
        txPackets: number;
    }
    interface TrafficStats {
        appRxBytes: number;
        appTxBytes: number;
        deviceRxBytes: number;
        deviceTxBytes: number;
    }
    interface WifiInfo {
        frequency: number | null;
        ipAddress: string | null;
        linkSpeed: number | null;
        rssi: number | null;
        signalLevel: number | null;
        ssid: string | null;
    }
    interface SystemStats extends Plugin {
        getTrafficStats(): Promise<TrafficStats>;
        getRouterPings(count: number): Promise<{
            routerPings: number[];
        }>;
        getNetstat(): Promise<Netstat>;
        getWifiInfo(): Promise<WifiInfo>;
        getSystemStatsInfo(): Promise<SystemStatsInfo>;
    }
}
export declare type SystemStatsInfo = SystemStatsModule.SystemStatsInfo;
export declare type Netstat = SystemStatsModule.Netstat;
export declare type NetworkInfo = SystemStatsModule.NetworkInfo;
export declare type TrafficStats = SystemStatsModule.TrafficStats;
export declare type WifiInfo = SystemStatsModule.WifiInfo;
/**
 * Host types
 */
export interface HostAnalyticsEventData {
    name: string;
    columnProperties?: Record<string, unknown>;
    additionalProperties?: Record<string, unknown>;
}
export interface StartRefundPayload {
    value: number | null;
    transactionTotalUid?: string;
}
export interface AlertPayload {
    alertName: string;
    enabled: boolean;
}
export declare type HostPaymentType = 'cash' | 'credit';
export interface StartPaymentPayload {
    type: HostPaymentType;
    value: number | null;
    options: {
        showRewards: boolean;
        cashEnabled?: boolean;
    };
    transactionTotalUid?: string;
}
export interface WaitOnTransactionValuePayload {
    transactionType: 'payment' | 'refund';
    paymentType: HostPaymentType;
}
export interface ContinuePaymentPayload {
    value: number | null;
    transactionTotalUid?: string;
}
export interface SessionPayload {
    sessionId: string;
}
export interface DeviceInfoPayload {
    version: string;
    platform: string;
    model: string;
    uuid: string;
}
export interface HostPlatform {
    platform: string;
    deviceType: string;
    hardwareId?: string;
    deviceVersion?: string;
}
export declare namespace PayModule {
    interface TabPayDeviceInfo {
        version: string;
        platform: string;
        model: string;
        uuid: string;
    }
    type StartRefundOrContinuePayment = {
        paymentAmount: {
            amount: number;
        };
    };
    export interface Customer {
        name: string | null;
        phone: string;
        points: number;
    }
    export interface Pay extends Plugin {
        registerAlertCallback(success: (alertPaylod: AlertPayload) => void): void;
        registerAnalyticsEventNamesCallback(success: (names: string[]) => void): void;
        registerAnalyticsEventCallback(success: (event: HostAnalyticsEventData) => void): void;
        registerPaymentCallback(success: (paymentPayload: StartPaymentPayload) => void): void;
        registerRefundCallback(success: (refundPayload: StartRefundOrContinuePayment) => void): void;
        registerContinuePaymentCallback(success: (continuePayload: StartRefundOrContinuePayment) => void): void;
        registerEscapeKeyCallback(success: () => void): void;
        registerGetPairedDeviceCallback(success: () => void): void;
        registerResetCallback(success: () => void): void;
        registerSplitPaymentStartedCallback(success: () => void): void;
        registerHostCompletedTransactionCallback(success: () => void): void;
        registerMaximizedFromIconCallback(success: () => void): void;
        abortPayment(): void;
        editPayment(): void;
        applyReward(perkShortName: string, pointCost: number): void;
        completePayment(paymentType: string, tipAmount: number, cashTendered: number): void;
        completeRefund(): void;
        abortRefund(): void;
        abortTransaction(): void;
        restart(): void;
        activate(): void;
        deactivate(): void;
        device(): Promise<TabPayDeviceInfo>;
        loggedIn(loginInfo: any): void;
        getVersionNumber(): Promise<string>;
        updateSession(sessionId: string): void;
        openSettings(): void;
        setFeatures(features: {
            [key: string]: boolean;
        }): void;
        setPairedDevice(pairedDevice: PairedDevice | null): void;
        earlyCheckinEnd(): void;
        earlyCheckinRewardAborted(): void;
        earlyCheckinRewardSelected(perkShortName: string, pointCost: number): void;
        earlyCheckinSkipAndPay(): void;
        earlyCheckinStart(): void;
        setCustomer(customer: Customer | null): void;
    }
    export {};
}
export declare type AvailableNetworkAffinity = {
    hasEthernet: boolean;
    hasWifi: boolean;
};
export declare namespace NetworkAffinityModule {
    interface NetworkAffinity extends Plugin {
        bindEthernet(): Promise<void>;
        bindWifi(): Promise<void>;
        bringInterfaceDown(networkInteface: string): Promise<void>;
        bringInterfaceUp(networkInteface: string): Promise<void>;
        getAvailableNetworkAffinity(): Promise<AvailableNetworkAffinity>;
        getCurrentNetworkAffinity(): Promise<string>;
        resetEthernet(): Promise<void>;
        resetWifi(): Promise<void>;
        registerOnUsbDeviceAttached(onAttach: (deviceDetails: string) => void): void;
        registerOnUsbDeviceDetached(onDetach: (deviceDetails: string) => void): void;
    }
}
export declare namespace NetworkAlertsModule {
    interface RssiUpdate {
        rssi: number;
        signalLevel: number;
    }
    interface NetworkAlerts extends Plugin {
        getIsWifiEnabled(): Promise<boolean>;
        registerWifiEnabledCallbacks(onEnabled: () => void, onDisabled: () => void): void;
        registerRssiUpdateCallback(callback: (rssiUpdate: RssiUpdate) => void): void;
    }
}
export declare namespace LedControllerModule {
    type Animation = 'dip' | 'dip_error' | 'dip_end_screen' | 'swipe' | 'swipe_error' | 'end_screen';
    interface LedController extends Plugin {
        initializeHardware(): Promise<void>;
        playAnimation(animation: Animation): Promise<void>;
        clear(): Promise<void>;
    }
}
export declare namespace PropModule {
    interface Prop extends Plugin {
        get(propName: PropName): Promise<string>;
        getBoolean(propName: PropName): Promise<boolean>;
        set(propName: PropName, propValue: string): Promise<void>;
        setBoolean(propName: PropName, propValue: boolean): Promise<void>;
    }
}
export declare namespace ReceiptPrinterModule {
    export enum PaxPrinterErrorCode {
        OUT_OF_PAPER = "209904"
    }
    export interface Header {
        businessName: string;
        addressLine1: string;
        addressLine2: string | null;
        phoneNumber: string;
        city: string;
        state: string;
        postalCode: string;
        transactionDate: string;
        transactionTime: string;
    }
    export interface CardInfo {
        cardType: string | null;
        last4: string;
    }
    export interface PaymentAmountInfo {
        subTotal: string;
        tipAmount: string | null;
        cdAdjustmentAmount: string | null;
        cashDiscountAmount: string | null;
        total: string;
    }
    export interface RefundAmountInfo {
        total: string;
    }
    interface PrintCardPaymentArgs {
        header: Header;
        cardInfo: CardInfo;
        paymentAmountInfo: PaymentAmountInfo;
    }
    interface PrintCashPaymentArgs {
        header: Header;
        paymentAmountInfo: PaymentAmountInfo;
    }
    interface PrintRefundArgs {
        header: Header;
        cardInfo: CardInfo;
        refundAmountInfo: RefundAmountInfo;
    }
    export interface ReceiptPrinter extends Plugin {
        printCardPayment(args: PrintCardPaymentArgs): Promise<void>;
        printCashPayment(args: PrintCashPaymentArgs): Promise<void>;
        printRefund(args: PrintRefundArgs): Promise<void>;
    }
    export {};
}
export interface Plugins {
    com: {
        fivestars: {
            instore: {
                battery?: {
                    Battery: BatteryModule.Battery;
                };
                bluetoothserial?: {
                    BluetoothSerial: BluetoothSerialModule.BluetoothSerial;
                };
                device?: {
                    Device: DeviceModule.Device;
                };
                display?: {
                    Display: DisplayModule.Display;
                };
                dgram?: {
                    Dgram: DgramModule.Dgram;
                };
                file?: {
                    File: FileModule.File;
                };
                kardreader?: {
                    KardReader: KardReaderModule.KardReader;
                };
                ledcontroller?: {
                    LedController: LedControllerModule.LedController;
                };
                metadata?: {
                    Metadata: MetadataModule.Metadata;
                };
                navigate?: {
                    Navigate: NavigateModule.Navigate;
                };
                networkaffinity?: {
                    NetworkAffinity: NetworkAffinityModule.NetworkAffinity;
                };
                networkalerts?: {
                    NetworkAlerts: NetworkAlertsModule.NetworkAlerts;
                };
                pay?: {
                    Pay: PayModule.Pay;
                };
                prop?: {
                    Prop: PropModule.Prop;
                };
                system?: {
                    System: SystemModule.System;
                };
                systemstats?: {
                    SystemStats: SystemStatsModule.SystemStats;
                };
                thermal?: {
                    Thermal: ThermalModule.Thermal;
                };
                receiptprinter?: {
                    ReceiptPrinter: ReceiptPrinterModule.ReceiptPrinter;
                };
            };
        };
    };
}
export interface InstoreWindow extends Window {
    cef?: any;
    cef_appVersion?: any;
    cef_config?: any;
    cef_device?: any;
    cef_logger?: any;
    cef_pay?: any;
    cef_webapp?: any;
    cef_udpMessenger?: any;
    oncontextmenu: any;
    isIos?: boolean;
    Plugins?: Plugins;
    InitializePlugins?: {
        go: () => void;
    };
}
export {};
