"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebSocketReconnectReason = exports.WebSocketError = exports.ReadyState = void 0;
var ts_custom_error_1 = require("ts-custom-error");
var ReadyState;
(function (ReadyState) {
    ReadyState[ReadyState["CONNECTING"] = 0] = "CONNECTING";
    ReadyState[ReadyState["OPEN"] = 1] = "OPEN";
    ReadyState[ReadyState["CLOSING"] = 2] = "CLOSING";
    ReadyState[ReadyState["CLOSED"] = 3] = "CLOSED";
})(ReadyState = exports.ReadyState || (exports.ReadyState = {}));
// Note: This structure matches the AxiosError structure
//       so we can use it with the retryWithBackOff
var WebSocketError = /** @class */ (function (_super) {
    __extends(WebSocketError, _super);
    // this is necessary because there is a bug in jest
    // https://stackoverflow.com/questions/51216056/jest-unit-testing-if-super-is-called
    // https://github.com/gotwarlost/istanbul/issues/690
    /* istanbul ignore next */
    function WebSocketError(status, message) {
        var _this = _super.call(this, message) || this;
        _this.response = {
            status: 200
        };
        _this.response.status = status;
        return _this;
    }
    return WebSocketError;
}(ts_custom_error_1.CustomError));
exports.WebSocketError = WebSocketError;
var WebSocketReconnectReason;
(function (WebSocketReconnectReason) {
    WebSocketReconnectReason[WebSocketReconnectReason["UNACKED_MESSAGE"] = 0] = "UNACKED_MESSAGE";
})(WebSocketReconnectReason = exports.WebSocketReconnectReason || (exports.WebSocketReconnectReason = {}));
