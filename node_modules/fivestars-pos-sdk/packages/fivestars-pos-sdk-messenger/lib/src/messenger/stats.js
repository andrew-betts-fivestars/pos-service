"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDurationStats = exports.UNACKNOWLEDGED_MARKER = exports.LOG_PREFIX = void 0;
var mathjs_1 = require("mathjs");
exports.LOG_PREFIX = 'Messenger::stats';
exports.UNACKNOWLEDGED_MARKER = -1;
var getDurationStats = function (roundTripDurations) {
    var durationStats = {
        avgDuration: 0,
        count3000Plus: 0,
        countAcknowledged: 0,
        countUnacknowledged: 0,
        countUnder10: 0,
        countUnder100: 0,
        countUnder1000: 0,
        countUnder2000: 0,
        countUnder250: 0,
        countUnder3000: 0,
        countUnder50: 0,
        countUnder500: 0,
        maxDuration: 0,
        medianDuration: 0,
        minDuration: 0,
        totalCount1000Plus: 0,
        totalCount250Plus: 0,
        totalCountUnder250: 0,
        totalDuration: 0
    };
    var COMPLETE_DURATIONS = roundTripDurations
        .filter(function (duration) { return duration !== exports.UNACKNOWLEDGED_MARKER; })
        .sort(function (a, b) { return a - b; });
    if (COMPLETE_DURATIONS.length) {
        durationStats.minDuration = COMPLETE_DURATIONS[0];
        durationStats.maxDuration = COMPLETE_DURATIONS[COMPLETE_DURATIONS.length - 1];
        durationStats.totalDuration = Math.round(COMPLETE_DURATIONS.reduce(function (a, b) { return a + b; }, 0));
        durationStats.avgDuration = Math.round(durationStats.totalDuration / COMPLETE_DURATIONS.length);
        durationStats.medianDuration = Math.round(mathjs_1.median(COMPLETE_DURATIONS));
    }
    roundTripDurations.forEach(function (duration) {
        if (duration === exports.UNACKNOWLEDGED_MARKER) {
            durationStats.countUnacknowledged += 1;
        }
        else {
            durationStats.countAcknowledged += 1;
            if (duration < 10) {
                durationStats.countUnder10 += 1;
            }
            else if (duration < 50) {
                durationStats.countUnder50 += 1;
            }
            else if (duration < 100) {
                durationStats.countUnder100 += 1;
            }
            else if (duration < 250) {
                durationStats.countUnder250 += 1;
            }
            else if (duration < 500) {
                durationStats.countUnder500 += 1;
            }
            else if (duration < 1000) {
                durationStats.countUnder1000 += 1;
            }
            else if (duration < 2000) {
                durationStats.countUnder2000 += 1;
            }
            else if (duration < 3000) {
                durationStats.countUnder3000 += 1;
            }
            else {
                durationStats.count3000Plus += 1;
            }
            if (duration < 250) {
                durationStats.totalCountUnder250 += 1;
            }
            else {
                if (duration > 1000) {
                    durationStats.totalCount1000Plus += 1;
                }
                durationStats.totalCount250Plus += 1;
            }
        }
    });
    return durationStats;
};
exports.getDurationStats = getDurationStats;
/**
 * Saga: Used as the onSuccess action for IHS heartbeat
 *
 * Clear out the internal stats counters in the websocket client,
 * so we can start collecting stats for the next heartbeat
 */
// export const resetStats = function* (action: ActionType<typeof messengerActions.resetStats>) {
//     yield call(state.messenger.resetStats, action.payload.endTime);
// };
// AB todo: need to implement this above
