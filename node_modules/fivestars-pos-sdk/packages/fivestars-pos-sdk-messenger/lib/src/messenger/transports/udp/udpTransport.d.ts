import { EncryptedTransport } from '../encryptedTransport';
import { BroadcastDevice, Message, MessageGeneral, UdpStats, TransportType, UdpMessageExtra } from '@fivestars-pos-sdk/types';
export declare const LOG_PREFIX = "UdpTransport";
export declare class UdpTransport extends EncryptedTransport<UdpMessageExtra> {
    transportType: TransportType;
    protected reconnectThreshold: number;
    protected resendThreshold: number;
    isListening: boolean;
    pairedDeviceAvailable: boolean;
    lastReceivedPairedBroadcast: BroadcastDevice | null;
    private broadcastStats;
    private udpSocket;
    constructor();
    openSocket(port: number): Promise<void>;
    stop(): Promise<void>;
    isReady(): boolean;
    isReadyPaired(): boolean;
    protected onOpenCallback(): void;
    protected onErrorCallback(errorEvent: any): void;
    triggerReconnect(): void;
    handleTransportSpecificMessage(message: Message, extra: UdpMessageExtra): boolean;
    private onMessage;
    send(messageGeneral: MessageGeneral): Promise<void>;
    sendApiKeyBroadcast(): Promise<void>;
    private onApiKeyBroadcast;
    /**
     * Sends a connection test ping to the paired device's IP
     */
    sendPing(): Promise<void>;
    /**
     * Respond to a connection test ping
     */
    private sendPong;
    incrementBroadcastSent(): void;
    incrementBroadcastSentFailed(): void;
    getStats(endTime: number): UdpStats;
    resetStats(endTime: number): void;
    /**
     * Called by connection sagas when connection between paired devices is confirmed
     */
    setPairedDeviceAvailable(isAvailable: boolean): void;
    parse(message: string): Message | null;
    touch(): Promise<void>;
}
