import simplePeer from 'simple-peer';
import { ILoyaltyCredentials, TransportType, MessageGeneral, Message, WebRtcStats } from '@fivestars-pos-sdk/types';
import { Transport } from '../transport';
export declare const LOG_PREFIX = "WebRtcTransport";
export declare class WebRtcTransport extends Transport {
    transportType: TransportType;
    protected reconnectThreshold: number;
    protected resendThreshold: number;
    private peer;
    private isDataChannelReady;
    private stats;
    private static ERR_CODE_ICE_CONNECTION_FAILURE;
    private static ERROR_RECONNECT_THRESHOLD;
    constructor();
    start(loyaltyCredentials: ILoyaltyCredentials): Promise<void>;
    private createPeer;
    isReady(): boolean;
    /**
     * Used in connection saga to determine if we should be retrying the connection
     * Allowing a small number of errors before abandoning WebRTC as a transport because
     * there are some cases where normal, healthy, WebRTC using merchants hit onError then recover quickly
     */
    allowReconnect(): boolean;
    send(messageGeneral: MessageGeneral): Promise<void>;
    protected handleTransportSpecificMessage(message: Message): boolean;
    /**
     * Temporary: for gather web rtc usability data
     */
    sendPing(): Promise<void>;
    /**
      * Temporary: for gather web rtc usability data
      */
    sendPong(uuid: string): Promise<void>;
    /**
     * Set remote description. Call this when receiving an offer or answer
     *
     * For more details on what this means see [RTCPeerConnection docs](https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/setRemoteDescription)
     *
     * @param signalData
     */
    setRemoteDescription(signalData: simplePeer.SignalData): void;
    /**
     * Destroy current instance
     */
    stop(): void;
    /**
     * Callback for when this peer's signal data is ready.
     * Use this data to create offer/answer
     *
     * @param data
     */
    onSignal: (data: simplePeer.SignalData) => void;
    /**
     * Callback fired when data channel is ready to use
     * Technically, calling send with simple-peer before channel is ready, messages
     * are buffered. To make life easier, just don't send messages unless the channel is ready
     */
    onConnect: () => void;
    private onClose;
    private onError;
    triggerReconnect(): void;
    getStats(endTime: number): WebRtcStats;
    resetStats(endTime: number): void;
    touch(): Promise<void>;
}
