"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebRtcTransport = exports.LOG_PREFIX = void 0;
var simple_peer_1 = __importDefault(require("simple-peer"));
var wrtc = require('wrtc');
var types_1 = require("@fivestars-pos-sdk/types");
var transport_1 = require("../transport");
var utils_1 = require("../../utils");
var messengerActions = __importStar(require("../../actions"));
exports.LOG_PREFIX = 'WebRtcTransport';
var isInitiator = function () { return true; };
// AB todo: implement CONFIG like Instore then uncomment line below
//const isInitiator = (): boolean => CONFIG.PRODUCT !== Product.CPAY;
var WebRtcTransport = /** @class */ (function (_super) {
    __extends(WebRtcTransport, _super);
    function WebRtcTransport() {
        var _this = _super.call(this) || this;
        _this.transportType = types_1.TransportType.WEB_RTC;
        _this.reconnectThreshold = 6;
        _this.resendThreshold = 3;
        _this.peer = null;
        _this.isDataChannelReady = false;
        _this.stats = {
            onError: 0,
            onErrorIceConnectionFailure: 0
        };
        /**
         * Callback for when this peer's signal data is ready.
         * Use this data to create offer/answer
         *
         * @param data
         */
        _this.onSignal = function (data) {
            console.debug("WebRtcTransport::onSignal", data);
            _this.dispatchAction(messengerActions.webRtc.signalData(data));
        };
        /**
         * Callback fired when data channel is ready to use
         * Technically, calling send with simple-peer before channel is ready, messages
         * are buffered. To make life easier, just don't send messages unless the channel is ready
         */
        _this.onConnect = function () {
            console.debug("WebRtcTransport::onConnect");
            _this.isDataChannelReady = true;
            // AB todo: need to emit this
            _this.dispatchAction(messengerActions.webRtc.ready());
        };
        console.debug("WebRtcTransport::constructor");
        _this.peer = null;
        return _this;
    }
    WebRtcTransport.prototype.start = function (loyaltyCredentials) {
        console.log("WebRtcTransport::start");
        console.log("WebRtcTransport::start", loyaltyCredentials);
        // create instance in start instead of constructor
        // initiator will try to initiate immediately, so wait until the application
        // is ready to go before even trying
        this.peer = this.createPeer(isInitiator());
        return Promise.resolve();
    };
    WebRtcTransport.prototype.createPeer = function (initiator) {
        console.debug("WebRtcTransport::createPeer");
        var PEER = (typeof window === 'undefined')
            ? new simple_peer_1.default({ initiator: initiator, trickle: false, wrtc: wrtc })
            : new simple_peer_1.default({ initiator: initiator, trickle: false });
        PEER.on('signal', this.onSignal);
        PEER.on('connect', this.onConnect);
        PEER.on('data', this.onMessageCallback);
        PEER.on('close', this.onClose);
        PEER.on('error', this.onError);
        return PEER;
    };
    WebRtcTransport.prototype.isReady = function () {
        console.debug("WebRtcTransport::isReady");
        return this.isDataChannelReady;
    };
    /**
     * Used in connection saga to determine if we should be retrying the connection
     * Allowing a small number of errors before abandoning WebRTC as a transport because
     * there are some cases where normal, healthy, WebRTC using merchants hit onError then recover quickly
     */
    WebRtcTransport.prototype.allowReconnect = function () {
        console.debug("WebRtcTransport::allowReconnect");
        return this.stats.onError < WebRtcTransport.ERROR_RECONNECT_THRESHOLD;
    };
    WebRtcTransport.prototype.send = function (messageGeneral) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                console.debug("WebRtcTransport::send");
                if (!this.isDataChannelReady) {
                    throw new Error('WebRTC data channel not ready');
                }
                if (!this.peer) {
                    throw new Error('Peer object is null');
                }
                try {
                    this.peer.send(JSON.stringify(messageGeneral));
                }
                catch (error) {
                    console.info(exports.LOG_PREFIX + "::send::error", JSON.stringify(error));
                    throw error;
                }
                return [2 /*return*/];
            });
        });
    };
    WebRtcTransport.prototype.handleTransportSpecificMessage = function (message) {
        console.debug("WebRtcTransport::handleTransportSpecificMessage ", message);
        switch (message.action) {
            case types_1.WebRtcAction.PING:
                this.dispatchAction(messengerActions.webRtc.pingReceived(message.uuid));
                this.pingPongStats.pingReceived += 1;
                return true;
            case types_1.WebRtcAction.PONG:
                this.trackPongReceived(message);
                this.dispatchAction(messengerActions.webRtc.pongReceived());
                return true;
            default:
                return false;
        }
    };
    /**
     * Temporary: for gather web rtc usability data
     */
    WebRtcTransport.prototype.sendPing = function () {
        return __awaiter(this, void 0, void 0, function () {
            var MESSAGE, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        console.debug("WebRtcTransport::sendPing");
                        MESSAGE = utils_1.constructMessageGeneral({
                            action: types_1.WebRtcAction.PING
                        });
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.send(MESSAGE)];
                    case 2:
                        _b.sent();
                        this.trackPingSent(MESSAGE);
                        this.dispatchAction(messengerActions.webRtc.pingSent());
                        return [3 /*break*/, 4];
                    case 3:
                        _a = _b.sent();
                        this.pingPongStats.pingSentFailed += 1;
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
      * Temporary: for gather web rtc usability data
      */
    WebRtcTransport.prototype.sendPong = function (uuid) {
        return __awaiter(this, void 0, void 0, function () {
            var MESSAGE, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        console.debug("WebRtcTransport::sendPong");
                        MESSAGE = utils_1.constructMessageGeneral({
                            action: types_1.WebRtcAction.PONG,
                            uuid: uuid
                        });
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.send(MESSAGE)];
                    case 2:
                        _b.sent();
                        this.pingPongStats.pongSent += 1;
                        return [3 /*break*/, 4];
                    case 3:
                        _a = _b.sent();
                        this.pingPongStats.pongSentFailed += 1;
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Set remote description. Call this when receiving an offer or answer
     *
     * For more details on what this means see [RTCPeerConnection docs](https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/setRemoteDescription)
     *
     * @param signalData
     */
    WebRtcTransport.prototype.setRemoteDescription = function (signalData) {
        console.debug("WebRtcTransport::setRemoteDescription");
        if (this.peer) {
            this.peer.signal(signalData);
        }
    };
    /**
     * Destroy current instance
     */
    WebRtcTransport.prototype.stop = function () {
        console.debug("WebRtcTransport::stop");
        if (this.peer) {
            this.peer.destroy();
        }
        this.isDataChannelReady = false;
        this.peer = null;
        this.dispatchAction(messengerActions.webRtc.stopped());
    };
    WebRtcTransport.prototype.onClose = function (error) {
        console.debug("WebRtcTransport::onClose", error);
        console.info(exports.LOG_PREFIX + "::onClose", JSON.stringify(error));
        this.stop();
    };
    WebRtcTransport.prototype.onError = function (error) {
        console.debug("WebRtcTransport::onError", error);
        console.info(exports.LOG_PREFIX + "::onError", JSON.stringify(error));
        this.stats.onError += 1;
        // @ts-ignore
        // code does not exist on Error type, this code property was found by looking through logs
        if (error.code === WebRtcTransport.ERR_CODE_ICE_CONNECTION_FAILURE) {
            this.stats.onErrorIceConnectionFailure += 1;
        }
    };
    WebRtcTransport.prototype.triggerReconnect = function () {
        console.debug("WebRtcTransport::triggerReconnect");
        this.dispatchAction(messengerActions.webRtc.reconnectRequest());
    };
    /* Stats */
    WebRtcTransport.prototype.getStats = function (endTime) {
        console.debug("WebRtcTransport::getStats");
        return {
            errorStats: __assign({}, this.stats),
            pingPongDurationStats: __assign({}, this.getPingPongDurationStats(endTime)),
            pingPongStats: __assign({}, this.pingPongStats)
        };
    };
    WebRtcTransport.prototype.resetStats = function (endTime) {
        console.debug("WebRtcTransport::resetStats");
        _super.prototype.resetStats.call(this, endTime);
        this.stats = {
            onError: 0,
            onErrorIceConnectionFailure: 0
        };
    };
    WebRtcTransport.prototype.touch = function () {
        console.debug("WebRtcTransport::touch");
        return this.sendPing();
    };
    WebRtcTransport.ERR_CODE_ICE_CONNECTION_FAILURE = 'ERR_ICE_CONNECTION_FAILURE';
    WebRtcTransport.ERROR_RECONNECT_THRESHOLD = 5;
    return WebRtcTransport;
}(transport_1.Transport));
exports.WebRtcTransport = WebRtcTransport;
