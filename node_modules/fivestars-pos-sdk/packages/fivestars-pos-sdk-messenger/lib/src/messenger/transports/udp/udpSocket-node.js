"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UdpSocket = exports.LOG_PREFIX = void 0;
var dgram = require('dgram');
exports.LOG_PREFIX = 'UdpSocket (node)';
var UdpSocket = /** @class */ (function () {
    function UdpSocket() {
    }
    UdpSocket.prototype.open = function (port) {
        var _this = this;
        console.info(exports.LOG_PREFIX + "::open", port);
        //        if (CONFIG.PRODUCT === Product.WINPAY) {
        return new Promise(function (resolve, reject) {
            // creating a udp server
            _this.server = dgram.createSocket("udp4");
            _this.server.bind(port);
        });
        //        }
        return Promise.resolve();
    };
    UdpSocket.prototype.listen = function (onMessage, onError) {
        var _this = this;
        console.info(exports.LOG_PREFIX + "::listen");
        //        if (CONFIG.PRODUCT === Product.WINPAY) {
        this.server.on('error', function (error) {
            console.info(exports.LOG_PREFIX + "::on error");
            onError(JSON.stringify(error));
            _this.server.close();
        });
        this.server.on('message', function (msg, info) {
            // console.info(`${LOG_PREFIX}::on message`)
            // console.log('Data received from client : ' + msg.toString())
            // console.log('Received %d bytes from %s:%d\n',msg.length, info.address, info.port)
            // onMessage(msg)
        });
        //        }            
    };
    UdpSocket.prototype.send = function (message, address, port) {
        var _this = this;
        console.info(exports.LOG_PREFIX + "::send " + message + " " + address + " " + port);
        //        if (CONFIG.PRODUCT === Product.WINPAY) {
        return new Promise(function (resolve, reject) {
            /*
                msg <Buffer> | <TypedArray> | <DataView> | <string> | <Array> Message to be sent.
                offset <integer> Offset in the buffer where the message starts.
                length <integer> Number of bytes in the message.
                port <integer> Destination port.
                address <string> Destination host name or IP address.
                callback <Function> Called when the message has been sent.
            **/
            _this.server.send(message, 0, message.length, port, address, function (error) {
                if (error) {
                    console.info(exports.LOG_PREFIX + "::send error", error);
                    _this.server.close();
                }
                else {
                    console.info(exports.LOG_PREFIX + "::send Data sent !!!");
                }
            });
        });
        //        }
    };
    UdpSocket.prototype.close = function () {
        var _this = this;
        console.info(exports.LOG_PREFIX + "::close");
        //        if (CONFIG.PRODUCT === Product.WINPAY) {
        return new Promise(function (resolve, reject) {
            _this.server.close();
        });
        //        }
    };
    UdpSocket.DEFAULT_PORT = 49152;
    UdpSocket.IS_BROADCAST = true;
    UdpSocket.BROADCAST_IP = '255.255.255.255';
    return UdpSocket;
}());
exports.UdpSocket = UdpSocket;
