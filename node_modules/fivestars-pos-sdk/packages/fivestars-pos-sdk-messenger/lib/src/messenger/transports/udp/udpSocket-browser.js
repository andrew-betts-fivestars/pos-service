"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UdpSocket = exports.LOG_PREFIX = void 0;
var config_1 = require("@fivestars-pos-sdk/config");
var instore_plugins_1 = require("../../../instore-plugins");
var types_1 = require("@fivestars-pos-sdk/types");
exports.LOG_PREFIX = 'UdpSocket (browser)';
var UdpSocket = /** @class */ (function () {
    function UdpSocket(plugin) {
        if (plugin === void 0) { plugin = instore_plugins_1.instorePlugins.dgram; }
        this.plugin = plugin;
    }
    UdpSocket.prototype.open = function (port) {
        if (config_1.CONFIG.PRODUCT === types_1.Product.WINPAY) {
            return new Promise(function (resolve, reject) {
                UdpSocket.instoreWindow.cef_udpMessenger.open(port, UdpSocket.IS_BROADCAST, resolve, reject);
            });
        }
        return this.plugin.open(port);
    };
    UdpSocket.prototype.listen = function (onMessage, onError) {
        if (config_1.CONFIG.PRODUCT === types_1.Product.WINPAY) {
            UdpSocket.instoreWindow.cef_udpMessenger.listen(onMessage, onError);
        }
        else {
            this.plugin.listen(onMessage, onError);
        }
    };
    UdpSocket.prototype.send = function (message, address, port) {
        if (config_1.CONFIG.PRODUCT === types_1.Product.WINPAY) {
            return new Promise(function (resolve, reject) {
                UdpSocket.instoreWindow.cef_udpMessenger.send(message, address, port, resolve, reject);
            });
        }
        return this.plugin.send(message, address, port);
    };
    UdpSocket.prototype.close = function () {
        if (config_1.CONFIG.PRODUCT === types_1.Product.WINPAY) {
            return new Promise(function (resolve, reject) {
                // Currently doesn't take callbacks as parameters
                UdpSocket.instoreWindow.cef_udpMessenger.stopListening(resolve, reject);
            });
        }
        return this.plugin.close();
    };
    UdpSocket.DEFAULT_PORT = 49152;
    UdpSocket.IS_BROADCAST = true;
    UdpSocket.BROADCAST_IP = '255.255.255.255';
    UdpSocket.instoreWindow = window;
    return UdpSocket;
}());
exports.UdpSocket = UdpSocket;
