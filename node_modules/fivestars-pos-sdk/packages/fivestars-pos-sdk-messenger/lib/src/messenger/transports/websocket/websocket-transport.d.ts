import { ILoyaltyCredentials, ReconnectOptions, TransportType, Message, MessageGeneral, WebsocketConnectStatistics } from '@fivestars-pos-sdk/types';
import { Transport } from '../transport';
export declare const LOG_PREFIX = "WebSocketTransport";
export declare class WebSocketTransport extends Transport {
    transportType: TransportType;
    protected reconnectThreshold: number;
    protected resendThreshold: number;
    private webSocket;
    private webSocketConfiguration;
    private isAuthenticated;
    private tryReconnect;
    private pingTimeoutId;
    private reconnectTimeoutId;
    private connectedButNotOnLine;
    private connectRequests;
    private failedReconnect;
    private maxBufferedAmount;
    private pingTimeouts;
    private reconnectAttempts;
    private reconnectRequests;
    private reconnectUnacknowledged;
    private attemptingReconnect;
    constructor();
    private getWebSocketConfiguration;
    start(loyaltyCredentials: ILoyaltyCredentials): Promise<void>;
    send(message: MessageGeneral): Promise<void>;
    isReady(): boolean;
    stop(options: ReconnectOptions): void;
    terminate(): void;
    incrementUnackedReconnect(): void;
    incrementConnectedButNotOnLine(): void;
    setMaxBufferedAmount(): void;
    getStats(_endTime: number): WebsocketConnectStatistics;
    /**
     * Reset counters
     */
    resetStats(endTime: number): void;
    private isConnecting;
    isConnected(): boolean;
    private isClosing;
    isClosed(): boolean;
    private connect;
    private getUrl;
    private setupWebSocket;
    protected onOpenCallback: (event: any) => void;
    protected onCloseCallback: (event: Record<string, string | number>) => void;
    protected onErrorCallback: (event: any) => void;
    private onMessage;
    protected filterMessage(message: Message): boolean;
    protected handleTransportSpecificMessage(message: Message): boolean;
    private messageAuthenticationRequest;
    private messageAuthenticationResponse;
    private messageSubscriberAuthenticated;
    private messageFailure;
    private messagePong;
    private setupPing;
    touch(): Promise<void>;
    private ping;
    triggerReconnect(): void;
    /**
     * Tracks the number of times we call reconnect
     */
    private reconnect;
    /**
     * Performs the actual reconnect logic, with a decaying backoff
     *
     * Once maximum delay is reached, emits FAILED_TO_RECONNECT websocket error event.
     * Should not be called directly except through reconnect function
     */
    private attemptReconnect;
    isAttemptingReconnect(): boolean;
}
