"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UdpTransport = exports.LOG_PREFIX = void 0;
var encryptedTransport_1 = require("../encryptedTransport");
var types_1 = require("@fivestars-pos-sdk/types");
var udpSocket_node_1 = require("./udpSocket-node");
var utils_1 = require("../../utils");
//import * as messengerActions from '@instore/redux/messenger/actions';
//import { log } from '@instore/utils/log';
var skewAdjustedTime_1 = require("../../utils/skewAdjustedTime");
var messengerActions = __importStar(require("../../actions"));
exports.LOG_PREFIX = 'UdpTransport';
var UdpTransport = /** @class */ (function (_super) {
    __extends(UdpTransport, _super);
    function UdpTransport() {
        var _this = 
        // the ignore is because jest has trouble
        // with super and complains about an
        // uncovered branch
        // https://github.com/gotwarlost/istanbul/issues/690
        _super.call(this) /* istanbul ignore next */ || this;
        _this.transportType = types_1.TransportType.UDP;
        _this.reconnectThreshold = 6;
        _this.resendThreshold = 1;
        _this.isListening = false;
        _this.pairedDeviceAvailable = false;
        _this.lastReceivedPairedBroadcast = null;
        _this.broadcastStats = {
            pairedReceived: 0,
            sent: 0,
            sentFailed: 0,
            thisDeviceReceived: 0,
            totalReceived: 0
        };
        console.debug("UdpTransport::constructor");
        _this.udpSocket = new udpSocket_node_1.UdpSocket();
        return _this;
    }
    UdpTransport.prototype.openSocket = function (port) {
        return __awaiter(this, void 0, void 0, function () {
            var error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.debug("UdpTransport::openSocket");
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.udpSocket.open(port)];
                    case 2:
                        _a.sent();
                        this.onOpenCallback();
                        this.dispatchAction(messengerActions.udp.updateUdpPort(port));
                        return [3 /*break*/, 4];
                    case 3:
                        error_1 = _a.sent();
                        console.info(exports.LOG_PREFIX + "::openSocket", error_1);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    UdpTransport.prototype.stop = function () {
        return __awaiter(this, void 0, void 0, function () {
            var error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.debug("UdpTransport::stop");
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        this.isOpen = false;
                        this.isListening = false;
                        this.pairedDeviceAvailable = false;
                        return [4 /*yield*/, this.udpSocket.close()];
                    case 2:
                        _a.sent();
                        this.dispatchAction(messengerActions.udp.stopped());
                        return [3 /*break*/, 4];
                    case 3:
                        error_2 = _a.sent();
                        console.info(exports.LOG_PREFIX + "::stop", error_2);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    UdpTransport.prototype.isReady = function () {
        console.debug("UdpTransport::isReady");
        return this.isOpen && this.isListening;
    };
    UdpTransport.prototype.isReadyPaired = function () {
        console.debug("UdpTransport::isReadyPaired");
        return this.isReady() && this.pairedDeviceAvailable;
    };
    UdpTransport.prototype.onOpenCallback = function () {
        console.debug("UdpTransport::onOpenCallback");
        this.udpSocket.listen(this.onMessage, this.onErrorCallback);
        this.isOpen = true;
    };
    UdpTransport.prototype.onErrorCallback = function (errorEvent) {
        console.info(exports.LOG_PREFIX + "::onErrorCallback", errorEvent);
        this.triggerReconnect();
    };
    UdpTransport.prototype.triggerReconnect = function () {
        console.debug("UdpTransport::triggerReconnect");
        this.dispatchAction(messengerActions.udp.reconnectRequest());
    };
    UdpTransport.prototype.handleTransportSpecificMessage = function (message, extra) {
        console.debug("UdpTransport::handleTransportSpecificMessage", message);
        switch (message.action) {
            case types_1.UdpAction.PING:
                this.sendPong(message.uuid);
                this.pingPongStats.pingReceived += 1;
                return true;
            case types_1.UdpAction.PONG:
                this.trackPongReceived(message);
                this.dispatchAction(messengerActions.udp.pongReceived());
                return true;
            case types_1.UdpAction.BROADCAST_API_KEY:
                this.onApiKeyBroadcast(message.data['apiKey'], extra);
                return true;
            default:
                return false;
        }
    };
    UdpTransport.prototype.onMessage = function (updEvent) {
        console.debug("UdpTransport::onMessage", updEvent);
        var MESSAGE = updEvent.message;
        // comes from the Udp plugin, not a real message from a paired device
        if (MESSAGE === types_1.LISTENER_STARTED) {
            console.info(exports.LOG_PREFIX + "::onMessage", "The UDP Listener has successfully started.");
            this.isListening = true;
            return;
        }
        this.onMessageCallback(MESSAGE, {
            socketAddress: {
                address: updEvent.address,
                port: updEvent.port
            }
        });
    };
    UdpTransport.prototype.send = function (messageGeneral) {
        var _a, _b;
        console.debug("UdpTransport::send", messageGeneral);
        if (!this.udpSocket) {
            return Promise.reject(new Error('The UDP socket is not set.'));
        }
        if (!this.lastReceivedPairedBroadcast) {
            return Promise.reject(new Error('The paired device has not yet been discovered.'));
        }
        return this.udpSocket.send(this.encrypt(messageGeneral), this.lastReceivedPairedBroadcast.socketAddress.address, (_b = (_a = this.pairedDevice) === null || _a === void 0 ? void 0 : _a.udpPort) !== null && _b !== void 0 ? _b : udpSocket_node_1.UdpSocket.DEFAULT_PORT);
    };
    UdpTransport.prototype.sendApiKeyBroadcast = function () {
        var _this = this;
        console.debug("UdpTransport::sendApiKeyBroadcast");
        if (!this.udpSocket) {
            console.info(exports.LOG_PREFIX, 'The UDP socket is not set');
            return Promise.reject(new Error('The UDP socket is not set'));
        }
        var API_KEY_MESSAGE = utils_1.constructMessageGeneral({
            action: types_1.UdpAction.BROADCAST_API_KEY,
            data: { apiKey: this.loyaltyCredentials.apiKey }
        });
        return this.udpSocket
            .send(this.loyaltyCredentials.apiKey, udpSocket_node_1.UdpSocket.BROADCAST_IP, udpSocket_node_1.UdpSocket.DEFAULT_PORT)
            .then(function () {
            return _this.udpSocket.send(JSON.stringify(API_KEY_MESSAGE), udpSocket_node_1.UdpSocket.BROADCAST_IP, udpSocket_node_1.UdpSocket.DEFAULT_PORT);
        })
            .then(function () {
            var _a;
            if (((_a = _this.pairedDevice) === null || _a === void 0 ? void 0 : _a.udpPort) && _this.pairedDevice.udpPort !== udpSocket_node_1.UdpSocket.DEFAULT_PORT) {
                return _this.udpSocket.send(JSON.stringify(API_KEY_MESSAGE), udpSocket_node_1.UdpSocket.BROADCAST_IP, _this.pairedDevice.udpPort);
            }
            return Promise.resolve();
        });
    };
    UdpTransport.prototype.onApiKeyBroadcast = function (apiKey, udpData) {
        console.debug("UdpTransport::onApiKeyBroadcast");
        this.broadcastStats.totalReceived += 1;
        var BROADCAST_DEVICE = {
            apiKey: apiKey,
            receivedTimeInMs: skewAdjustedTime_1.SkewAdjustedTime.now(),
            socketAddress: udpData.socketAddress
        };
        // the broadcasted apiKey was our own
        if (BROADCAST_DEVICE.apiKey === this.loyaltyCredentials.apiKey) {
            this.broadcastStats.thisDeviceReceived += 1;
        }
        // the broadcasted apiKey was for our paired device
        if (this.pairedDevice && BROADCAST_DEVICE.apiKey === this.pairedDevice.apiKey) {
            this.broadcastStats.pairedReceived += 1;
            this.lastReceivedPairedBroadcast = BROADCAST_DEVICE;
            this.dispatchAction(messengerActions.udp.receivedPairedDeviceBroadcast());
        }
    };
    /**
     * Sends a connection test ping to the paired device's IP
     */
    UdpTransport.prototype.sendPing = function () {
        return __awaiter(this, void 0, void 0, function () {
            var MESSAGE, error_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.debug("UdpTransport::sendPing");
                        MESSAGE = utils_1.constructMessageGeneral({
                            action: types_1.UdpAction.PING
                        });
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.send(MESSAGE)];
                    case 2:
                        _a.sent();
                        this.trackPingSent(MESSAGE);
                        return [3 /*break*/, 4];
                    case 3:
                        error_3 = _a.sent();
                        console.info(exports.LOG_PREFIX + "::sendPing", error_3);
                        this.pingPongStats.pingSentFailed += 1;
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Respond to a connection test ping
     */
    UdpTransport.prototype.sendPong = function (uuid) {
        return __awaiter(this, void 0, void 0, function () {
            var MESSAGE, error_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.debug("UdpTransport::sendPong");
                        MESSAGE = utils_1.constructMessageGeneral({
                            action: types_1.UdpAction.PONG,
                            uuid: uuid
                        });
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.send(MESSAGE)];
                    case 2:
                        _a.sent();
                        this.pingPongStats.pongSent += 1;
                        return [3 /*break*/, 4];
                    case 3:
                        error_4 = _a.sent();
                        console.info(exports.LOG_PREFIX + "::sendPong", error_4);
                        this.pingPongStats.pongSentFailed += 1;
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    UdpTransport.prototype.incrementBroadcastSent = function () {
        console.debug("UdpTransport::incrementBroadcastSent");
        this.broadcastStats.sent += 1;
    };
    UdpTransport.prototype.incrementBroadcastSentFailed = function () {
        console.debug("UdpTransport::incrementBroadcastSentFailed");
        this.broadcastStats.sentFailed += 1;
    };
    UdpTransport.prototype.getStats = function (endTime) {
        console.debug("UdpTransport::getStats");
        return {
            broadcastStats: __assign({}, this.broadcastStats),
            pingPongDurationStats: __assign({}, this.getPingPongDurationStats(endTime)),
            pingPongStats: __assign({}, this.pingPongStats)
        };
    };
    UdpTransport.prototype.resetStats = function (endTime) {
        console.debug("UdpTransport::resetStats");
        _super.prototype.resetStats.call(this, endTime);
        this.broadcastStats = {
            pairedReceived: 0,
            sent: 0,
            sentFailed: 0,
            thisDeviceReceived: 0,
            totalReceived: 0
        };
    };
    /**
     * Called by connection sagas when connection between paired devices is confirmed
     */
    UdpTransport.prototype.setPairedDeviceAvailable = function (isAvailable) {
        console.debug("UdpTransport::setPairedDeviceAvailable ", isAvailable);
        this.pairedDeviceAvailable = isAvailable;
    };
    UdpTransport.prototype.parse = function (message) {
        console.debug("UdpTransport::parse ", message);
        try {
            var MESSAGE = JSON.parse(message);
            return MESSAGE['action'] === types_1.UdpAction.BROADCAST_API_KEY ? MESSAGE : null;
        }
        catch (_a) {
            console.log("UdpTransport::parse exception");
        }
        return _super.prototype.parse.call(this, message);
    };
    UdpTransport.prototype.touch = function () {
        console.debug("UdpTransport::touch ");
        this.dispatchAction(messengerActions.udp.sendPing());
        return Promise.resolve();
    };
    return UdpTransport;
}(encryptedTransport_1.EncryptedTransport));
exports.UdpTransport = UdpTransport;
