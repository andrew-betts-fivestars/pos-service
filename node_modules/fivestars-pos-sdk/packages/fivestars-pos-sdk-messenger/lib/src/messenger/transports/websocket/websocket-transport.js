"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebSocketTransport = exports.LOG_PREFIX = void 0;
var isomorphic_ws_1 = __importDefault(require("isomorphic-ws"));
var config_1 = require("@fivestars-pos-sdk/config");
var types_1 = require("@fivestars-pos-sdk/types");
var transport_1 = require("../transport");
var enums_1 = require("../../utils/enums");
var messengerActions = __importStar(require("../../actions"));
// AB todo: add log from Instore, replace console.log, console..
exports.LOG_PREFIX = 'WebSocketTransport';
var PING_TIMEOUT_IN_MS = 300 * 1000;
var PONG_TIMEOUT_IN_MS = 10000;
var WebSocketTransport = /** @class */ (function (_super) {
    __extends(WebSocketTransport, _super);
    function WebSocketTransport() {
        var _this = _super.call(this) || this;
        _this.transportType = types_1.TransportType.WEB_SOCKET;
        _this.reconnectThreshold = 30;
        _this.resendThreshold = 10; // allow resend multiple times before triggering a reconnect
        _this.webSocket = null;
        _this.isAuthenticated = false;
        _this.tryReconnect = true;
        _this.pingTimeoutId = null;
        _this.reconnectTimeoutId = null;
        _this.connectedButNotOnLine = 0;
        _this.connectRequests = 0;
        _this.failedReconnect = 0;
        _this.maxBufferedAmount = 0;
        _this.pingTimeouts = 0;
        _this.reconnectAttempts = 0;
        _this.reconnectRequests = 0;
        _this.reconnectUnacknowledged = 0;
        _this.attemptingReconnect = false;
        _this.onOpenCallback = function (event) {
            console.log("WebSocketTransport::onOpenCallback");
            _this.dispatchAction(messengerActions.webSocket.connectEvent());
        };
        _this.onCloseCallback = function (event) {
            console.log("WebSocketTransport::onCloseCallback");
            var CODE = event && event.code ? event.code : 'unknown';
            if (_this.webSocket) {
                _this.isAuthenticated = false;
                _this.dispatchAction(messengerActions.webSocket.closeEvent("Code: " + CODE));
                if (_this.tryReconnect) {
                    console.info(exports.LOG_PREFIX + "::onCloseCallback", "Triggering reconnect. Code: " + CODE);
                    _this.reconnect(_this.webSocketConfiguration.retryDelay);
                }
                else {
                    console.info(exports.LOG_PREFIX + "::onCloseCallback", "Not trying reconnect. Code: " + CODE);
                }
            }
            else {
                console.warn(exports.LOG_PREFIX + "::onCloseCallback", "Web socket not set.  Likely after terminiate.  Code: " + CODE);
            }
        };
        _this.onErrorCallback = function (event) {
            console.log("WebSocketTransport::onErrorCallback");
            _this.dispatchAction(messengerActions.webSocket.errorEvent(event));
        };
        _this.onMessage = function (event) {
            console.log("WebSocketTransport::onMessage");
            if (!event || !event.data) {
                console.warn(exports.LOG_PREFIX + "::onMessage", 'Received an invalid message event.');
                console.info(exports.LOG_PREFIX + "::onMessage", event);
                return;
            }
            _this.onMessageCallback(event.data);
        };
        console.log("WebSocketTransport::constructor");
        _this.webSocketConfiguration = _this.getWebSocketConfiguration();
        return _this;
    }
    WebSocketTransport.prototype.getWebSocketConfiguration = function () {
        console.log("WebSocketTransport::getWebSocketConfiguration");
        var _a = config_1.CONFIG.WEB_SOCKET.get(), HOST = _a.HOST, MAX_RETRY_DELAY = _a.MAX_RETRY_DELAY, PATH_END = _a.PATH_END, PATH_START = _a.PATH_START, PORT = _a.PORT, RETRY_DELAY = _a.RETRY_DELAY, SCHEME = _a.SCHEME;
        if (!(HOST && MAX_RETRY_DELAY && PATH_END && PATH_START && PORT && RETRY_DELAY && SCHEME)) {
            console.warn(exports.LOG_PREFIX + "::getWebSocketConfiguration", "The configuration for the web socket is not fully populated. " + config_1.CONFIG.WEB_SOCKET);
        }
        console.debug(exports.LOG_PREFIX + "::getWebSocketConfiguration", "Configuration for the web socket: " + config_1.CONFIG.WEB_SOCKET);
        console.log("CONFIG.WEB_SOCKET: " + JSON.stringify({
            host: HOST,
            maxRetryDelay: Number(MAX_RETRY_DELAY),
            pathEnd: PATH_END,
            pathStart: PATH_START,
            port: Number(PORT),
            retryDelay: Number(RETRY_DELAY),
            scheme: SCHEME
        }));
        return {
            host: HOST,
            maxRetryDelay: Number(MAX_RETRY_DELAY),
            pathEnd: PATH_END,
            pathStart: PATH_START,
            port: Number(PORT),
            retryDelay: Number(RETRY_DELAY),
            scheme: SCHEME
        };
    };
    WebSocketTransport.prototype.start = function (loyaltyCredentials) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.log("WebSocketTransport::start this.loyaltyCredentials=" + this.loyaltyCredentials + ", param loyaltyCredentials=" + loyaltyCredentials);
                        if (this.loyaltyCredentials.apiKey && loyaltyCredentials.apiKey !== this.loyaltyCredentials.apiKey) {
                            console.log(exports.LOG_PREFIX + "::start", 'Calling stop because loyalty credentials changed.');
                            this.stop({ tryReconnect: false });
                        }
                        // calling super not at the top because super will set this.loyaltyCredentials
                        // and we want to be able to compare old and new
                        return [4 /*yield*/, _super.prototype.start.call(this, loyaltyCredentials)];
                    case 1:
                        // calling super not at the top because super will set this.loyaltyCredentials
                        // and we want to be able to compare old and new
                        _a.sent();
                        if (this.isConnected() && this.isAuthenticated) {
                            console.log(exports.LOG_PREFIX + "::start", 'Already connected and authenticated');
                        }
                        else {
                            console.log(exports.LOG_PREFIX + "::start", 'Calling connect.');
                            this.connect({ tryReconnect: true });
                        }
                        return [2 /*return*/, Promise.resolve()];
                }
            });
        });
    };
    /*
     * Send data object via WebSocketTrace connection
     * @param {MessageGeneral} [message] - The content to be sent
     * @returns {Promise<undefined | string | Error>} indicating success or failure to send
     */
    WebSocketTransport.prototype.send = function (message) {
        var _this = this;
        console.log("WebSocketTransport::send");
        if (!this.isAuthenticated) {
            return Promise.reject(new Error('Attempted to send message while not authenticated.'));
        }
        if (!this.isConnected()) {
            if (!this.isConnecting() && !this.reconnectTimeoutId) {
                console.info(exports.LOG_PREFIX + "::send", "Calling reconnect.");
                this.reconnect(this.webSocketConfiguration.retryDelay);
            }
            return Promise.reject(new Error('Attempted to send message while not connected.'));
        }
        return new Promise(function (resolve, reject) {
            try {
                if (_this.webSocket) {
                    _this.webSocket.send(JSON.stringify(message));
                    _this.setMaxBufferedAmount();
                    resolve();
                }
                else {
                    reject(new Error('Web socket object not set at time of send.'));
                }
            }
            catch (error) {
                reject(error);
            }
        });
    };
    WebSocketTransport.prototype.isReady = function () {
        console.log("WebSocketTransport::isReady");
        return this.isAuthenticated && this.isConnected();
    };
    WebSocketTransport.prototype.stop = function (options) {
        console.log("WebSocketTransport::stop");
        console.info(exports.LOG_PREFIX + "::stop", "Called with " + JSON.stringify(options) + ".");
        this.tryReconnect = options.tryReconnect;
        this.isAuthenticated = false;
        if (this.pingTimeoutId) {
            clearTimeout(this.pingTimeoutId);
            this.pingTimeoutId = null;
        }
        if (this.reconnectTimeoutId) {
            clearTimeout(this.reconnectTimeoutId);
            this.reconnectTimeoutId = null;
        }
        if (this.webSocket && !this.isClosing() && !this.isClosed()) {
            try {
                console.info(exports.LOG_PREFIX + "::stop", 'Calling close on web socket.');
                this.webSocket.close();
            }
            catch (error) {
                console.warn(exports.LOG_PREFIX + "::stop", error);
            }
        }
        else {
            console.info(exports.LOG_PREFIX + "::stop", "Skipping close because webSocket: " + (this.webSocket ? true : false) + ", isClosing: " + this.isClosing() + " and isClosed: " + this.isClosed());
        }
    };
    WebSocketTransport.prototype.terminate = function () {
        console.log("WebSocketTransport::terminate");
        if (this.webSocket && this.isClosing()) {
            console.info(exports.LOG_PREFIX + "::terminate", 'Setting the web socket to null instead of waiting for close.');
            // this.webSocket.onopen = null;
            // this.webSocket.onclose = null;
            // this.webSocket.onmessage = null;
            // this.webSocket.onerror = null;
            this.webSocket = null;
        }
        else {
            console.info(exports.LOG_PREFIX + "::terminate", "No action taken because webSocket: " + (this.webSocket ? true : false) + " and isClosing: " + this.isClosing());
        }
    };
    WebSocketTransport.prototype.incrementUnackedReconnect = function () {
        console.log("WebSocketTransport::incrementUnackedReconnect");
        this.reconnectUnacknowledged += 1;
    };
    WebSocketTransport.prototype.incrementConnectedButNotOnLine = function () {
        console.log("WebSocketTransport::incrementConnectedButNotOnLine");
        this.connectedButNotOnLine += 1;
    };
    WebSocketTransport.prototype.setMaxBufferedAmount = function () {
        console.log("WebSocketTransport::setMaxBufferedAmount");
        if (this.webSocket && this.webSocket.bufferedAmount) {
            var BUFFERED_AMOUNT = this.webSocket.bufferedAmount;
            if (this.maxBufferedAmount < BUFFERED_AMOUNT) {
                this.maxBufferedAmount = BUFFERED_AMOUNT;
            }
        }
    };
    WebSocketTransport.prototype.getStats = function (_endTime) {
        console.log("WebSocketTransport::getStats ", _endTime);
        return {
            connectRequests: this.connectRequests,
            connectedButNotOnLine: this.connectedButNotOnLine,
            failedReconnect: this.failedReconnect,
            maxBufferedAmount: this.maxBufferedAmount,
            pingTimeouts: this.pingTimeouts,
            reconnectAttempts: this.reconnectAttempts,
            reconnectRequests: this.reconnectRequests,
            reconnectUnacknowledged: this.reconnectUnacknowledged
        };
    };
    /**
     * Reset counters
     */
    WebSocketTransport.prototype.resetStats = function (endTime) {
        console.log("WebSocketTransport::resetStats ", endTime);
        _super.prototype.resetStats.call(this, endTime);
        // reset all counters
        this.connectedButNotOnLine = 0;
        this.connectRequests = 0;
        this.failedReconnect = 0;
        this.maxBufferedAmount = 0;
        this.pingTimeouts = 0;
        this.reconnectAttempts = 0;
        this.reconnectRequests = 0;
        this.reconnectUnacknowledged = 0;
    };
    WebSocketTransport.prototype.isConnecting = function () {
        console.log("WebSocketTransport::isConnecting");
        return Boolean(this.webSocket && this.webSocket.readyState === types_1.ReadyState.CONNECTING);
    };
    WebSocketTransport.prototype.isConnected = function () {
        console.log("WebSocketTransport::isConnected");
        return Boolean(this.webSocket && this.webSocket.readyState === types_1.ReadyState.OPEN);
    };
    WebSocketTransport.prototype.isClosing = function () {
        console.log("WebSocketTransport::isClosing");
        return Boolean(this.webSocket && this.webSocket.readyState === types_1.ReadyState.CLOSING);
    };
    WebSocketTransport.prototype.isClosed = function () {
        console.log("WebSocketTransport::isClosed ");
        return Boolean(!this.webSocket || (this.webSocket && this.webSocket.readyState === types_1.ReadyState.CLOSED));
    };
    WebSocketTransport.prototype.connect = function (options) {
        console.log("WebSocketTransport::connect");
        this.tryReconnect = options.tryReconnect;
        // if we are connecting or connected then we are good
        // if we are closing then we may be in the reconnect loop
        // and we are waiting for the close to complete
        if (this.isConnecting() || this.isConnected() || this.isClosing()) {
            console.info(exports.LOG_PREFIX + "::connect", "Exiting because isConnecting: " + this.isConnecting() + ", isConnected: " + this.isConnected() + ", isClosing: " + this.isClosing() + ".");
            return;
        }
        this.setupWebSocket();
        this.connectRequests += 1;
    };
    WebSocketTransport.prototype.getUrl = function () {
        console.log("WebSocketTransport::getUrl");
        var scheme = this.webSocketConfiguration.scheme;
        var host = this.webSocketConfiguration.host;
        var port = this.webSocketConfiguration.port;
        var pathStart = this.webSocketConfiguration.pathStart;
        var apiKey = this.loyaltyCredentials.apiKey;
        var pathEnd = this.webSocketConfiguration.pathEnd;
        // prettier-ignore
        // return `${scheme}://${host}:${port}${pathStart}${apiKey}${pathEnd}`;
        return "ws://ws.nerfstars.com:80/connect/apikey/47ee3d19c49a433895ac6cbf8f34778e/mpay";
    };
    WebSocketTransport.prototype.setupWebSocket = function () {
        console.log("WebSocketTransport::setupWebSocket");
        this.webSocket = new isomorphic_ws_1.default(this.getUrl());
        this.webSocket.onopen = this.onOpenCallback;
        this.webSocket.onclose = this.onCloseCallback;
        this.webSocket.onmessage = this.onMessage;
        this.webSocket.onerror = this.onErrorCallback;
    };
    WebSocketTransport.prototype.filterMessage = function (message) {
        console.log("WebSocketTransport::filterMessage");
        if (message.action === enums_1.WebSocketCommonAction.DEVICE_COUNTS) {
            // These messages are noisy and useless.
            return true;
        }
        if (message.action === enums_1.WebSocketCommonAction.SUBSCRIBER_DISCONNECTED) {
            // This may be useful in the future to alert when paired device is down.
            return true;
        }
        return false;
    };
    WebSocketTransport.prototype.handleTransportSpecificMessage = function (message) {
        console.log("WebSocketTransport::handleTransportSpecificMessage ", message);
        this.setMaxBufferedAmount();
        if (message.action === enums_1.WebSocketCommonAction.AUTHENTICATION_REQUEST) {
            this.messageAuthenticationRequest();
            return true;
        }
        if (message.action === enums_1.WebSocketCommonAction.AUTHENTICATION_RESPONSE) {
            this.messageAuthenticationResponse(message);
            return true;
        }
        if (message.action === enums_1.WebSocketCommonAction.SUBSCRIBER_AUTHENTICATED) {
            this.messageSubscriberAuthenticated();
            return true;
        }
        if (message.action === enums_1.WebSocketCommonAction.FAILURE) {
            this.messageFailure(message);
            return true;
        }
        if (message.action === enums_1.WebSocketCommonAction.PONG) {
            this.messagePong();
            return true;
        }
        return false;
    };
    WebSocketTransport.prototype.messageAuthenticationRequest = function () {
        console.log("WebSocketTransport::messageAuthenticationRequest");
        if (!this.webSocket || !this.isConnected()) {
            console.warn(exports.LOG_PREFIX + "::messageAuthenticationRequest", 'Attempting to send credentials but web socket is not connected.');
            return;
        }
        try {
            console.info(exports.LOG_PREFIX + "::messageAuthenticationRequest", 'Sending credentials.');
            this.webSocket.send(JSON.stringify({
                auth: {
                    apisecret: this.loyaltyCredentials.apiSecret,
                    business_name: this.loyaltyCredentials.softwareId
                }
            }));
        }
        catch (error) {
            console.warn(exports.LOG_PREFIX + "::messageAuthenticationRequest", error);
        }
    };
    WebSocketTransport.prototype.messageAuthenticationResponse = function (message) {
        console.log("WebSocketTransport::messageAuthenticationResponse ", message);
        // AB todo: need to implement this timer from Instore
        //            timeout: call(delay, WAIT_ON_AUTHENTICATION_MS)
        if (message.data.success) {
            console.info(exports.LOG_PREFIX + "::messageAuthenticationResponse", 'Success');
            this.isAuthenticated = true;
            this.dispatchAction(messengerActions.webSocket.authenticationSuccessful());
            console.info(exports.LOG_PREFIX + "::messageAuthenticationResponse", 'Authentication succeeded for the web socket.');
            this.ping();
        }
        else {
            console.info(exports.LOG_PREFIX + "::messageAuthenticationResponse", 'Failure');
            this.isAuthenticated = false;
            this.dispatchAction(messengerActions.webSocket.authenticationFailure());
            this.stop({ tryReconnect: false });
            var MESSAGE = 'Failed to authenticate the web socket.';
            throw new types_1.WebSocketError(401, MESSAGE);
        }
    };
    WebSocketTransport.prototype.messageSubscriberAuthenticated = function () {
        console.log("WebSocketTransport::messageSubscriberAuthenticated");
        this.dispatchAction(messengerActions.webSocket.subscriberAuthenticated());
    };
    WebSocketTransport.prototype.messageFailure = function (message) {
        console.log("WebSocketTransport::messageFailure");
        console.warn(exports.LOG_PREFIX + "::messageFailure", message);
        this.stop({ tryReconnect: true });
    };
    WebSocketTransport.prototype.messagePong = function () {
        console.log("WebSocketTransport::messagePong");
        this.setupPing(PING_TIMEOUT_IN_MS);
        this.dispatchAction(messengerActions.webSocket.pongReceived());
    };
    WebSocketTransport.prototype.setupPing = function (timeoutInMs) {
        var _this = this;
        if (timeoutInMs === void 0) { timeoutInMs = 0; }
        console.log("WebSocketTransport::setupPing");
        if (this.pingTimeoutId) {
            clearTimeout(this.pingTimeoutId);
            this.pingTimeoutId = null;
        }
        /*
         * If we are calling this after we are in the reconnect
         * loop, then don't send a ping again.
         * The idea being ping/pong will get setup again
         * by the reconnect.
         * Important: we do not want two timeouts running
         * at the same time as trying to track the behavior
         * is nearly impossible!
         */
        if (!this.reconnectTimeoutId) {
            this.pingTimeoutId = global.setTimeout(function () {
                _this.ping();
            }, timeoutInMs);
        }
    };
    WebSocketTransport.prototype.touch = function () {
        console.log("WebSocketTransport::touch");
        this.setupPing();
        return Promise.resolve();
    };
    WebSocketTransport.prototype.ping = function () {
        var _this = this;
        console.log("WebSocketTransport::ping");
        this.tryReconnect = true;
        if (this.webSocket && this.isConnected()) {
            try {
                this.webSocket.send(JSON.stringify({ action: enums_1.WebSocketCommonAction.PING }));
            }
            catch (error) {
                console.warn(exports.LOG_PREFIX + "::ping", error);
            }
        }
        this.pingTimeoutId = global.setTimeout(function () {
            _this.dispatchAction(messengerActions.webSocket.pongTimeout());
            _this.pingTimeouts += 1;
            if (!_this.isAttemptingReconnect()) {
                if (!_this.isConnected()) {
                    console.info(exports.LOG_PREFIX + "::ping", "Timed out, not already attempting reconnect and not connected so calling reconnect.");
                    _this.reconnect(_this.webSocketConfiguration.retryDelay);
                }
                else {
                    console.info(exports.LOG_PREFIX + "::ping", "Timed out so calling ping again (isAttemptingReconnect: " + _this.isAttemptingReconnect() + " isConnected: " + _this.isConnected() + ").");
                    _this.ping();
                }
            }
            else {
                console.info(exports.LOG_PREFIX + "::ping", 'Timed out, exiting the ping timeout loop because already attempting to reconnect.');
            }
        }, PONG_TIMEOUT_IN_MS);
    };
    WebSocketTransport.prototype.triggerReconnect = function () {
        console.log("WebSocketTransport::triggerReconnect");
        this.dispatchAction(messengerActions.webSocket.reconnectRequest(types_1.WebSocketReconnectReason.UNACKED_MESSAGE));
    };
    /**
     * Tracks the number of times we call reconnect
     */
    WebSocketTransport.prototype.reconnect = function (retryDelayInSeconds) {
        console.log("WebSocketTransport::reconnect ", retryDelayInSeconds);
        console.info(exports.LOG_PREFIX + "::reconnect", "Calling attemptReconnect (" + this.reconnectRequests + " since heartbeat).");
        this.reconnectRequests += 1;
        this.attemptingReconnect = true;
        this.attemptReconnect(retryDelayInSeconds);
    };
    /**
     * Performs the actual reconnect logic, with a decaying backoff
     *
     * Once maximum delay is reached, emits FAILED_TO_RECONNECT websocket error event.
     * Should not be called directly except through reconnect function
     */
    WebSocketTransport.prototype.attemptReconnect = function (retryDelayInSeconds) {
        var _this = this;
        console.log("WebSocketTransport::attemptReconnect ", retryDelayInSeconds);
        this.setMaxBufferedAmount();
        // Clear any pending timeouts before proceeding.
        if (this.reconnectTimeoutId) {
            clearTimeout(this.reconnectTimeoutId);
            this.reconnectTimeoutId = null;
        }
        // Once we are authenticated we have completed the connection process.
        // The first step is to connect to the web socket server, then we get
        // a "ws.ack" message which triggers us to send the credentials, and
        // finally we receive a "ws.authAck" which confirms we are authenticated.
        if (this.isAuthenticated) {
            console.info(exports.LOG_PREFIX + "::attemptReconnect", 'Authenticated so exiting the reconnect loop.');
            this.attemptingReconnect = false;
            return;
        }
        var WAIT_ON_CLOSE_IN_MS = 1000;
        // If we are not in a closed state that means we are either closing, connecting, or connected.
        // We want to keep checking until we are authenticated or if we are closed then we try to
        // reconnect again.
        if (!this.isClosed()) {
            this.reconnectTimeoutId = global.setTimeout(function () {
                _this.attemptReconnect(retryDelayInSeconds);
            }, WAIT_ON_CLOSE_IN_MS);
        }
        else if (retryDelayInSeconds <= this.webSocketConfiguration.maxRetryDelay) {
            console.info(exports.LOG_PREFIX + "::attemptReconnect", "Setting a timer to attempt a reconnect again in " + retryDelayInSeconds * 2 + " seconds.");
            this.reconnectTimeoutId = global.setTimeout(function () {
                _this.attemptReconnect(retryDelayInSeconds * 2);
            }, retryDelayInSeconds * 1000);
            // We call connect with tryReconnect set to false because we will
            // call reconnect again as part of the reconnect timeout loop.
            console.info(exports.LOG_PREFIX + "::attemptReconnect", "Calling connect (" + this.reconnectAttempts + " since heartbeat).");
            this.reconnectAttempts += 1;
            this.connect({ tryReconnect: false });
        }
        else {
            console.info(exports.LOG_PREFIX + "::attemptReconnect", "Failed to reconnect (" + this.failedReconnect + " since heartbeat).");
            this.attemptingReconnect = false;
            this.failedReconnect += 1;
            this.dispatchAction(messengerActions.webSocket.failedToReconnect());
        }
    };
    WebSocketTransport.prototype.isAttemptingReconnect = function () {
        console.log("WebSocketTransport::isAttemptingReconnect ");
        return this.attemptingReconnect;
    };
    return WebSocketTransport;
}(transport_1.Transport));
exports.WebSocketTransport = WebSocketTransport;
