"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Formatter = void 0;
var skewAdjustedTime_1 = require("./skewAdjustedTime");
exports.Formatter = {
    MILLISECONDS_TO_SECONDS_DIVISOR: 1000.0,
    formatDate: function (date) {
        return skewAdjustedTime_1.SkewAdjustedTime.moment()
            .to(date * 1000, true)
            .replace(/(\d+) days?$/, '$1 days left')
            .replace('a day', '1 day left')
            .replace(/(\d+) months?$/, '$1 months left')
            .replace('a month', '1 month left')
            .replace(/(\d+) years?$/, '$1 years left')
            .replace('a year', '1 year left')
            .replace(/\d+ minutes?$/, 'Expires today')
            .replace(/\d+ hours?$/, 'Expires today')
            .replace(/\d+\s seconds?$/, 'Expires today')
            .replace('a minute', 'Expires today')
            .replace('an hour', 'Expires today')
            .replace('a few seconds', 'Expires today')
            .replace('Invalid date', '');
    },
    /*
     * @param {number} amount - The amount of money in cents.
     * @returns {string} The amount of money formatted for display (eg $12.00)
     */
    formatMoneyString: function (amount) {
        if (amount < 0) {
            return '';
        }
        return "$" + (amount / 100).toFixed(2);
    },
    formatMstoSecs: function (milliseconds) {
        return milliseconds / exports.Formatter.MILLISECONDS_TO_SECONDS_DIVISOR;
    },
    /*
     * @param {string} number - The phone number without formatting
     * @returns {string} The phone number formatted for display (eg (123) 456-7890)
     */
    formatPhone: function (phone) {
        if (!phone) {
            return '';
        }
        return "(" + phone.slice(0, 3) + ") " + phone.slice(3, 6) + "-" + phone.slice(6, 10);
    },
    /*
     * @param {number} amount - The amount of points, (ex: 10300 points)
     * @param {string} amountDescriber - The description of points, (eg 'points' or 'pts')
     * @returns {string} The amount of points formatted with a comma (ex: 10,300 points)
     */
    formatPlural: function (quantity, name) {
        //        return `${quantity.toLocaleString()} ${pluralize(name, quantity)}`;
        // AB todo: fix above line, getting type error during build
        return "" + quantity.toLocaleString();
    },
    formatToFixedPrecision: function (value, decimalPlaces) {
        if (!value) {
            return value;
        }
        return parseFloat(value.toFixed(decimalPlaces));
    }
};
