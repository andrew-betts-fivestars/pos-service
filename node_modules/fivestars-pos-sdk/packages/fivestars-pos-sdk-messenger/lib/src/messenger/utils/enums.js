"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InternetStatus = exports.PropName = exports.AnalyticsEventDatabaseOperation = exports.ShutdownSource = exports.ShutdownReason = exports.ClientFeatures = exports.FeatureFlags = exports.Environment = exports.AnalyticsTrackerStatus = exports.WebSocketCommonAction = exports.WebSocketErrorEvent = exports.PayTxnStatus = exports.KeypadMaxLength = exports.DeviceType = exports.Product = exports.SupportContact = exports.SortOrder = exports.CardInputType = exports.CardReaderEventHardwareDevice = exports.CardReaderEventPropertyValue = exports.AnalyitcsTrackerErrorMessage = exports.AnalyticsTrackerUiElement = exports.AnalyticsTrackerButtonName = exports.AnalyticsTrackerEventName = exports.AnalyticsTrackerEventProperty = exports.AnalyticsEventCategory = exports.CardReadEventType = exports.PayStatus = exports.Status = exports.TipType = exports.CheckinType = exports.PaymentTypes = void 0;
var PaymentTypes;
(function (PaymentTypes) {
    PaymentTypes["CASH"] = "cash";
    PaymentTypes["CARD"] = "card";
    PaymentTypes["KEYED_ENTRY_PRESENT"] = "keyedEntryPresent";
    PaymentTypes["KEYED_ENTRY_NOT_PRESENT"] = "keyedEntryNotPresent";
    PaymentTypes["UNKNOWN"] = "unknown";
})(PaymentTypes = exports.PaymentTypes || (exports.PaymentTypes = {}));
var CheckinType;
(function (CheckinType) {
    CheckinType["PHONE"] = "phone";
    CheckinType["SWIPE"] = "swipe";
    CheckinType["DIP"] = "dip";
    CheckinType["NFC"] = "nfc";
})(CheckinType = exports.CheckinType || (exports.CheckinType = {}));
var TipType;
(function (TipType) {
    TipType["CUSTOM"] = "custom";
    TipType["DOLLAR"] = "dollar";
    TipType["PERCENTAGE"] = "percentage";
})(TipType = exports.TipType || (exports.TipType = {}));
// TODO: Let's change this to PaymentProcessingStatus or something a little less broad.
var Status;
(function (Status) {
    Status["PENDING"] = "PENDING";
    Status["SUCCEEDED"] = "SUCCEEDED";
    Status["FAILED"] = "FAILED";
    Status["NONE"] = "NONE";
})(Status = exports.Status || (exports.Status = {}));
/*
 * These are the messages sent between cPay and mPay that indicate the state of the transaction
 */
var PayStatus;
(function (PayStatus) {
    PayStatus["APPROVE_TOTAL"] = "approveTotal";
    PayStatus["AUTHORIZING_CARD"] = "authorizingCard";
    PayStatus["AUTHORIZING_REFUND"] = "authorizingRefund";
    PayStatus["CARDSWIPE"] = "cardSwipe";
    PayStatus["CARD_ACCEPTED"] = "cardAccepted";
    PayStatus["CARD_DECLINED"] = "cardDeclined";
    PayStatus["CARD_ERROR"] = "cardError";
    PayStatus["CHECKIN"] = "checkin";
    PayStatus["COMPLETE_ORDER"] = "completeOrder";
    PayStatus["CONFIRMATION"] = "confirmation";
    PayStatus["EARLY_CHECKIN"] = "earlyCheckin";
    PayStatus["EARLY_CHECKIN_ERROR"] = "earlyCheckinError";
    PayStatus["FETCHING_CUSTOMER"] = "fetchingCustomer";
    PayStatus["NO_REFUNDABLE_TRANSACTION"] = "noRefundableTransaction";
    PayStatus["PAY_CASH"] = "payCash";
    PayStatus["POINTS"] = "points";
    PayStatus["REFUND_CONFIRMATION"] = "refundConfirmation";
    PayStatus["REFUND_RESWIPE"] = "refundReswipe";
    PayStatus["REFUND_TRANSACTION_SELECTION"] = "refundTransactionSelection";
    PayStatus["REWARDS"] = "rewards";
    PayStatus["REWARDS_CONFIRMATION"] = "rewardsConfirmation";
    PayStatus["REWARDS_LIST"] = " rewardsList";
    PayStatus["SPLIT_PAYMENT_WAIT"] = "splitPaymentWait";
    PayStatus["CARD_READER_INTERSTITIAL"] = "cardReaderInterstitial";
    PayStatus["TIP"] = "tip";
    PayStatus["WAITING"] = "waiting";
})(PayStatus = exports.PayStatus || (exports.PayStatus = {}));
var CardReadEventType;
(function (CardReadEventType) {
    CardReadEventType["DIP_BEGIN"] = "dipBegin";
    CardReadEventType["DIP_ERROR"] = "dipError";
    CardReadEventType["DIP_FINISH"] = "dipFinish";
    CardReadEventType["SWIPE_FINISH"] = "swipeFinish";
    CardReadEventType["SWIPE_ERROR"] = "swipeError";
})(CardReadEventType = exports.CardReadEventType || (exports.CardReadEventType = {}));
var AnalyticsEventCategory;
(function (AnalyticsEventCategory) {
    AnalyticsEventCategory["TRANSACTION"] = "transaction";
    AnalyticsEventCategory["NON_TRANSACTION"] = "non-transaction";
})(AnalyticsEventCategory = exports.AnalyticsEventCategory || (exports.AnalyticsEventCategory = {}));
/*
 * Pubudu wants us to leave open the ability to
 * capture more details from transitions.
 * In the angular app this is communicated through
 * start_action and end_action.
 */
var AnalyticsTrackerEventProperty;
(function (AnalyticsTrackerEventProperty) {
    /*
     * The 'account uid' is intentionally dropping the underscore
     * for historical reasons.  If we send up 'account_uid' it
     * creates a new column 'account_uid_1' in treasure data.
     */
    AnalyticsTrackerEventProperty["ACCOUNT_UID"] = "account uid";
    AnalyticsTrackerEventProperty["APP_TYPE"] = "APP_TYPE";
    AnalyticsTrackerEventProperty["BUSINESS_UID"] = "business uid";
    AnalyticsTrackerEventProperty["CONSUMER_PHONE_NUMBER"] = "Consumer phone number";
    AnalyticsTrackerEventProperty["DEVICE_SERIAL_NUMBER"] = "device serial number";
    AnalyticsTrackerEventProperty["DEVICE_MODEL"] = "device model";
    AnalyticsTrackerEventProperty["DURATION"] = "duration";
    AnalyticsTrackerEventProperty["END_STATE"] = "end state";
    AnalyticsTrackerEventProperty["ERROR_MESSAGE"] = "error_message";
    AnalyticsTrackerEventProperty["EVENT_NAME"] = "event";
    AnalyticsTrackerEventProperty["EXPERIMENT_CELL"] = "experiment cell";
    AnalyticsTrackerEventProperty["EXPERIMENT_NAME"] = "experiment name";
    AnalyticsTrackerEventProperty["LOG_ROCKET_URL"] = "log_rocket_url";
    AnalyticsTrackerEventProperty["PAY_MANUAL_TXN_FLAG"] = "pay_manual_txn_flag";
    AnalyticsTrackerEventProperty["PAY_TXN_TYPE"] = "pay_txn_type";
    AnalyticsTrackerEventProperty["SCREEN"] = "screen";
    AnalyticsTrackerEventProperty["SESSION_SEQUENCE_ID"] = "session_sequence_id";
    AnalyticsTrackerEventProperty["SESSION_ID"] = "session_id";
    AnalyticsTrackerEventProperty["SOFTWARE_ID"] = "software id";
    AnalyticsTrackerEventProperty["START_STATE"] = "start state";
    AnalyticsTrackerEventProperty["START_TIME"] = "start_time";
    AnalyticsTrackerEventProperty["STATUS"] = "status";
    AnalyticsTrackerEventProperty["TREASURE_DATA_PATH"] = "td_path";
    AnalyticsTrackerEventProperty["UI_ELEMENT"] = "ui element";
    AnalyticsTrackerEventProperty["WEBAPP_VERSION"] = "webapp_version";
    AnalyticsTrackerEventProperty["VERSION"] = "version";
    AnalyticsTrackerEventProperty["PRODUCT"] = "product";
    AnalyticsTrackerEventProperty["TRANSACTION_GROUP_ID"] = "transaction_group_id";
    AnalyticsTrackerEventProperty["PAY_TXN_AMOUNT"] = "pay_txn_amount";
    AnalyticsTrackerEventProperty["PAY_CARD_UID"] = "pay_card_uid";
    // This is a special column that we can use to send up additional data as arbitrary json blobs
    // so we don't make a bunch of new columns for properties that are really just specific to
    // a few events
    AnalyticsTrackerEventProperty["PROPERTIES"] = "properties";
    AnalyticsTrackerEventProperty["OUTAGES"] = "outages";
    AnalyticsTrackerEventProperty["APP_TIME"] = "app_time";
    AnalyticsTrackerEventProperty["ACTION"] = "action";
    AnalyticsTrackerEventProperty["OUTCOME"] = "outcome";
    AnalyticsTrackerEventProperty["PAY_CARD_REJECTED_BY"] = "pay_card_rejected_by";
    AnalyticsTrackerEventProperty["PAY_CARD_LINKED"] = "pay_card_linked";
    AnalyticsTrackerEventProperty["PAY_CC_TOKEN_FOUND"] = "pay_cc_token_found";
    AnalyticsTrackerEventProperty["PAY_FUNCTION"] = "pay_function";
    AnalyticsTrackerEventProperty["PAY_INIT_STATUS"] = "pay_init_status";
    AnalyticsTrackerEventProperty["PAY_NEW_CC_REGISTERED"] = "pay_new_cc_registered";
    AnalyticsTrackerEventProperty["PAY_NEW_USER_REGISTERED"] = "pay_new_user_registered";
    AnalyticsTrackerEventProperty["PAY_MTAB_SESSION_ID"] = "pay_mtab_session_id";
    AnalyticsTrackerEventProperty["PAY_REFUND_AMOUNT"] = "pay_refund_amount";
    AnalyticsTrackerEventProperty["PAY_REFUND_MATCH_COUNT"] = "pay_refund_match_count";
    AnalyticsTrackerEventProperty["PAY_REFUNDED_TXN_UID"] = "pay_refunded_txn_uid";
    AnalyticsTrackerEventProperty["PAY_TXN_UID"] = "pay_txn_uid";
    AnalyticsTrackerEventProperty["PAY_USER_FOUND"] = "pay_user_found";
    AnalyticsTrackerEventProperty["SELECTED_PROMO_TRACKER_UID"] = "selected_promo_tracker_uid";
    AnalyticsTrackerEventProperty["SELECTED_REWARD_TYPE"] = "selected_reward_type";
    AnalyticsTrackerEventProperty["SELECTED_REWARD_UID"] = "selected_reward_uid";
    AnalyticsTrackerEventProperty["PAY_TIP_TYPE"] = "pay_tip_type";
    AnalyticsTrackerEventProperty["USER_TIME"] = "user_time";
    // added for early checkin. This value is generated by cpay and never sent to mpay, and allows
    // analytics to be able to still have a session id in the case where mpay is not responsive
    // but cpay still attempted to start an early checkin
    AnalyticsTrackerEventProperty["CPAY_SESSION_ID"] = "cpay_session_id";
    // A way to tell which events are early checkin related. Default value is null, we set it to true
    // when the early checkin begins, and we set it to false when the early checkin completes and
    // the payment flow begins
    AnalyticsTrackerEventProperty["EARLY_CHECKIN_FLOW_FLAG"] = "early_checkin_flow_flag";
})(AnalyticsTrackerEventProperty = exports.AnalyticsTrackerEventProperty || (exports.AnalyticsTrackerEventProperty = {}));
var AnalyticsTrackerEventName;
(function (AnalyticsTrackerEventName) {
    // The alert at the top of the prioritized queue
    AnalyticsTrackerEventName["ALERT"] = "pay_alert";
    // The duration and status of the startup process
    AnalyticsTrackerEventName["APP_START"] = "app_start";
    // The duration app was stopped and shutdown source
    AnalyticsTrackerEventName["APP_STOP"] = "app_stop";
    // The duration and status for installing apk (after download)
    AnalyticsTrackerEventName["APK_UPDATE"] = "pay_apk_update";
    // Tracks nightly restart
    AnalyticsTrackerEventName["APP_NIGHTLY_RESTART"] = "pay_app_nightly_restart";
    // Unable to enable bluetooth
    AnalyticsTrackerEventName["BLUETOOTH_ENABLE_ABORT"] = "pay_bluetooth_enable_abort";
    // All the earned rewards at a business location
    AnalyticsTrackerEventName["BUSINESS_LOCATION_REWARDS"] = "pay_business_location_rewards";
    // Dip and swipe events (success / failure)
    AnalyticsTrackerEventName["CARD_READER"] = "card_reader";
    // Tracks the client features that are enabled
    AnalyticsTrackerEventName["CLIENT_FEATURES"] = "pay_client_features";
    AnalyticsTrackerEventName["DOWNLOAD_APP"] = "download_app";
    // If card for split payment is linked to a different account
    AnalyticsTrackerEventName["ERROR_ACCOUNT_CHANGE"] = "pay_error_account_change";
    // Whether the merchant is taking part in experiment and how
    AnalyticsTrackerEventName["EXPERIMENT"] = "Experiment";
    // The duration for api calls and status
    AnalyticsTrackerEventName["FUNCTION_DURATION"] = "pay_function_duration";
    // Error retrieving customer, skipping loyalty
    AnalyticsTrackerEventName["GET_CUSTOMER_FAILED"] = "pay_get_customer_failed";
    // Sent whenever the application tries to re-enable charging
    AnalyticsTrackerEventName["ENABLE_CHARGING_CALL"] = "pay_enable_charging_call";
    // Duration the internet is down
    AnalyticsTrackerEventName["INTERNET_DOWN"] = "pay_internet_down";
    // Duration the internet is proxied through the paired device
    AnalyticsTrackerEventName["INTERNET_PROXIED"] = "pay_internet_proxied";
    // Duration for different internet status (OK, DOWN, DEGRADED)
    AnalyticsTrackerEventName["INTERNET_STATUS"] = "pay_internet_status";
    // Duration for api call to AWS to check internet status
    // Note: This is only tracked if internet is OK at start
    AnalyticsTrackerEventName["INTERNET_STATUS_CHECK"] = "pay_internet_status_check";
    // The duration all transports are unable to send paired messages
    AnalyticsTrackerEventName["MESSENGER_OUTAGE"] = "pay_messenger_outage";
    // Whenever a transport switches and duration for previous transport
    AnalyticsTrackerEventName["MESSENGER_UPDATE_TRANSPORT"] = "pay_messenger_update_transport";
    // Sent each time we request a change of the network affinity
    AnalyticsTrackerEventName["NETWORK_AFFINITY_REQUEST"] = "pay_network_affinity_request";
    // Track the bytes sent and received plust other info while using a network affinity
    AnalyticsTrackerEventName["NETWORK_AFFINITY_STATS"] = "pay_network_affinity_stats";
    // The duration a page was displayed
    AnalyticsTrackerEventName["PAGE_DURATION"] = "pay_screen_duration";
    // The duration for transitioning between pages
    AnalyticsTrackerEventName["PAGE_TRANSITION"] = "page_transition";
    // Details (including duration) for each paired message sent between devices
    AnalyticsTrackerEventName["PAIRED_MESSAGE"] = "pay_paired_message";
    // When a reconnect is triggered because a paired message has not be acknowledged
    AnalyticsTrackerEventName["PAIRED_QUEUE_RECONNECT_TRANSPORT"] = "pay_paired_queue_reconnect_transport";
    // When we first consider an acknowledgment to have taken too long
    AnalyticsTrackerEventName["PAIRED_QUEUE_UNACKNOWLEDGED"] = "pay_paired_queue_unacknowledged";
    // General button event for multiple pages, button name is usually sent up in the properties column
    AnalyticsTrackerEventName["PAY_BUTTON_CLICK"] = "pay_button_click";
    // When a card is keyed into mPay
    AnalyticsTrackerEventName["PAY_CARD_ENTRY"] = "pay_card_entry";
    // When resolving the keyed entry returns an error
    AnalyticsTrackerEventName["PAY_CARD_ENTRY_ERROR"] = "pay_card_entry_error";
    // The user account associated with a credit card
    AnalyticsTrackerEventName["PAY_CARD_IDENTITY"] = "pay_card_identity";
    // When a device is paired
    AnalyticsTrackerEventName["PAY_DEVICE_PAIRED"] = "pay_device_paired";
    // When a device is unpaired
    AnalyticsTrackerEventName["PAY_DEVICE_UNPAIRED"] = "pay_device_unpaired";
    // General event for when a modal is displayed (currently mPay only)
    AnalyticsTrackerEventName["PAY_MODAL_DISPLAYED"] = "pay_modal_displayed";
    // When a printer error occurs
    AnalyticsTrackerEventName["PRINTER_ERROR"] = "pay_printer_error";
    // Duration of the proxied api call
    AnalyticsTrackerEventName["PROXY_API_CALL"] = "pay_proxy_api_call";
    // When registering a new customer fails
    AnalyticsTrackerEventName["REGISTER_CUSTOMER_FAILED"] = "pay_register_customer_failed";
    // When the customer or merchant hits skip instead of redeeming reward
    AnalyticsTrackerEventName["REWARD_SKIPPED"] = "pay_reward_skipped";
    // During startup we retry and backoff when we hit an error
    AnalyticsTrackerEventName["RETRY_BACKOFF"] = "pay_retry_backoff";
    // Duration the router is down
    AnalyticsTrackerEventName["ROUTER_DOWN"] = "pay_router_down";
    // The time it takes to upload logs to s3
    AnalyticsTrackerEventName["S3_UPLOAD"] = "pay_s3_upload";
    // Triggered when a session starts
    AnalyticsTrackerEventName["SESSION_START"] = "pay_session_start";
    // The duration, status and other properties about a session
    AnalyticsTrackerEventName["SESSION_ENDED"] = "pay_session_ended";
    // Triggered when an individual split payment starts
    AnalyticsTrackerEventName["SESSION_START_SPLIT"] = "pay_session_start_split";
    // The duration, status and other properties about an individual split payment
    AnalyticsTrackerEventName["SESSION_END_SPLIT"] = "pay_session_end_split";
    // The change is some netstat metrics during a transaction
    AnalyticsTrackerEventName["SESSION_NETSTAT"] = "pay_session_netstat";
    // The change is bytes sent and received during a transaction
    AnalyticsTrackerEventName["SESSION_TRAFFIC_STATS"] = "pay_session_traffic_stats";
    // The shipped hardware details from the server
    AnalyticsTrackerEventName["SHIPPED_HARDWARE"] = "pay_shipped_hardware";
    // When the customer or the merchant hits skip instead of registering
    AnalyticsTrackerEventName["SIGN_IN_SKIPPED"] = "pay_user_sign_in_skipped";
    // When the customer or the merchant hits skip instead of entering tip
    AnalyticsTrackerEventName["TIP_SKIPPED"] = "pay_tip_skipped";
    // When we stop receiving broadcasts from the paired message
    AnalyticsTrackerEventName["UDP_BROADCAST_OUTAGE"] = "pay_udp_broadcast_outage";
    // When a USB device is detached or attached
    AnalyticsTrackerEventName["USB_DEVICE_CHANGE"] = "pay_usb_device_change";
    // When vgs should have been present and isn't so we trigger a reload
    AnalyticsTrackerEventName["VGS_RELOAD"] = "pay_vgs_reload";
    // When web rtc disconnects and until it reconnects
    AnalyticsTrackerEventName["WEB_RTC_OUTAGE"] = "pay_web_rtc_outage";
    // When we give up on web rtc because of excessive errors
    AnalyticsTrackerEventName["WEB_RTC_INITIATOR_ABORT"] = "pay_web_rtc_initiator_abort";
    // When the web socket connect is broken
    AnalyticsTrackerEventName["WEB_SOCKET_DISCONNECT"] = "pay_web_socket_disconnect";
    // When we send a ping but fail to receive the pong
    AnalyticsTrackerEventName["WEB_SOCKET_PONG_TIMEOUT"] = "pay_web_socket_pong_timeout";
    // cPay specific events
    AnalyticsTrackerEventName["CARD_LOGIN"] = "pay_card_login_completed";
    AnalyticsTrackerEventName["CARD_DIP"] = "pay_card_dip";
    AnalyticsTrackerEventName["CARD_NFC"] = "pay_card_nfc";
    AnalyticsTrackerEventName["CONFIRMATION_BACK"] = "pay_confirmation_screen_back_button_click";
    AnalyticsTrackerEventName["CONFIRMATION_SUBMIT"] = "pay_confirmation_screen_submit";
    AnalyticsTrackerEventName["CONFIRMATION_PHONE_SCREEN"] = "pay_confirmation_phone_screen";
    AnalyticsTrackerEventName["DUPLICATE_TRANSACTION_DETECTED"] = "pay_duplicate_transaction_detected";
    AnalyticsTrackerEventName["FULL_CARD_SWIPE"] = "pay_full_card_swipe";
    AnalyticsTrackerEventName["REFUND_TRANSACTION"] = "pay_refund_transaction";
    AnalyticsTrackerEventName["REFUND_TRANSACTIONS_LIST"] = "pay_refund_transactions_list";
    AnalyticsTrackerEventName["REWARD_DISPLAYED"] = "pay_reward_screen_displayed";
    AnalyticsTrackerEventName["REWARD_SELECTED"] = "pay_reward_selected";
    AnalyticsTrackerEventName["SIGN_IN_COMPLETE"] = "pay_user_sign_in_complete";
    AnalyticsTrackerEventName["SIGN_IN_DISPLAYED"] = "pay_user_sign_in_displayed";
    AnalyticsTrackerEventName["STRIPE_AUTH_DURATION"] = "pay_stripe_auth_duration";
    AnalyticsTrackerEventName["STRIPE_AUTH_FAIL"] = "pay_stripe_auth_failed";
    AnalyticsTrackerEventName["CUSTOM_TIP"] = "pay_custom_tip_pushed";
    AnalyticsTrackerEventName["PAY_CUSTOM_TIP_SCREEN_DURATION"] = "pay_custom_tip_screen_duration";
    AnalyticsTrackerEventName["PAY_CUSTOM_TIP_CANCELED"] = "pay_custom_tip_cancelled";
    AnalyticsTrackerEventName["PAY_CUSTOM_TIP_ENTERED"] = "pay_custom_tip_entered";
    AnalyticsTrackerEventName["PAY_TIP_ADDED"] = "pay_tip_added";
    // mPay specific events
    AnalyticsTrackerEventName["CASH_BUTTON_PUSHED"] = "pay_cash_button_pushed";
    AnalyticsTrackerEventName["CASH_RECIVED"] = "pay_cash_received";
    AnalyticsTrackerEventName["CREDIT_BUTTON_PUSHED"] = "pay_credit_button_pushed";
    AnalyticsTrackerEventName["DUPLICATE_TRANSACTION_ALERT_DISPLAYED"] = "pay_duplicate_transaction_alert_displayed";
    AnalyticsTrackerEventName["DUPLICATE_TRANSACTION_ALERT_EXITED"] = "pay_duplicate_transaction_alert_exited";
    AnalyticsTrackerEventName["OCR_TOTAL_RECEIVED"] = "pay_total_received";
    AnalyticsTrackerEventName["PAY_OCR_VALUE"] = "pay_ocr_value";
    AnalyticsTrackerEventName["PAY_POINT_REFUND_COMPLETED"] = "pay_point_refund_complete";
    AnalyticsTrackerEventName["PAY_SALE_COMPLETED"] = "pay_sale_completed";
    AnalyticsTrackerEventName["PAY_TRANSACTION_DURATION"] = "pay_transaction_duration";
    AnalyticsTrackerEventName["PROCESSOR_REFUND_COMPLETED"] = "pay_processor_refund_completed";
    AnalyticsTrackerEventName["REWARD_APPLIED"] = "pay_reward_applied";
    AnalyticsTrackerEventName["REWARD_MODAL_INSTRUCTIONS_REMINDER_FROM_HOST"] = "pay_reward_modal_instructions_reminder_from_host";
    AnalyticsTrackerEventName["TRANSACTION_DURATION"] = "pay_transaction_duration";
    AnalyticsTrackerEventName["TRANSACTION_TYPE_UPDATED"] = "pay_txn_type_updated";
})(AnalyticsTrackerEventName = exports.AnalyticsTrackerEventName || (exports.AnalyticsTrackerEventName = {}));
var AnalyticsTrackerButtonName;
(function (AnalyticsTrackerButtonName) {
    AnalyticsTrackerButtonName["ACCEPT_CANCEL"] = "accept_cancel";
    AnalyticsTrackerButtonName["ACCEPT_REWARD"] = "accept_reward";
    AnalyticsTrackerButtonName["ALL_FILTERS_CLEARED"] = "all_filters_cleared";
    AnalyticsTrackerButtonName["AMOUNT_FILTER_CLEARED"] = "amount_filter_cleared";
    AnalyticsTrackerButtonName["APPLY_REWARD"] = "apply_reward";
    AnalyticsTrackerButtonName["APPROVE_TOTAL"] = "approve_total";
    AnalyticsTrackerButtonName["BACK"] = "back";
    AnalyticsTrackerButtonName["BACK_TO_REWARDS"] = "back_to_rewards";
    AnalyticsTrackerButtonName["CANCEL"] = "cancel";
    AnalyticsTrackerButtonName["CANCEL_CHECKIN"] = "cancel_checkin";
    AnalyticsTrackerButtonName["CANCEL_PRINTING"] = "cancel_printing";
    AnalyticsTrackerButtonName["CANNOT_FIND_TRANSACTION"] = "cannot_find_transaction";
    AnalyticsTrackerButtonName["CHARGE"] = "charge";
    AnalyticsTrackerButtonName["CHECK_IN"] = "check_in";
    AnalyticsTrackerButtonName["CLOSE_BANNER"] = "close_banner";
    AnalyticsTrackerButtonName["CLOSE_MODAL"] = "close_modal";
    AnalyticsTrackerButtonName["CONTACTLESS"] = "contactless";
    AnalyticsTrackerButtonName["CONTINUE"] = "continue";
    AnalyticsTrackerButtonName["CONTINUE_PAYMENT"] = "continue_payment";
    AnalyticsTrackerButtonName["DATE_FILTER_CLEARED"] = "date_filter_cleared";
    AnalyticsTrackerButtonName["DATE_PAGE_BACK"] = "date_page_back";
    AnalyticsTrackerButtonName["DATE_PAGE_FORWARD"] = "date_page_forward";
    AnalyticsTrackerButtonName["DECLINE_TOTAL"] = "decline_total";
    AnalyticsTrackerButtonName["DIFFERENT_CARD"] = "different_card";
    AnalyticsTrackerButtonName["DISMISS"] = "dismiss";
    AnalyticsTrackerButtonName["DOWNLOAD_APP_SKIP"] = "skip_text_app";
    AnalyticsTrackerButtonName["DOWNLOAD_APP_YES"] = "yes_text_app";
    AnalyticsTrackerButtonName["ENTER_TRANSACTION_AMOUNT"] = "enter_transaction_amount";
    AnalyticsTrackerButtonName["EQUAL_SPLIT"] = "equal_split";
    AnalyticsTrackerButtonName["EXIT"] = "exit";
    AnalyticsTrackerButtonName["GOT_IT"] = "got_it";
    AnalyticsTrackerButtonName["LAST_4_FILTER_CLEARED"] = "last_4_filter_cleared";
    AnalyticsTrackerButtonName["LOOKUP_REFUND"] = "lookup_refund";
    AnalyticsTrackerButtonName["LOOKUP_TRANSACTION"] = "lookup_transaction";
    AnalyticsTrackerButtonName["MANUAL_ENTRY"] = "manual_entry";
    AnalyticsTrackerButtonName["NEXT_SPLIT"] = "next_split";
    AnalyticsTrackerButtonName["NO_RECEIPT"] = "no_receipt";
    AnalyticsTrackerButtonName["NO_TIP"] = "no_tip";
    AnalyticsTrackerButtonName["OKAY"] = "okay";
    AnalyticsTrackerButtonName["PAGE_DOWN"] = "page_down";
    AnalyticsTrackerButtonName["PAGE_UP"] = "page_up";
    AnalyticsTrackerButtonName["PHONE_ENTRY_FIELD_EXPAND"] = "phone_entry_field_expand";
    AnalyticsTrackerButtonName["PHONE_ORDER"] = "phone_order";
    AnalyticsTrackerButtonName["PRINT_RECEIPT"] = "print_receipt";
    AnalyticsTrackerButtonName["REFUND"] = "refund";
    AnalyticsTrackerButtonName["REJECT_CANCEL"] = "reject_cancel";
    AnalyticsTrackerButtonName["REJECT_REWARD"] = "reject_reward";
    AnalyticsTrackerButtonName["REWARD_CAROUSEL_SCROLL"] = "reward_carousel_scroll";
    AnalyticsTrackerButtonName["REWARD_INSTRUCTIONS_BACK"] = "reward_instructions_reminder_back";
    AnalyticsTrackerButtonName["REWARD_INSTRUCTIONS_REMINDER"] = "reward_instructions_reminder";
    AnalyticsTrackerButtonName["REWARD_INSTRUCTIONS_REVIEW_REWARD"] = "reward_instructions_review_reward";
    AnalyticsTrackerButtonName["REWARD_WAS_APPLIED"] = "reward_was_applied";
    AnalyticsTrackerButtonName["REWARD_WAS_NOT_APPLIED"] = "rewards_was_not_applied";
    AnalyticsTrackerButtonName["SELECT_REFUND"] = "select_refund";
    AnalyticsTrackerButtonName["SIGNOUT"] = "signout";
    AnalyticsTrackerButtonName["SKIP_AND_PAY"] = "skip_and_pay";
    AnalyticsTrackerButtonName["SKIP_REWARDS"] = "skip_rewards";
    AnalyticsTrackerButtonName["SPLIT_ORDER_SUMMARY_TAB"] = "split_order_summary_tab";
    AnalyticsTrackerButtonName["SPLIT_PAYMENT"] = "split_payment";
    AnalyticsTrackerButtonName["SPLIT_PAYMENTS_TAB"] = "split_payments_tab";
    AnalyticsTrackerButtonName["SUBMIT"] = "submit";
    AnalyticsTrackerButtonName["SWITCH_TO_CARD"] = "switch_to_card";
    AnalyticsTrackerButtonName["SWITCH_TO_CASH"] = "switch_to_cash";
    AnalyticsTrackerButtonName["TRANSACTION_FILTER_MODAL_CLOSED"] = "transaction_filter_modal_closed";
    AnalyticsTrackerButtonName["TRAVERSE_REWARDS_LEFT"] = "traverse_rewards_left";
    AnalyticsTrackerButtonName["TRAVERSE_REWARDS_RIGHT"] = "traverse_rewards_right";
    AnalyticsTrackerButtonName["TRY_AGAIN"] = "try_again";
    AnalyticsTrackerButtonName["VIEW_REWARDS_LIST"] = "view_rewards_list";
    AnalyticsTrackerButtonName["WAIT_ON_POS"] = "wait_on_pos";
})(AnalyticsTrackerButtonName = exports.AnalyticsTrackerButtonName || (exports.AnalyticsTrackerButtonName = {}));
var AnalyticsTrackerUiElement;
(function (AnalyticsTrackerUiElement) {
    AnalyticsTrackerUiElement["APPLY_REWARD_INSTRUCTION"] = "apply_reward_instruction";
    AnalyticsTrackerUiElement["APPLY_REWARD_CONFIRMATION"] = "apply_reward_confirmation";
    AnalyticsTrackerUiElement["CANNOT_FIND_TRANSACTION_MODAL"] = "cannot_find_transaction_modal";
    AnalyticsTrackerUiElement["CARD_DECLINED_MODAL"] = "card_declined_modal";
    AnalyticsTrackerUiElement["CARD_ERROR_MODAL"] = "card_error_modal";
    AnalyticsTrackerUiElement["CUSTOMER_NO_REWARD_SELECTED"] = "customer_no_reward_selected";
    AnalyticsTrackerUiElement["CUSTOMER_REWARD_SELECTED"] = "customer_reward_selected";
    AnalyticsTrackerUiElement["CUSTOMER_SELECT_REWARD_WAIT"] = "customer_select_reward_wait";
    AnalyticsTrackerUiElement["EARLY_CHECKIN_WAIT"] = "early_checkin_wait";
    AnalyticsTrackerUiElement["NFC_REFUND_ERROR_MODAL"] = "nfc_refund_error_modal";
    AnalyticsTrackerUiElement["NULL_OCR_MODAL"] = "null_ocr_modal";
    AnalyticsTrackerUiElement["PROFILE_HEADER"] = "profile_header";
    AnalyticsTrackerUiElement["REFUND_UNAVAILABLE_CASH"] = "refund_unavailable_cash";
    AnalyticsTrackerUiElement["REFUND_UNAVAILABLE_OUT_OF_DATE"] = "refund_unavailable_out_of_date";
    AnalyticsTrackerUiElement["REFUND_UNAVAILABLE_PREVIOUSLY_REFUNDED"] = "refund_unavailable_previously_refunded";
    AnalyticsTrackerUiElement["REWARD_MODAL"] = "reward_modal";
    AnalyticsTrackerUiElement["REWARD_REMOVED_BANNER"] = "reward_removed_banner";
    AnalyticsTrackerUiElement["SERVER_DOWN_MODAL"] = "server_down_modal";
    AnalyticsTrackerUiElement["SPLIT_CANCEL_MODAL"] = "split_cancel_modal";
    AnalyticsTrackerUiElement["TRANSACTION_FILTER_MODAL"] = "transaction_filter_modal";
    AnalyticsTrackerUiElement["TRANSACTION_HISTORY_CASH_DISCOUNT_INFO"] = "transaction_history_cash_discount_info";
})(AnalyticsTrackerUiElement = exports.AnalyticsTrackerUiElement || (exports.AnalyticsTrackerUiElement = {}));
var AnalyitcsTrackerErrorMessage;
(function (AnalyitcsTrackerErrorMessage) {
    AnalyitcsTrackerErrorMessage["BAD_DIP"] = "badDip";
    AnalyitcsTrackerErrorMessage["BAD_SWIPE"] = "badSwipe";
    AnalyitcsTrackerErrorMessage["BAD_NFC"] = "badNfc";
})(AnalyitcsTrackerErrorMessage = exports.AnalyitcsTrackerErrorMessage || (exports.AnalyitcsTrackerErrorMessage = {}));
var CardReaderEventPropertyValue;
(function (CardReaderEventPropertyValue) {
    CardReaderEventPropertyValue["CARD_DIP_BEGIN"] = "cardDipBegin";
    CardReaderEventPropertyValue["CARD_DIP_ERROR"] = "cardDipError";
    CardReaderEventPropertyValue["CARD_DIP_FINISH"] = "cardDipFinish";
    CardReaderEventPropertyValue["CARD_NFC_BEGIN"] = "cardNfcBegin";
    CardReaderEventPropertyValue["CARD_NFC_ERROR"] = "cardNfcError";
    CardReaderEventPropertyValue["CARD_NFC_FINISH"] = "cardNfcFinish";
    CardReaderEventPropertyValue["CARD_REMOVED"] = "cardRemoved";
    CardReaderEventPropertyValue["CARD_SWIPE_ERROR"] = "cardSwipeError";
    CardReaderEventPropertyValue["CARD_SWIPE_FINISH"] = "cardSwipeFinish";
    CardReaderEventPropertyValue["START_CHIP_TRANSACTION_ERROR"] = "startChipTransactionError";
    CardReaderEventPropertyValue["START_NFC_TRANSACTION_ERROR"] = "startNfcTransactionError";
})(CardReaderEventPropertyValue = exports.CardReaderEventPropertyValue || (exports.CardReaderEventPropertyValue = {}));
var CardReaderEventHardwareDevice;
(function (CardReaderEventHardwareDevice) {
    CardReaderEventHardwareDevice["EDYNAMO"] = "MagTek eDynamo";
    CardReaderEventHardwareDevice["DYNAWAVE"] = "MagTek DynaWave";
    CardReaderEventHardwareDevice["PAX_A920"] = "Pax A920";
})(CardReaderEventHardwareDevice = exports.CardReaderEventHardwareDevice || (exports.CardReaderEventHardwareDevice = {}));
var CardInputType;
(function (CardInputType) {
    // The pay-api uses the 'emv' for dip
    CardInputType["DIP"] = "emv";
    CardInputType["KEYED"] = "keyed";
    CardInputType["SWIPE"] = "swipe";
    CardInputType["NFC"] = "nfc";
})(CardInputType = exports.CardInputType || (exports.CardInputType = {}));
var SortOrder;
(function (SortOrder) {
    SortOrder["ASCENDING"] = "ASC";
    SortOrder["DESCENDING"] = "DESC";
})(SortOrder = exports.SortOrder || (exports.SortOrder = {}));
var SupportContact;
(function (SupportContact) {
    SupportContact["PHONE"] = "4152665995";
    SupportContact["DASHBOARD"] = "dashboard.fivestars.com";
    SupportContact["SUPPORT"] = "support.fivestars.com";
})(SupportContact = exports.SupportContact || (exports.SupportContact = {}));
var Product;
(function (Product) {
    Product["MPAY"] = "mpay";
    Product["MPOS"] = "mpos";
    Product["MREG"] = "mreg";
    Product["CPAY"] = "cpay";
    Product["WINPAY"] = "winpay";
    Product["INSTORE"] = "instore";
    Product["UPAY"] = "upay";
})(Product = exports.Product || (exports.Product = {}));
var DeviceType;
(function (DeviceType) {
    DeviceType["PEGASUS"] = "Fivestars-Pegasus";
    DeviceType["PAX_A920"] = "A920";
})(DeviceType = exports.DeviceType || (exports.DeviceType = {}));
var KeypadMaxLength;
(function (KeypadMaxLength) {
    KeypadMaxLength[KeypadMaxLength["PHONE"] = 10] = "PHONE";
    KeypadMaxLength[KeypadMaxLength["MONEY"] = 7] = "MONEY";
})(KeypadMaxLength = exports.KeypadMaxLength || (exports.KeypadMaxLength = {}));
var PayTxnStatus;
(function (PayTxnStatus) {
    PayTxnStatus["FAILURE"] = "failure";
    PayTxnStatus["SUCCESS"] = "success";
})(PayTxnStatus = exports.PayTxnStatus || (exports.PayTxnStatus = {}));
var WebSocketErrorEvent;
(function (WebSocketErrorEvent) {
    WebSocketErrorEvent["FAILED_TO_RECONNECT"] = "failed to reconnect";
})(WebSocketErrorEvent = exports.WebSocketErrorEvent || (exports.WebSocketErrorEvent = {}));
var WebSocketCommonAction;
(function (WebSocketCommonAction) {
    WebSocketCommonAction["AUTHENTICATION_REQUEST"] = "ws.ack";
    WebSocketCommonAction["AUTHENTICATION_RESPONSE"] = "ws.authAck";
    WebSocketCommonAction["AUTHENTICATION_SUCCESS"] = "ws.authentication_success_received";
    WebSocketCommonAction["AUTHENTICATION_FAILURE"] = "ws.authentication_failure_received";
    WebSocketCommonAction["DEVICE_COUNTS"] = "device_counts";
    WebSocketCommonAction["FAILURE"] = "ws.apiFail";
    WebSocketCommonAction["PING"] = "ping";
    WebSocketCommonAction["PONG"] = "pong";
    WebSocketCommonAction["SUBSCRIBER_AUTHENTICATED"] = "subscriber_authenticated";
    WebSocketCommonAction["SUBSCRIBER_DISCONNECTED"] = "subscriber_disconnected";
})(WebSocketCommonAction = exports.WebSocketCommonAction || (exports.WebSocketCommonAction = {}));
var AnalyticsTrackerStatus;
(function (AnalyticsTrackerStatus) {
    AnalyticsTrackerStatus["FAILURE"] = "failure";
    AnalyticsTrackerStatus["OFFLINE"] = "offline";
    AnalyticsTrackerStatus["SUCCESS"] = "success";
    AnalyticsTrackerStatus["TIMEOUT"] = "timeout";
})(AnalyticsTrackerStatus = exports.AnalyticsTrackerStatus || (exports.AnalyticsTrackerStatus = {}));
var Environment;
(function (Environment) {
    Environment["DEVELOPMENT"] = "development";
    Environment["LOCAL"] = "local";
    Environment["PRODUCTION"] = "production";
    Environment["STAGING"] = "staging";
    Environment["TEST"] = "test";
})(Environment = exports.Environment || (exports.Environment = {}));
var FeatureFlags;
(function (FeatureFlags) {
    FeatureFlags["ARWING_EVERYWHERE"] = "arwing_everywhere";
    FeatureFlags["AUTOPOINTS"] = "sku";
    FeatureFlags["CASH_DISCOUNTING"] = "cash_discounting";
    FeatureFlags["CASHIER_TRACKING"] = "cashier_tracking";
    FeatureFlags["CTS"] = "cts";
    FeatureFlags["CTS_DESIGN_EXPERIMENTS"] = "cts_design_experiments";
    FeatureFlags["CTS_MANY_TO_MANY"] = "ctsManyToMany";
    FeatureFlags["CTS_REWARD_REDEMPTION"] = "cts_reward_redemption";
    FeatureFlags["DESIGN_EXPERIMENTS"] = "design_experiments";
    FeatureFlags["EVENT_RATE_LIMITS"] = "event_rate_limits";
    FeatureFlags["FAILSAFE"] = "failsafe";
    FeatureFlags["KEYED_ENTRY_DISABLED"] = "disable_keyed_card_entry";
    FeatureFlags["MANUAL_REFUNDS"] = "manual_refunds";
    FeatureFlags["MESSENGER_TRANSPORTS"] = "messenger_transports";
    FeatureFlags["NEARBY_REWARDS"] = "cts_nearby_rewards";
    FeatureFlags["NEARBY_REWARDS_DISABLED"] = "nearby_rewards_disabled";
    FeatureFlags["NETWORK_DISCOVERY"] = "network_discovery";
    FeatureFlags["NETWORK_LOYALTY"] = "network_loyalty";
    FeatureFlags["NETWORK_MATCHING"] = "network_matching";
    FeatureFlags["LOG_ROCKET"] = "log_rocket";
    FeatureFlags["ONDECK"] = "ondeck";
    FeatureFlags["ONE_POINT_DEFAULT"] = "one_point_default";
    FeatureFlags["OPT_OUT_CTS_HOMESCREEN"] = "opt_out_cts_homescreen";
    FeatureFlags["OPT_OUT_HOLIDAY_SCREEN"] = "opt_out_holiday_screen";
    FeatureFlags["OPT_OUT_MTABX"] = "opt_out_mtabx";
    FeatureFlags["OPT_OUT_WORD_OF_MOUTH"] = "opt_out_of_word_of_mouth";
    FeatureFlags["POINT_PER_DOLLAR"] = "one_point_per_dollar";
    FeatureFlags["POS_LINK"] = "pos_link";
    FeatureFlags["PROMOTION_SHARE"] = "promotion_share";
    FeatureFlags["REDUCED_SMS_THROTTLING"] = "reduced_sms_throttling";
    FeatureFlags["SQUARE"] = "square";
    FeatureFlags["STANDARDIZED_REWARDS"] = "standardized_rewards";
    FeatureFlags["STATUS_INSPIRED"] = "status_inspired";
    FeatureFlags["STRUCTURED_REWARDS"] = "structured_rewards";
    FeatureFlags["TIMEOUT_POINT"] = "timeout_point";
    FeatureFlags["TIP_SCREEN"] = "tip_screen";
    FeatureFlags["USE_REWARD_INSTRUCTIONS_EXPERIENCE"] = "pay_reward_instructions";
    FeatureFlags["PAIRED_MESSAGE_QUEUE_DISABLED"] = "websocket_message_queue_disabled";
    FeatureFlags["WEBSOCKET_PROXY"] = "ws_proxy";
})(FeatureFlags = exports.FeatureFlags || (exports.FeatureFlags = {}));
var ClientFeatures;
(function (ClientFeatures) {
    ClientFeatures["EARLY_CHECKIN"] = "early_checkin";
    ClientFeatures["NFC_PAYMENTS"] = "nfcPayments";
    ClientFeatures["PROCESS_LOYALTY_POINTS_ON_CONSUMER"] = "processLoyaltyPointsOnConsumer";
    ClientFeatures["PROXY_API_FOR_PAIRED_DEVICE"] = "proxy_api_for_paired_device";
    ClientFeatures["SPLIT_PAYMENTS"] = "splitPayments";
    ClientFeatures["CASH_DISCOUNTING"] = "cashDiscounting";
})(ClientFeatures = exports.ClientFeatures || (exports.ClientFeatures = {}));
var ShutdownReason;
(function (ShutdownReason) {
    ShutdownReason["POWER_DOWN"] = "PowerDown";
    ShutdownReason["RESTART"] = "Restart";
    ShutdownReason["CRITICAL_BATTERY_UNPLUGGED"] = "CriticalBatteryUnplugged";
})(ShutdownReason = exports.ShutdownReason || (exports.ShutdownReason = {}));
var ShutdownSource;
(function (ShutdownSource) {
    ShutdownSource["SET_CARD_READER_USB_PERMISSION"] = "set-card-reader-usb-permission";
    ShutdownSource["DEVICE_OS"] = "device-os";
    ShutdownSource["ENVIRONMENT_OVERRIDE"] = "environment-override";
    ShutdownSource["EXCEPTION"] = "exception";
    ShutdownSource["MISSION_CONTROL"] = "mission-control";
    ShutdownSource["MPAY"] = "mpay";
    ShutdownSource["CPAY"] = "cpay";
    ShutdownSource["NIGHTLY_RESTART"] = "nightly-restart";
    ShutdownSource["UNKNOWN"] = "unknown";
    ShutdownSource["UPGRADE"] = "upgrade";
})(ShutdownSource = exports.ShutdownSource || (exports.ShutdownSource = {}));
var AnalyticsEventDatabaseOperation;
(function (AnalyticsEventDatabaseOperation) {
    AnalyticsEventDatabaseOperation["STORE_COMPLETED_EVENT"] = "storeCompletedEvent";
    AnalyticsEventDatabaseOperation["STORE_IN_PROGRESS_EVENT"] = "storeInProgressEvent";
})(AnalyticsEventDatabaseOperation = exports.AnalyticsEventDatabaseOperation || (exports.AnalyticsEventDatabaseOperation = {}));
// Currently match this enum exactly to what is in instore-plugins
// even for prop names that are not used in the typescript layer
var PropName;
(function (PropName) {
    PropName["SERIAL_ALERTED"] = "persist.fs.serial_alerted";
    PropName["SERIAL_CURRENT"] = "persist.fs.serial_current";
    PropName["SERIAL_PERSIST"] = "persist.fs.serial_persist";
    PropName["LAUNCHER_BUSINESS_UID"] = "persist.fs.buid";
})(PropName = exports.PropName || (exports.PropName = {}));
var InternetStatus;
(function (InternetStatus) {
    InternetStatus["OK"] = "OK";
    InternetStatus["DEGRADED"] = "DEGRADED";
    InternetStatus["DOWN"] = "DOWN";
})(InternetStatus = exports.InternetStatus || (exports.InternetStatus = {}));
