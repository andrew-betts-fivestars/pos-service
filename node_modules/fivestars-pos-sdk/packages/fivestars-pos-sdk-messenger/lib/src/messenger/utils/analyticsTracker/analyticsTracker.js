"use strict";
// import * as moment from 'moment';
// import { history } from '@app/components/routes';
// import { CONFIG } from '@app/config';
// import {
//     AnalyticsEventCategory,
//     AnalyticsEventDatabaseOperation,
//     AnalyticsTrackerEventName,
//     AnalyticsTrackerEventProperty
// } from '@instore/utils/enums';
// import { log } from '@instore/utils/log';
// import { getExternalProductName } from '@instore/utils/product';
// import { SkewAdjustedTime } from '@instore/utils/skewAdjustedTime';
// import { AnalyticsCommonEventProperties, AnalyticsTrackerState } from './types';
// export const LOG_PREFIX = 'analyticsTracker';
// export const _analyticsTrackerState: AnalyticsTrackerState = {
//     eventManager: undefined,
//     loggingEnabled: true,
//     treasureData: undefined
// };
// export const _commonEventProperties: AnalyticsCommonEventProperties = {
//     [AnalyticsTrackerEventProperty.ACCOUNT_UID]: null,
//     [AnalyticsTrackerEventProperty.APP_TYPE]: `${CONFIG.PRODUCT}_react`,
//     [AnalyticsTrackerEventProperty.PRODUCT]: getExternalProductName(CONFIG.PRODUCT),
//     [AnalyticsTrackerEventProperty.BUSINESS_UID]: null,
//     [AnalyticsTrackerEventProperty.CONSUMER_PHONE_NUMBER]: null,
//     [AnalyticsTrackerEventProperty.CPAY_SESSION_ID]: null,
//     [AnalyticsTrackerEventProperty.DEVICE_MODEL]: null,
//     [AnalyticsTrackerEventProperty.DEVICE_SERIAL_NUMBER]: null,
//     [AnalyticsTrackerEventProperty.EARLY_CHECKIN_FLOW_FLAG]: null,
//     [AnalyticsTrackerEventProperty.LOG_ROCKET_URL]: null,
//     [AnalyticsTrackerEventProperty.PAY_CARD_UID]: null,
//     [AnalyticsTrackerEventProperty.PAY_MANUAL_TXN_FLAG]: null,
//     [AnalyticsTrackerEventProperty.PAY_MTAB_SESSION_ID]: null,
//     [AnalyticsTrackerEventProperty.PAY_TXN_AMOUNT]: null,
//     [AnalyticsTrackerEventProperty.PAY_TXN_TYPE]: null,
//     [AnalyticsTrackerEventProperty.PAY_TXN_UID]: null,
//     [AnalyticsTrackerEventProperty.SESSION_ID]: null,
//     [AnalyticsTrackerEventProperty.SOFTWARE_ID]: null,
//     [AnalyticsTrackerEventProperty.TRANSACTION_GROUP_ID]: null,
//     [AnalyticsTrackerEventProperty.VERSION]: null,
//     [AnalyticsTrackerEventProperty.WEBAPP_VERSION]: null
// };
// export const analyticsTracker = {
//     _getEvent(eventName: AnalyticsTrackerEventName | string, additionalEventProperties: any) {
//         const { category, ...otheradditionalProperties } = additionalEventProperties;
//         return {
//             ...analyticsTracker._getFinalEventProperties(eventName, category),
//             // important that additionalEventProperties is after _getFinalEventProperties, for overriding purposes
//             ...otheradditionalProperties,
//             // For some timed events we add a guuid to the name to allow for events with the same name
//             // to be tracked simultaneously.  We want to remove it before it gets send
//             [AnalyticsTrackerEventProperty.EVENT_NAME]: eventName.split(':')[0],
//             [AnalyticsTrackerEventProperty.TREASURE_DATA_PATH]: history.location.pathname
//         };
//     },
//     _getFinalEventProperties(
//         eventName: AnalyticsTrackerEventName | string,
//         category: AnalyticsEventCategory = AnalyticsEventCategory.TRANSACTION
//     ) {
//         const timedEvent = analyticsTracker.getTimedEvent(eventName);
//         let sessionId = null;
//         let sessionSequenceId = null;
//         if (timedEvent) {
//             return {
//                 ...timedEvent.eventProperties,
//                 [AnalyticsTrackerEventProperty.DURATION]: analyticsTracker._getTimedEventDuration(eventName)
//             };
//         }
//         if (category === AnalyticsEventCategory.TRANSACTION) {
//             sessionId = _commonEventProperties[AnalyticsTrackerEventProperty.SESSION_ID];
//         }
//         // only increment session sequence id if the session id is not null
//         if (sessionId) {
//             sessionSequenceId = analyticsTracker._getNextSessionSequenceId();
//         }
//         return {
//             ..._commonEventProperties,
//             [AnalyticsTrackerEventProperty.SESSION_ID]: sessionId,
//             [AnalyticsTrackerEventProperty.SESSION_SEQUENCE_ID]: sessionSequenceId,
//             [AnalyticsTrackerEventProperty.START_TIME]: moment(SkewAdjustedTime.now()).utc().valueOf()
//         };
//     },
//     _getNextSessionSequenceId() {
//         analyticsTracker._sessionSequenceId += 1;
//         return analyticsTracker._sessionSequenceId;
//     },
//     _getTimedEventDuration(eventName: AnalyticsTrackerEventName | string) {
//         const timedEvent = analyticsTracker.getTimedEvent(eventName);
//         if (timedEvent) {
//             if (timedEvent.endTime) {
//                 return timedEvent.endTime.diff(timedEvent.startTime, 'seconds', true);
//             }
//             return moment(SkewAdjustedTime.now()).diff(timedEvent.startTime, 'seconds', true);
//         }
//         return null;
//     },
//     _nextSessionId: '',
//     _sessionSequenceId: 0,
//     _timedEvents: {},
//     // used to repopulate the in memeory timed events map from events stored in dexie after recovering from an app shutdown
//     addTimedEvent(eventName: AnalyticsTrackerEventName | string, eventData: any) {
//         analyticsTracker._timedEvents[eventName] = eventData;
//     },
//     clearTransaction() {
//         analyticsTracker.setCommonEventProperty(AnalyticsTrackerEventProperty.ACCOUNT_UID, null);
//         analyticsTracker.setCommonEventProperty(AnalyticsTrackerEventProperty.CONSUMER_PHONE_NUMBER, null);
//         analyticsTracker.setCommonEventProperty(AnalyticsTrackerEventProperty.CPAY_SESSION_ID, null);
//         analyticsTracker.setCommonEventProperty(AnalyticsTrackerEventProperty.EARLY_CHECKIN_FLOW_FLAG, null);
//         analyticsTracker.setCommonEventProperty(AnalyticsTrackerEventProperty.PAY_MANUAL_TXN_FLAG, null);
//         analyticsTracker.setCommonEventProperty(AnalyticsTrackerEventProperty.PAY_MTAB_SESSION_ID, null);
//         analyticsTracker.setCommonEventProperty(AnalyticsTrackerEventProperty.PAY_TXN_TYPE, null);
//         analyticsTracker.setCommonEventProperty(AnalyticsTrackerEventProperty.PAY_TXN_UID, null);
//         analyticsTracker.setCommonEventProperty(AnalyticsTrackerEventProperty.SESSION_ID, null);
//         analyticsTracker.setCommonEventProperty(AnalyticsTrackerEventProperty.TRANSACTION_GROUP_ID, null);
//         analyticsTracker.setCommonEventProperty(AnalyticsTrackerEventProperty.PAY_TXN_AMOUNT, null);
//         analyticsTracker.setCommonEventProperty(AnalyticsTrackerEventProperty.PAY_CARD_UID, null);
//         analyticsTracker.resetSessionSequenceId();
//     },
//     deleteTimedEvent(eventName: AnalyticsTrackerEventName | string) {
//         const timedEvent = analyticsTracker.getTimedEvent(eventName);
//         if (timedEvent) {
//             delete analyticsTracker._timedEvents[eventName];
//         }
//     },
//     getCommonEventProperty(eventProperty: AnalyticsTrackerEventProperty) {
//         return _commonEventProperties[eventProperty];
//     },
//     getTimedEvent(eventName: AnalyticsTrackerEventName | string) {
//         if (Object.prototype.hasOwnProperty.call(analyticsTracker._timedEvents, eventName)) {
//             return analyticsTracker._timedEvents[eventName];
//         }
//         return null;
//     },
//     resetSessionSequenceId() {
//         analyticsTracker._sessionSequenceId = 0;
//     },
//     /*
//      * This is done at two points:
//      * 1. When the application starts up (ex., business_uid).
//      * 2. When a transaction is in-progress (ex., account_uid).
//      */
//     setCommonEventProperty(eventProperty: AnalyticsTrackerEventProperty, value: any) {
//         if (!Object.prototype.hasOwnProperty.call(_commonEventProperties, eventProperty)) {
//             console.warn('analyticsTracker::setCommonEventProperty', `Property '${eventProperty}' is not supported.`);
//             return;
//         }
//         _commonEventProperties[eventProperty] = value;
//     },
//     startTimedEvent(eventName: AnalyticsTrackerEventName | string, eventProperties: any = {}) {
//         let startTime: moment.Moment;
//         let sessionId = null;
//         let sessionSequenceId = null;
//         const { category, ...otheradditionalProperties } = eventProperties;
//         if (!category || category === AnalyticsEventCategory.TRANSACTION) {
//             sessionId = _commonEventProperties[AnalyticsTrackerEventProperty.SESSION_ID];
//         }
//         // only increment session sequence id if the session id is not null
//         if (sessionId) {
//             sessionSequenceId = analyticsTracker._getNextSessionSequenceId();
//         }
//         if (AnalyticsTrackerEventProperty.START_TIME in eventProperties) {
//             startTime = moment(eventProperties[AnalyticsTrackerEventProperty.START_TIME]);
//         } else {
//             startTime = moment(SkewAdjustedTime.now());
//         }
//         const eventData = {
//             endTime: null,
//             eventProperties: {
//                 ...otheradditionalProperties,
//                 ..._commonEventProperties,
//                 [AnalyticsTrackerEventProperty.SESSION_ID]: sessionId,
//                 [AnalyticsTrackerEventProperty.SESSION_SEQUENCE_ID]: sessionSequenceId,
//                 [AnalyticsTrackerEventProperty.START_TIME]: startTime.utc().valueOf()
//             },
//             startTime
//         };
//         analyticsTracker._timedEvents[eventName] = eventData;
//         if (_analyticsTrackerState.eventManager) {
//             _analyticsTrackerState.eventManager.eventEmitter({
//                 eventData,
//                 eventName,
//                 operationType: AnalyticsEventDatabaseOperation.STORE_IN_PROGRESS_EVENT
//             });
//         }
//     },
//     track(eventName: AnalyticsTrackerEventName | string, additionalEventProperties: any = {}) {
//         if (_analyticsTrackerState.eventManager) {
//             const eventData = analyticsTracker._getEvent(eventName, additionalEventProperties);
//             _analyticsTrackerState.eventManager.eventEmitter({
//                 eventData,
//                 eventName,
//                 operationType: AnalyticsEventDatabaseOperation.STORE_COMPLETED_EVENT
//             });
//             // we should only have one timed event for an eventName at any point
//             // so we delete it when we once we emit the event
//             analyticsTracker.deleteTimedEvent(eventName);
//         }
//     }
// };
