"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Messenger = exports.LOG_PREFIX = void 0;
var events_1 = require("events");
var config_1 = require("@fivestars-pos-sdk/config");
var types_1 = require("@fivestars-pos-sdk/types");
var packedApiKey_1 = require("./utils/packedApiKey");
var bestTransportOrder_1 = require("./bestTransportOrder");
var skewAdjustedTime_1 = require("./utils/skewAdjustedTime");
var utils_1 = require("./utils");
//import { analyticsTracker } from './utils/analyticsTracker';
var messengerActions = __importStar(require("./actions"));
//import { processBroadcastMessage } from './send/broadcast'
//import { handleErroneousPairing } from './send/erroneousPairing'
//import { processPairedMessage, sendSubscriberAuthenticated } from './send/paired'
exports.LOG_PREFIX = 'Messenger';
var Messenger = /** @class */ (function (_super) {
    __extends(Messenger, _super);
    function Messenger(udpTransport, webSocketTransport, webRtcTransport) {
        var _this = _super.call(this) || this;
        _this.udpTransport = udpTransport;
        _this.webSocketTransport = webSocketTransport;
        _this.webRtcTransport = webRtcTransport;
        _this.loyaltyCredentials = {
            apiKey: '',
            apiSecret: '',
            softwareId: ''
        };
        _this.lastSendTransportType = types_1.TransportType.WEB_SOCKET;
        _this.receivedMessages = new Set();
        _this.sentMessages = {
            Bluetooth: {},
            UDP: {},
            WebRtc: {},
            WebSocket: {}
        };
        _this.messageToTransports = {};
        _this.statsWindowStart = skewAdjustedTime_1.SkewAdjustedTime.now();
        _this.bestTransportOrder = null;
        _this.start = function (loyaltyCredentials) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.log("Messenger::start");
                        this.loyaltyCredentials = loyaltyCredentials;
                        return [4 /*yield*/, this.webSocketTransport.start(loyaltyCredentials)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.udpTransport.start(loyaltyCredentials)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.webRtcTransport.start(loyaltyCredentials)];
                    case 3:
                        _a.sent();
                        this.emit("message", messengerActions.initialized());
                        return [2 /*return*/];
                }
            });
        }); };
        _this.onWebRtcMsg = function (message) {
            console.debug("Messenger::onWebRtcMsg", message);
        };
        _this.onWebSocketMsg = function (message) {
            console.debug("Messenger::onWebSocketMsg", message);
            // if (message.action === messengerActions.sendBroadcast(message)) {
            //     console.info(`${LOG_PREFIX}::onWebSocketMsg`, 'message.action === messengerActions.sendBroadcast()')
            // }
            // else if (message.action === messengerActions.sendWebSocketServer(message)) {
            //     console.info(`${LOG_PREFIX}::onWebSocketMsg`, 'message.action === messengerActions.sendWebSocketServer()')
            // }
            // else if (message.action === messengerActions.sendPaired(message)) {
            //     console.info(`${LOG_PREFIX}::onWebSocketMsg`, 'message.action === messengerActions.sendPaired()')
            // }
            // else {
            //     this.emit("message", message)
            // }
            _this.emit("message", message);
        };
        _this.onUdpMsg = function (message) {
            console.debug("Messenger::onUdpMsg", message);
        };
        console.log('Messenger::constructor');
        _this.transportsMap = new Map([
            [types_1.TransportType.UDP, udpTransport],
            [types_1.TransportType.WEB_SOCKET, webSocketTransport],
            [types_1.TransportType.WEB_RTC, webRtcTransport]
        ]);
        _this.transportOrder = [webRtcTransport, udpTransport, webSocketTransport];
        _this.webRtcTransport.on("message", _this.onWebRtcMsg);
        _this.webSocketTransport.on("message", _this.onWebSocketMsg);
        _this.udpTransport.on("message", _this.onUdpMsg);
        return _this;
    }
    Messenger.prototype.setDefaultTransportOrder = function (transportTypes) {
        console.log('Messenger::setDefaultTransportOrder');
        if (this.shouldReplaceTransportOrder(transportTypes)) {
            this.setTransportOrder(transportTypes);
            this.bestTransportOrder = null;
        }
    };
    Messenger.prototype.shouldReplaceTransportOrder = function (transportTypes) {
        var _this = this;
        console.log('Messenger::shouldReplaceTransportOrder');
        if (!this.bestTransportOrder) {
            return true;
        }
        if (this.bestTransportOrder.order.length !== transportTypes.length) {
            return true;
        }
        var shouldReplace = false;
        transportTypes.forEach(function (transportType) {
            if (_this.bestTransportOrder && !_this.bestTransportOrder.order.includes(transportType)) {
                shouldReplace = true;
            }
        });
        return shouldReplace;
    };
    Messenger.prototype.setTransportOrder = function (transportTypes) {
        var _this = this;
        console.log('Messenger::setTransportOrder');
        if (!transportTypes.length) {
            console.warn(exports.LOG_PREFIX + "::setTransportOrder", 'Attempting remove all transports.');
            return;
        }
        this.transportOrder = transportTypes
            .filter(function (_type) { return _this.transportsMap.has(_type); })
            .map(function (_type) { return _this.transportsMap.get(_type); });
    };
    /**
     * Send data object using prioritized list of transports
     *
     * @param messageDetails The content to be sent
     * @param options Whether to skip aknowledgments and create a new uuid
     * @returns A promise that resolves to the UUID of the message sent or null if failed
     */
    Messenger.prototype.sendPaired = function (messageDetails, options) {
        return __awaiter(this, void 0, void 0, function () {
            var MESSAGE, _i, _a, transport, error_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        console.log('Messenger::sendPaired');
                        MESSAGE = utils_1.constructMessageGeneral({ messageDetails: messageDetails, options: options });
                        if (!MESSAGE.destination) {
                            throw new Error('Destination must be set for paired message');
                        }
                        _i = 0, _a = this.transportOrder;
                        _b.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3 /*break*/, 6];
                        transport = _a[_i];
                        if (!transport.isReadyPaired()) {
                            return [3 /*break*/, 5];
                        }
                        _b.label = 2;
                    case 2:
                        _b.trys.push([2, 4, , 5]);
                        console.info(exports.LOG_PREFIX + "::sendPaired::" + transport.transportType, MESSAGE);
                        return [4 /*yield*/, transport.send(MESSAGE)];
                    case 3:
                        _b.sent();
                        this.trackSentMessage(MESSAGE, options, transport.transportType);
                        if (this.lastSendTransportType !== transport.transportType) {
                            // AB todo: implement this
                            // this.eventManager.eventEmitter(
                            //     messengerActions.switchTransport({
                            //         from: this.lastSendTransportType,
                            //         to: transport.transportType
                            //     })
                            // );
                            this.lastSendTransportType = transport.transportType;
                        }
                        return [2 /*return*/, MESSAGE.uuid];
                    case 4:
                        error_1 = _b.sent();
                        console.info(exports.LOG_PREFIX + "::sendPaired::" + transport.transportType, error_1);
                        transport.triggerReconnect();
                        return [3 /*break*/, 5];
                    case 5:
                        _i++;
                        return [3 /*break*/, 1];
                    case 6: 
                    // we've iterated through all transports, and nothing sent the message!
                    return [2 /*return*/, null];
                }
            });
        });
    };
    /**
 * Only send message through websocket server (for now)
 *
 * @param messageDetails The content to be sent
 * @param options Whether to skip aknowledgments and create a new uuid
 * @returns A promise that resolves to the UUID of the message sent or null if failed
 */
    Messenger.prototype.sendBroadcast = function (messageDetails) {
        return __awaiter(this, void 0, void 0, function () {
            var MESSAGE, error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.log('Messenger::sendBroadcast');
                        MESSAGE = utils_1.constructMessageGeneral({ messageDetails: messageDetails });
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        console.info(exports.LOG_PREFIX + "::sendBroadcast::" + this.webSocketTransport.transportType, MESSAGE);
                        return [4 /*yield*/, this.webSocketTransport.send(MESSAGE)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, MESSAGE.uuid];
                    case 3:
                        error_2 = _a.sent();
                        console.info(exports.LOG_PREFIX + "::sendBroadcast::" + this.webSocketTransport.transportType, error_2);
                        return [2 /*return*/, null];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    Messenger.prototype.trackSentMessage = function (messageGeneral, sendOptions, transportType) {
        console.log('Messenger::trackSentMessage');
        if (messageGeneral.action === types_1.Acknowledgment || !messageGeneral.destination) {
            return;
        }
        var transportSentMessages = this.sentMessages[transportType];
        if (transportSentMessages[messageGeneral.uuid]) {
            transportSentMessages[messageGeneral.uuid].resendCount += 1;
            return;
        }
        transportSentMessages[messageGeneral.uuid] = {
            acknowledgedTime: null,
            payload: messageGeneral,
            reconnectCount: 0,
            resendCount: 0,
            responseTime: null,
            sentTime: skewAdjustedTime_1.SkewAdjustedTime.now(),
            skipAcknowledgment: sendOptions.skipAcknowledgment
        };
        if (!this.messageToTransports[messageGeneral.uuid]) {
            this.messageToTransports[messageGeneral.uuid] = new Set();
        }
        this.messageToTransports[messageGeneral.uuid].add(transportType);
    };
    Messenger.prototype.getLastUsedTransport = function () {
        console.log('Messenger::getLastUsedTransport');
        return this.transportsMap.get(this.lastSendTransportType) || this.webSocketTransport;
    };
    /**
 * Called when acknowledgments are not coming in, initiates a reconnect on the current transport.
 *
 * @param uuid The identifier for the sent message that was stuck, prompting the reconnect
 * @returns void
 */
    Messenger.prototype.reconnect = function (uuid) {
        if (uuid === void 0) { uuid = ''; }
        console.log('Messenger::reconnect');
        var TRANSPORT = this.getLastUsedTransport();
        var transportSentMessages = this.sentMessages[TRANSPORT.transportType];
        if (transportSentMessages[uuid]) {
            transportSentMessages[uuid].reconnectCount += 1;
        }
        console.info(exports.LOG_PREFIX + "::reconnect", "Calling triggerReconnect for transport " + TRANSPORT.transportType);
        // Initiate reconnect on the last transport that successfully sent a message
        TRANSPORT.triggerReconnect();
    };
    Messenger.prototype.getPairedQueueThresholds = function () {
        console.log('Messenger::getPairedQueueThresholds');
        var TRANSPORT = this.getLastUsedTransport();
        return TRANSPORT.getPairedQueueThresholds();
    };
    /**
     * Acknowledgment Message Received callback
     * - update statistics for the sent message
     * - send acknowledgemnt action through eventManager
     *
     * @param message
     */
    Messenger.prototype.messageAcknowledgment = function (message, acknowledgedByTransportType) {
        if (!message.data || !message.data.uuid || !message.data.acknowledgedTime) {
            console.warn(exports.LOG_PREFIX + "::messageAcknowledgment", 'Received acknowledgment with invalid data.');
            console.info(exports.LOG_PREFIX + "::messageAcknowledgment", message);
            return;
        }
        console.log('Messenger::messageAcknowledgment');
        var SKIP_ACKNOWLEDGMENT = this.trackAcknowledgment(message, acknowledgedByTransportType);
        // If we are skipping the acknowledgment we do not need to broadcast when
        // the acknowledgment is received (ex., battery update)
        if (!SKIP_ACKNOWLEDGMENT) {
            // AB todo: implement below
            //            this.eventManager.eventEmitter(messengerActions.acknowledgement(message.data));
            this.emit("message", messengerActions.initialized());
        }
    };
    Messenger.prototype.trackAcknowledgment = function (message, acknowledgedByTransportType) {
        var _this = this;
        console.log('Messenger::trackAcknowledgment');
        var _a = message.data, uuid = _a.uuid, acknowledgedTime = _a.acknowledgedTime;
        if (!(uuid in this.messageToTransports)) {
            return false;
        }
        // default to emitting the acnowledgement action until we explicitly know it's not needed
        // we do not want a message to be stuck in the paired queue
        var skipAcknowledgment = false;
        this.messageToTransports[uuid].forEach(function (transportType) {
            var transportSentMessages = _this.sentMessages[transportType];
            if (transportSentMessages && transportSentMessages[uuid]) {
                var SENT_MESSAGE = transportSentMessages[uuid];
                skipAcknowledgment = SENT_MESSAGE.skipAcknowledgment;
                // only go through this path if we haven't already seen an acknowledgment
                // and we are not skipping the acknowledgment
                if (!SENT_MESSAGE.responseTime && !skipAcknowledgment) {
                    // message exists in this transport's sent messages, update the data
                    SENT_MESSAGE.acknowledgedTime = acknowledgedTime;
                    SENT_MESSAGE.responseTime = skewAdjustedTime_1.SkewAdjustedTime.now();
                    utils_1.trackPairedMessageEvent(uuid, SENT_MESSAGE, transportType, acknowledgedByTransportType);
                }
            }
            else {
                console.info(exports.LOG_PREFIX + "::trackAcknowledgment", "Received acknowledgment on transport " + acknowledgedByTransportType + " but missing record in sent message for transport " + transportType + ".");
                console.info(exports.LOG_PREFIX + "::messageAcknowledgment", message);
            }
        });
        return skipAcknowledgment;
    };
    /**
 * Generic Message received callback
 * - pipe message through eventManager
 * - if message is a paired message, send an Acknowledgment
 *
 * @param message
 */
    Messenger.prototype.messageGeneral = function (message) {
        console.log('Messenger::messageGeneral');
        if (this.receivedMessages.has(message.uuid)) {
            console.info(exports.LOG_PREFIX + "::messageGeneral", "Message already received. uuid: " + message.uuid);
        }
        else {
            // AB todo: implement this
            // this.eventManager.eventEmitter(
            //     messengerActions.messageReceived({
            //         destination: message.destination,
            //         messageData: message.data,
            //         messageType: `ws.${message.action}`,
            //         source: message.source,
            //         webappVersion: message.webappVersion
            //     })
            // );
            this.emit("message", messengerActions.messageReceived({
                destination: message.destination,
                messageData: message.data,
                messageType: "ws." + message.action,
                source: message.source,
                webappVersion: message.webappVersion
            }));
            if (message.uuid) {
                this.receivedMessages.add(message.uuid);
            }
        }
        // If it is a paired message then we want to acknowledge
        if (message.destination) {
            this.sendPaired({
                destination: message.source,
                messageData: {
                    acknowledgedTime: skewAdjustedTime_1.SkewAdjustedTime.now(),
                    // AB todo: implement analytics
                    // sessionId: analyticsTracker.getCommonEventProperty(
                    //     AnalyticsTrackerEventProperty.SESSION_ID
                    // ),
                    sessionId: 0,
                    uuid: message.uuid
                },
                messageType: types_1.Acknowledgment,
                source: message.destination,
                webappVersion: config_1.CONFIG.VERSION.APP_VERSION
            }, {
                skipAcknowledgment: true,
                uuid: null
            });
        }
    };
    Messenger.prototype.getStatsWindowStart = function () {
        console.log('Messenger::getStatsWindowStart');
        return this.statsWindowStart;
    };
    Messenger.prototype.getSentMessages = function () {
        console.log('Messenger::getSentMessages');
        return this.sentMessages;
    };
    /**
     * Prune sent messages, and set the time of the next window to start now
     */
    Messenger.prototype.resetStats = function (endTime) {
        var _this = this;
        console.log('Messenger::resetStats');
        // delete the sent messages
        Object.entries(this.getSentMessages()).forEach(function (_a) {
            var transportType = _a[0], sentMessages = _a[1];
            Object.entries(sentMessages).forEach(function (_a) {
                var uuid = _a[0], sentMessage = _a[1];
                if (sentMessage.sentTime <= endTime) {
                    // if there is no response time then it was not acknowledged (at least on sent transport)
                    if (!sentMessage.responseTime && !sentMessage.skipAcknowledgment) {
                        utils_1.trackPairedMessageEvent(uuid, sentMessage, transportType);
                    }
                    delete _this.sentMessages[transportType][uuid];
                    delete _this.messageToTransports[uuid];
                }
            });
        });
        this.statsWindowStart = endTime;
        this.transportsMap.forEach(function (transport) {
            transport.resetStats(endTime);
        });
    };
    Messenger.prototype.getTransportStatistics = function (endTime) {
        var _a;
        console.log('Messenger::getTransportStatistics');
        return _a = {},
            _a[types_1.TransportType.UDP] = this.udpTransport.getStats(endTime),
            _a[types_1.TransportType.WEB_RTC] = this.webRtcTransport.getStats(endTime),
            _a[types_1.TransportType.WEB_SOCKET] = this.webSocketTransport.getStats(endTime),
            _a;
    };
    Messenger.prototype.applyBestTransportOrder = function (startTime, endTime, transportStatistcs) {
        console.log('Messenger::applyBestTransportOrder');
        var CURRENT_TRANSPORT_ORDER = this.transportOrder.map(function (transport) { return transport.transportType; });
        if (!CURRENT_TRANSPORT_ORDER.length) {
            return;
        }
        var CURRENT_BEST_TRANSPORT_FACTORS = this.bestTransportOrder
            ? this.bestTransportOrder.allTransportFactors.filter(function (transportFactors) {
                return transportFactors.transportType === CURRENT_TRANSPORT_ORDER[0];
            })
            : [];
        this.bestTransportOrder = bestTransportOrder_1.getBestTransportOrder(startTime, endTime, transportStatistcs, CURRENT_TRANSPORT_ORDER, CURRENT_BEST_TRANSPORT_FACTORS.length ? CURRENT_BEST_TRANSPORT_FACTORS[0] : null);
        this.setTransportOrder(this.bestTransportOrder.order);
    };
    Messenger.prototype.getBestTransportOrder = function () {
        console.log('Messenger::getBestTransportOrder');
        return this.bestTransportOrder;
    };
    Messenger.prototype.getSource = function () {
        console.log('Messenger::getSource');
        return packedApiKey_1.getPackedApiKey(this.loyaltyCredentials.apiKey);
    };
    Messenger.prototype.isReadyPaired = function () {
        console.log('Messenger::isReadyPaired');
        for (var _i = 0, _a = this.transportOrder; _i < _a.length; _i++) {
            var transport = _a[_i];
            if (transport.isReadyPaired()) {
                return true;
            }
        }
        return false;
    };
    Messenger.prototype.touchReadyTransports = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _i, _a, transport;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        console.log('Messenger::touchReadyTransports');
                        _i = 0, _a = this.transportOrder;
                        _b.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3 /*break*/, 4];
                        transport = _a[_i];
                        if (!transport.isReadyPaired()) return [3 /*break*/, 3];
                        return [4 /*yield*/, transport.touch()];
                    case 2:
                        _b.sent();
                        _b.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    Messenger.prototype.setPairedDevice = function (pairedDevice) {
        console.log('Messenger::setPairedDevice', pairedDevice);
        this.transportsMap.forEach(function (transport) {
            transport.setPairedDevice(pairedDevice);
        });
    };
    return Messenger;
}(events_1.EventEmitter));
exports.Messenger = Messenger;
