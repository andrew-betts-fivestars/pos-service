"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ready = exports.stopped = exports.pongReceived = exports.pingReceived = exports.pingSent = exports.sendRtcOffer = exports.sendRtcAnswer = exports.reconnectRequest = exports.rtcOffer = exports.rtcAnswer = exports.signalData = void 0;
// import { ActionType, createAction, getType } from 'typesafe-actions';
// import { sendPaired } from '@instore/redux/messenger/actions/paired/shared';
// import { LOG_FILTER } from '@instore/utils/actions';
// export const signalData = createAction('MESSENGER_RECEIVED_SIGNAL_DATA', resolve => (data: SimplePeer.SignalData) =>
//     resolve({ data, ...LOG_FILTER })
// );
var signalData = function (data) { return ({ action: 'MESSENGER_RECEIVED_SIGNAL_DATA', data: data }); };
exports.signalData = signalData;
// export type SignalDataAction = ActionType<typeof signalData>;
// export const rtcAnswer = createAction(
//     'MESSENGER_RECEIVE_RTC_ANSWER',
//     resolve => (signalData: SimplePeer.SignalData) => resolve({ signalData, ...LOG_FILTER })
// );
var rtcAnswer = function (signalData) { return ({ action: 'MESSENGER_RECEIVE_RTC_ANSWER', signalData: signalData }); };
exports.rtcAnswer = rtcAnswer;
// export type RtcAnswerAction = ActionType<typeof rtcAnswer>;
// export const rtcOffer = createAction(
//     'MESSENGER_RECEIVE_RTC_OFFER',
//     resolve => (signalData: SimplePeer.SignalData) => resolve({ signalData, ...LOG_FILTER })
// );
var rtcOffer = function (signalData) { return ({ action: 'MESSENGER_RECEIVE_RTC_OFFER', signalData: signalData }); };
exports.rtcOffer = rtcOffer;
// export type RtcOfferAction = ActionType<typeof rtcOffer>;
// export const reconnectRequest = createAction('MESSENGER_RTC_RECONNECT_REQUEST');
var reconnectRequest = function () { return ({ action: 'MESSENGER_RTC_RECONNECT_REQUEST' }); };
exports.reconnectRequest = reconnectRequest;
// export const sendRtcAnswer = createAction(getType(sendPaired), resolve => (signalData: SimplePeer.SignalData) =>
//     resolve({ action: 'rtc_answer', data: { signalData }, skipAcknowledgment: true, ...LOG_FILTER })
// );
var sendRtcAnswer = function (signalData) { return ({ action: 'rtc_answer', data: { signalData: signalData } }); };
exports.sendRtcAnswer = sendRtcAnswer;
// export const sendRtcOffer = createAction(getType(sendPaired), resolve => (signalData: SimplePeer.SignalData) =>
//     resolve({ action: 'rtc_offer', data: { signalData }, skipAcknowledgment: true, ...LOG_FILTER })
// );
var sendRtcOffer = function (signalData) { return ({ action: 'rtc_offer', data: { signalData: signalData } }); };
exports.sendRtcOffer = sendRtcOffer;
// export const pingSent = createAction('MESSENGER_RTC_PING_SENT', resolve => () => resolve(LOG_FILTER));
var pingSent = function () { return ({ action: 'MESSENGER_RTC_PING_SENT' }); };
exports.pingSent = pingSent;
// export const pingReceived = createAction('MESSENGER_RTC_PING_RECEIVED', resolve => (uuid: string) =>
//     resolve({ uuid, ...LOG_FILTER })
// );
var pingReceived = function (uuid) { return ({ action: 'MESSENGER_RTC_PING_RECEIVED', data: uuid }); };
exports.pingReceived = pingReceived;
// export const pongReceived = createAction('MESSENGER_RTC_PONG_RECEIVED', resolve => () => resolve(LOG_FILTER));
var pongReceived = function () { return ({ action: 'MESSENGER_RTC_PONG_RECEIVED' }); };
exports.pongReceived = pongReceived;
// export const stopped = createAction('MESSENGER_RTC_STOPPED');
var stopped = function () { return ({ action: 'MESSENGER_RTC_STOPPED' }); };
exports.stopped = stopped;
// export const ready = createAction('MESSENGER_RTC_READY');
var ready = function () { return ({ action: 'MESSENGER_RTC_READY' }); };
exports.ready = ready;
