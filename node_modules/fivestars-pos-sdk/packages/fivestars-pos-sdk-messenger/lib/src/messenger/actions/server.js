"use strict";
// import { AnyAction } from 'redux';
// import { createAction } from 'typesafe-actions';
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendWebSocketServer = void 0;
var sendWebSocketServer = function (webSocketServerParameters) {
    return {
        action: 'MESSENGER_SEND_WEBSOCKET_SERVER',
        data: {
            action: webSocketServerParameters.action,
            data: webSocketServerParameters.data,
            onSuccess: webSocketServerParameters.onSuccess
        }
    };
};
exports.sendWebSocketServer = sendWebSocketServer;
// export const sendPing = () => sendWebSocketServer({ action: 'ws.ping', data: {}, onSuccess: null });
// /**
//  * DEPRECATED.
//  *
//  * Populates the device_usage_report table in TreasureData.  New metrics and health events should
//  * be sent via sendHealthHeartbeatSnapshot and sendDeviceMetricsHeartbeat below.
//  */
// export const sendHeartbeat = (heartbeatStatistics: HeartbeatMetrics) => {
//     const { batteryState, systemStatsInfo, wifiInfo } = heartbeatStatistics;
//     return sendWebSocketServer({
//         action: 'heartbeat',
//         data: {
//             // The time in seconds since the start of the tablet
//             // minus any deep sleep time
//             android_uptime: systemStatsInfo.uptimeAndroid || 0,
//             // An average of three readings from the battery current
//             battery_current: systemStatsInfo.batteryCurrent || 0,
//             // A value between 0 to 100
//             battery_level: batteryState.batteryPercentage,
//             // An average of three readins from the battery voltage
//             battery_voltage: systemStatsInfo.batteryVoltage || 0,
//             platform: device.PLATFORM,
//             // A boolean value of true or false
//             plugged_in: batteryState.isPluggedIn,
//             // Not used
//             restart_count: 0,
//             // The time in seconds since the start of the tablet
//             // includes any deep sleep time
//             system_uptime: systemStatsInfo.uptimeSystem || 0,
//             version: device.DEVICE_VERSION,
//             // A value between 1 to 100 (100 being best)
//             wifi_level: wifiInfo.signalLevel || 1,
//             // The name for the wifi network
//             wifi_ssid: wifiInfo.ssid || ''
//         },
//         onSuccess: null
//     });
// };
// export const sendDeviceInfo = (
//     apiKey: string,
//     apiSecret: string,
//     bluetoothMacAddress: string,
//     udpPort: number,
//     deviceDescription: string,
//     color: string,
//     pairedDeviceApiKey: string | null,
//     pairedDeviceDescription: string | null,
//     pairedDeviceHardwareId: string | null
// ) =>
//     sendWebSocketServer({
//         action: 'cts_info',
//         data: {
//             apikey: apiKey,
//             apisecret: apiSecret,
//             bluetoothMacAddress,
//             color,
//             description: deviceDescription,
//             hardwareId: device.HARDWARE_ID,
//             orientation: 'landscape',
//             pairedDevice: pairedDeviceDescription,
//             pairedDeviceApiKey,
//             pairedDeviceHardwareId,
//             udpPort
//         },
//         onSuccess: null
//     });
// /**
//  * Sends device metrics to the Websocket Server, and thence to Treasuredata and
//  * Mission Control.
//  *
//  * @param table The name of the table to populate.  Should be one of the values of
//  *              deviceMetrics.ts:DeviceMetricTable.  New tables will be automatically
//  *              created for new values of this parameter.
//  * @param data A row to append to that table.
//  */
// export const sendDeviceMetricsHeartbeat = (table: string, data: object) =>
//     sendWebSocketServer({
//         action: 'device_metrics',
//         data: {
//             table,
//             ...data
//         },
//         onSuccess: null
//     });
// /**
//  * Report one or more health state changes to IHS (and thence to Alerta and Mission Control and Treasuredata)
//  * @param states A list of the health states that are changing.
//  */
// export const sendHealthStateSnapshot = (states: HealthStateDatum[]) =>
//     sendWebSocketServer({
//         action: 'health_snapshot',
//         data: {
//             event: 'state',
//             platform: device.PLATFORM,
//             start_time: SkewAdjustedTime.nowUtc(),
//             states,
//             version: CONFIG.VERSION.APP_VERSION
//         } as HealthStateSnapshot,
//         onSuccess: null
//     });
// /**
//  * Sends a single card reader health state to IHS.
//  * @param state The state to send
//  * @param cardReaderDevice The card reader type
//  */
// export const sendHealthCombinedCardReaderStateSnapshot = (
//     state: HealthStateDatum,
//     cardReaderDevice: CardReaderDevice
// ) =>
//     sendWebSocketServer({
//         action: 'health_snapshot',
//         data: {
//             attributes: { [HealthAttributeName.CARD_READER_HARDWARE_NAME]: cardReaderDevice },
//             event: 'state',
//             platform: device.PLATFORM,
//             start_time: SkewAdjustedTime.nowUtc(),
//             states: [state],
//             version: CONFIG.VERSION.APP_VERSION
//         } as HealthStateSnapshot,
//         onSuccess: null
//     });
// /**
//  * Send a periodic health heartbeat to IHS (and thence to Alerta and Mission Control and Treasuredata)
//  *
//  * @param heartbeatUuid A unique UUID for this heartbeat (ATM Machine, The El NiÃ±o, etc.)
//  * @param states The states we are reporting
//  * @param onSuccess An action to emit once the heartbeat has been successfully sent
//  */
// export const sendHealthHeartbeatSnapshot = (
//     heartbeatUuid: string,
//     states: HealthStateDatum[],
//     onSuccess: AnyAction
// ) => {
//     const data: HealthHeartbeatSnapshot = {
//         // mirror app_type from analytics tracker, which suffixes product name with _react
//         app_type: `${CONFIG.PRODUCT}_react`,
//         event: 'heartbeat',
//         heartbeat_uuid: heartbeatUuid,
//         platform: device.PLATFORM,
//         product: getExternalProductName(CONFIG.PRODUCT),
//         start_time: SkewAdjustedTime.nowUtc(),
//         states,
//         version: device.APP_VERSION,
//         webapp_version: CONFIG.VERSION.APP_VERSION
//     };
//     return sendWebSocketServer({
//         action: 'health_snapshot',
//         data,
//         onSuccess
//     });
// };
