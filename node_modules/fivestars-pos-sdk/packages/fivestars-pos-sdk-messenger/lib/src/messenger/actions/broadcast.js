"use strict";
// import { AnyAction } from 'redux';
// import { createAction } from 'typesafe-actions';
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendErroneousPairing = exports.sendBroadcast = void 0;
// // we should not be using sendBroadcast directly
// export const sendBroadcast = createAction(
//     'MESSENGER_SEND_BROADCAST',
//     resolve => (broadcastParameters: BroadcastParameters) =>
//         resolve({
//             action: broadcastParameters.action,
//             data: broadcastParameters.data,
//             onSuccess: broadcastParameters.onSuccess,
//             ...LOG_FILTER
//         })
// );
var sendBroadcast = function (broadcastParameters) {
    return {
        action: 'MESSENGER_SEND_BROADCAST',
        data: {
            action: broadcastParameters.action,
            data: broadcastParameters.data,
            onSuccess: broadcastParameters.onSuccess
        }
    };
};
exports.sendBroadcast = sendBroadcast;
// export const sendDeviceMapping = (
//     apiKey: string,
//     apiSecret: string,
//     bluetoothMacAddress: string,
//     udpPort: number,
//     deviceDescription: string,
//     hardwareId: string
// ) =>
//     sendBroadcast({
//         action: 'device_mapping',
//         data: {
//             apiKey,
//             apiSecret,
//             bluetoothMacAddress,
//             deviceDescription,
//             hardwareId,
//             udpPort
//         },
//         onSuccess: null
//     });
// export const sendPairingActive = () =>
//     sendBroadcast({
//         action: 'pairing_active',
//         data: {
//             forceCtsUI: false
//         },
//         onSuccess: null
//     });
// export const sendPairingSuccessful = (
//     ctsApiKey: string,
//     partnerApiKey: string,
//     partnerApiSecret: string,
//     partnerBluetoothMacAddress: string,
//     partnerUdpPort: number,
//     partnerDescription: string,
//     partnerHardwareId: string
// ) =>
//     sendBroadcast({
//         action: 'pairing_successful',
//         data: {
//             ctsApiKey,
//             partnerApiKey,
//             partnerApiSecret,
//             partnerBluetoothMacAddress,
//             partnerDescription,
//             partnerHardwareId,
//             partnerUdpPort
//         },
//         onSuccess: null
//     });
// export const sendUnpairingSuccessful = (destinationApiKey: string) =>
//     sendBroadcast({
//         action: 'unpairing_successful',
//         data: { destinationApiKey },
//         onSuccess: null
//     });
var sendErroneousPairing = function (erroneousDeviceApiKey, pairedDeviceApiKey) {
    return exports.sendBroadcast({
        action: 'erroneous_pairing',
        data: { erroneousDeviceApiKey: erroneousDeviceApiKey, pairedDeviceApiKey: pairedDeviceApiKey },
        onSuccess: null
    });
};
exports.sendErroneousPairing = sendErroneousPairing;
