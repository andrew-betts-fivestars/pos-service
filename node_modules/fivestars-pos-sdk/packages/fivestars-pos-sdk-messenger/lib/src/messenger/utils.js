"use strict";
// // ab todo: this file is called utils and now instore global utils is in this package, maybe refactor this soon
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMessageKey = exports.trackPairedMessageEvent = exports.constructMessageGeneral = void 0;
var _ = __importStar(require("lodash"));
// import { SagaIterator } from 'redux-saga';
// import { call, select } from 'redux-saga/effects';
var uuid_1 = require("uuid");
var config_1 = require("@fivestars-pos-sdk/config");
// export const allowPairedMessageQueue = function* () {
//     const PAIRED_MESSAGE_QUEUE_DISABLED: boolean = yield select(getPairedMessageQueueDisabled);
//     if (PAIRED_MESSAGE_QUEUE_DISABLED) {
//         return false;
//     }
//     return true;
// };
// export const constructPairedMessageDetails = function* (
//     messageData: object,
//     messageType: string
// ): SagaIterator<MessageDetails> {
//     const PAIRED_DEVICE: PairedDevice | null = yield select(getPairedDevice);
//     return {
//         destination: PAIRED_DEVICE ? getPackedApiKey(PAIRED_DEVICE.apiKey) : null,
//         messageData,
//         messageType,
//         source: yield call(state.messenger.getSource),
//         webappVersion: CONFIG.VERSION.APP_VERSION
//     };
// };
/**
 * Creates a full MessageGeneral
 *
 * Can be called with only the necessary MessageGeneral properties
 *
 * Or called using an object with MessageDetails and SendOptions to construct the MessageGeneral
 */
var constructMessageGeneral = function (input) {
    if ('messageDetails' in input) {
        var messageDetails = input.messageDetails, options = input.options;
        var uuid_2 = options && options.uuid ? options.uuid : uuid_1.v4();
        return {
            action: messageDetails.messageType,
            data: _.cloneDeep(messageDetails.messageData),
            destination: messageDetails.destination,
            source: messageDetails.source,
            uuid: uuid_2,
            webappVersion: messageDetails.webappVersion
        };
    }
    var action = input.action, _a = input.data, data = _a === void 0 ? {} : _a, _b = input.uuid, uuid = _b === void 0 ? uuid_1.v4() : _b, _c = input.destination, destination = _c === void 0 ? null : _c, _d = input.source, source = _d === void 0 ? null : _d;
    return {
        action: action,
        data: data,
        destination: destination,
        source: source,
        uuid: uuid,
        webappVersion: config_1.CONFIG.VERSION.APP_VERSION
    };
};
exports.constructMessageGeneral = constructMessageGeneral;
var trackPairedMessageEvent = function (uuid, sentMessage, sentByTransportType, acknowledgedByTransportType) {
    if (acknowledgedByTransportType === void 0) { acknowledgedByTransportType = null; }
    // analyticsTracker.track(AnalyticsTrackerEventName.PAIRED_MESSAGE, {
    //     [AnalyticsTrackerEventProperty.ACTION]: getMessageKey(sentMessage.payload.action, sentMessage.payload.data),
    //     [AnalyticsTrackerEventProperty.START_STATE]: sentByTransportType,
    //     [AnalyticsTrackerEventProperty.END_STATE]: acknowledgedByTransportType,
    //     [AnalyticsTrackerEventProperty.START_TIME]: sentMessage.sentTime,
    //     [AnalyticsTrackerEventProperty.DURATION]: sentMessage.responseTime
    //         ? Formatter.formatMstoSecs(sentMessage.responseTime - sentMessage.sentTime)
    //         : null,
    //     [AnalyticsTrackerEventProperty.STATUS]: sentMessage.responseTime ? 'acknowledged' : 'unacknowledged',
    //     [AnalyticsTrackerEventProperty.PROPERTIES]: {
    //         reconnects: sentMessage.reconnectCount,
    //         resends: sentMessage.resendCount,
    //         size: JSON.stringify(sentMessage.payload).length,
    //         uuid
    //     }
    // });
};
exports.trackPairedMessageEvent = trackPairedMessageEvent;
var getMessageKey = function (action, data) {
    return action === 'pay_status' ? "pay_status:" + data['status'] : action;
};
exports.getMessageKey = getMessageKey;
// export const applyBestTransportOrder = (
//     startTime: number,
//     endTime: number,
//     transportStatistics: TransportStatistics
// ): void => {
//     state.messenger.applyBestTransportOrder(startTime, endTime, transportStatistics);
// };
