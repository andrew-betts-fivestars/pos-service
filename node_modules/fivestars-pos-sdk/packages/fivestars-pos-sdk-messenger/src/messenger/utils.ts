// // ab todo: this file is called utils and now instore global utils is in this package, maybe refactor this soon

import * as _ from 'lodash'
import { 
    AnalyticsTrackerEventName,
    AnalyticsTrackerEventProperty,
    MessageDetails, 
    MessageGeneral,
    SendOptions,
    SentMessage,
    TransportStatistics,
    TransportType,
    WithOptional 
} from '@fivestars-pos-sdk/types'
//import { analyticsTracker } from './utils/analyticsTracker'
import { Formatter } from './utils/formatter'
// import { SagaIterator } from 'redux-saga';
// import { call, select } from 'redux-saga/effects';
import { v4 as GUUID } from 'uuid'
import { CONFIG } from '@fivestars-pos-sdk/config'
// import { TransportType } from '@instore/middleware/messenger/types';
// import { getPairedMessageQueueDisabled } from '@instore/redux/features/selectors';
// import {
//     MessageDetails,
//     MessageGeneral,
//     SendOptions,
//     SentMessage,
//     TransportStatistics
// } from '@instore/redux/messenger/types';
// import { getPairedDevice } from '@instore/redux/pairing/selectors';
// import { PairedDevice } from '@instore/redux/pairing/types';
// import { analyticsTracker } from '@instore/utils/analyticsTracker';
// import { AnalyticsTrackerEventName, AnalyticsTrackerEventProperty } from '@instore/utils/enums';
// import { Formatter } from '@instore/utils/formatter';
// import { getPackedApiKey } from '@instore/utils/packedApiKey';
// import { WithOptional } from '@instore/utils/types';

// import { state } from './state';

// export const LOG_PREFIX = 'MessengerSagas';

// /**
//  * webAppVersion to be filled out internally
//  *
//  * data, destination, uuid, source:  all have defaults, but can be supplied
//  */
type MessageGeneralArgs = WithOptional<
    Omit<MessageGeneral, 'webappVersion'>,
    'data' | 'destination' | 'uuid' | 'source'
>;

// export const allowPairedMessageQueue = function* () {
//     const PAIRED_MESSAGE_QUEUE_DISABLED: boolean = yield select(getPairedMessageQueueDisabled);

//     if (PAIRED_MESSAGE_QUEUE_DISABLED) {
//         return false;
//     }

//     return true;
// };

// export const constructPairedMessageDetails = function* (
//     messageData: object,
//     messageType: string
// ): SagaIterator<MessageDetails> {
//     const PAIRED_DEVICE: PairedDevice | null = yield select(getPairedDevice);
//     return {
//         destination: PAIRED_DEVICE ? getPackedApiKey(PAIRED_DEVICE.apiKey) : null,
//         messageData,
//         messageType,
//         source: yield call(state.messenger.getSource),
//         webappVersion: CONFIG.VERSION.APP_VERSION
//     };
// };

/**
 * Creates a full MessageGeneral
 *
 * Can be called with only the necessary MessageGeneral properties
 *
 * Or called using an object with MessageDetails and SendOptions to construct the MessageGeneral
 */
export const constructMessageGeneral = (
    input: MessageGeneralArgs | { messageDetails: MessageDetails; options?: SendOptions }
): MessageGeneral => {
    if ('messageDetails' in input) {
        const { messageDetails, options } = input;
        const uuid: string = options && options.uuid ? options.uuid : GUUID();

        return {
            action: messageDetails.messageType,
            data: _.cloneDeep(messageDetails.messageData),
            destination: messageDetails.destination,
            source: messageDetails.source,
            uuid,
            webappVersion: messageDetails.webappVersion
        };
    }

    const { action, data = {}, uuid = GUUID(), destination = null, source = null } = input;

    return {
        action,
        data,
        destination,
        source,
        uuid,
        webappVersion: CONFIG.VERSION.APP_VERSION
    };
};

export const trackPairedMessageEvent = (
    uuid: string,
    sentMessage: SentMessage,
    sentByTransportType: TransportType,
    acknowledgedByTransportType: TransportType | null = null
): void => {
    // analyticsTracker.track(AnalyticsTrackerEventName.PAIRED_MESSAGE, {
    //     [AnalyticsTrackerEventProperty.ACTION]: getMessageKey(sentMessage.payload.action, sentMessage.payload.data),
    //     [AnalyticsTrackerEventProperty.START_STATE]: sentByTransportType,
    //     [AnalyticsTrackerEventProperty.END_STATE]: acknowledgedByTransportType,
    //     [AnalyticsTrackerEventProperty.START_TIME]: sentMessage.sentTime,
    //     [AnalyticsTrackerEventProperty.DURATION]: sentMessage.responseTime
    //         ? Formatter.formatMstoSecs(sentMessage.responseTime - sentMessage.sentTime)
    //         : null,
    //     [AnalyticsTrackerEventProperty.STATUS]: sentMessage.responseTime ? 'acknowledged' : 'unacknowledged',
    //     [AnalyticsTrackerEventProperty.PROPERTIES]: {
    //         reconnects: sentMessage.reconnectCount,
    //         resends: sentMessage.resendCount,
    //         size: JSON.stringify(sentMessage.payload).length,
    //         uuid
    //     }
    // });
};

export const getMessageKey = (action: string, data: Record<string, unknown>): string => {
    return action === 'pay_status' ? `pay_status:${data['status']}` : action;
};

// export const applyBestTransportOrder = (
//     startTime: number,
//     endTime: number,
//     transportStatistics: TransportStatistics
// ): void => {
//     state.messenger.applyBestTransportOrder(startTime, endTime, transportStatistics);
// };

