// import { ActionType, createAction } from 'typesafe-actions';

// import { TransportType } from '@instore/middleware/messenger/types';
// import { LOG_FILTER } from '@instore/utils/actions';

import {
    MessageDetails
} from '@fivestars-pos-sdk/types'

// import { Acknowledgment, MessageDetails } from '../types';
// import * as _bluetooth from './transports/bluetooth';
import * as _udp from './transports/udp';
import * as _webRtc from './transports/webRtc';
import * as _webSocket from './transports/webSocket';

/**
 * Export all actions directly, shouldn't ever need to import from anything lower than the /actions level
 */
export * from './paired';
export * from './broadcast';
export * from './server';

// export const bluetooth = _bluetooth;

export const udp = _udp;

export const webRtc = _webRtc;

export const webSocket = _webSocket;
// export type WebSocketActions = ActionType<typeof webSocket>;

// export const messageReceived = createAction(
//     'MESSENGER_MESSAGE_RECEIVED',
//     resolve => (messageDetails: MessageDetails) => resolve({ messageDetails, ...LOG_FILTER })
// );
export const messageReceived = (messageDetails: MessageDetails) => {
    return { action: 'MESSENGER_MESSAGE_RECEIVED', data: messageDetails }
};

// export const acknowledgement = createAction(
//     'MESSENGER_ACKNOWLEDGEMENT',
//     resolve => (acknowledgement: Acknowledgment) => resolve({ acknowledgement, ...LOG_FILTER })
// );

// export const sessionMismatch = createAction(
//     'MESSENGER_SESSION_MISMATCH',
//     resolve => (thisDeviceSessionId: string | null, pairedDeviceSessionId: string | null) =>
//         resolve({ pairedDeviceSessionId, thisDeviceSessionId })
// );

// export const erroneousPairing = createAction(
//     'MESSENGER_ERRONEOUS_PAIRING',
//     resolve => (thisDeviceApiKey: string, erroneouslyPairedDeviceApiKey: string) =>
//         resolve({ erroneouslyPairedDeviceApiKey, thisDeviceApiKey })
// );
export const erroneousPairing = (thisDeviceApiKey: string, erroneouslyPairedDeviceApiKey: string) => ({
    action: 'MESSENGER_ERRONEOUS_PAIRING',
    data: { erroneouslyPairedDeviceApiKey, thisDeviceApiKey }
})

// export const clearPairedMessageQueue = createAction('MESSENGER_CLEAR_PAIRED_MESSAGE_QUEUE');

// export const pairedQueueIssueReconnect = createAction('MESSENGER_PAIRED_QUEUE_ISSUE_RECONNECT');

// export const receivedStartFinished = createAction('MESSENGER_RECEIVED_START_FINISHED');

// export const resetStats = createAction('MESSENGER_RESET_STATS', resolve => (endTime: number) =>
//     resolve({ endTime })
// );

// export const switchTransport = createAction(
//     'MESSENGER_SWITCH_TRANSPORT',
//     resolve => (obj: { from: TransportType; to: TransportType }) => resolve({ ...obj })
// );

// /**
//  * Dispatched from outage tracking
//  */
// export const messengerUp = createAction('MESSENGER_MESSENGER_UP');
// export const messengerDown = createAction('MESSENGER_MESSENGER_DOWN');

// /**
//  * Action used to kick-start outage tracking check when a paired message fails to send off of the queue.
//  * Transports are likely all exhausted at this point, however the outage tracking only periodically (30 seconds)
//  * checks the state of messenger's ability to send messages
//  */
// export const pairedQueueSendFailed = createAction('MESSENGER_PAIRED_QUEUE_SEND_FAILED');

// export const initialized = createAction('MESSENGER_INITIALIZED');
export const initialized = () => ({action:'MESSENGER_INITIALIZED'})
