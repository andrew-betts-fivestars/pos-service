// import { AnyAction } from 'redux';
// import { createAction } from 'typesafe-actions';

// import { CONFIG } from '@app/config';
// import { ProxiedApiRequest, ProxiedApiResponse } from '@instore/middleware/api/types';
// import { AlertSynchPayload } from '@instore/redux/alert/types';
// import { OfflineStatus } from '@instore/redux/offline/types';
// import { DEFAULT_TRANSACTION_OPTIONS, ITransactionOptions } from '@instore/redux/transaction/types';
// import { LOG_FILTER } from '@instore/utils/actions';
// import { ClientFeatures, ShutdownReason } from '@instore/utils/enums';
// import { InternetStatus } from '@instore/utils/internetStatus';

export type PairedParameters = {
    action: string;
    confirmation: null;
    data: any;
    skipAcknowledgment: boolean;
};

// // we should not be using sendPaired directly
// export const sendPaired = createAction('MESSENGER_SEND_PAIRED', resolve => (pairedParameters: PairedParameters) =>
//     resolve({
//         action: pairedParameters.action,
//         confirmation: pairedParameters.confirmation,
//         data: pairedParameters.data,
//         skipAcknowledgment: pairedParameters.skipAcknowledgment,
//         ...LOG_FILTER
//     })
// );
export const sendPaired = (pairedParameters: PairedParameters) => {
    return {
        action: 'MESSENGER_SEND_PAIRED',
        data: {
            action: pairedParameters.action,
            confirmation: pairedParameters.confirmation,
            data: pairedParameters.data,
            skipAcknowledgment: pairedParameters.skipAcknowledgment
        }
    }
}

// export const sendStartFinished = () =>
//     sendPaired({ action: 'start_finished', confirmation: null, data: {}, skipAcknowledgment: true });

// export const sendAbortTransaction = (options?: Partial<ITransactionOptions>) =>
//     sendPaired({
//         action: 'pay_abort_transaction',
//         confirmation: null,
//         data: {
//             options: {
//                 ...DEFAULT_TRANSACTION_OPTIONS,
//                 ...options
//             }
//         },
//         skipAcknowledgment: true
//     });

// export const sendMessengerVersion = () =>
//     sendPaired({
//         action: 'web_socket_version',
//         confirmation: null,
//         data: { version: CONFIG.MESSENGER.VERSION },
//         skipAcknowledgment: true
//     });

// export const sendShutdown = (shutdownReason: ShutdownReason) =>
//     sendPaired({
//         action: 'shutdown',
//         confirmation: null,
//         data: { shutdownReason },
//         skipAcknowledgment: true
//     });

// export const sendInternetStatus = (internetStatus: InternetStatus) =>
//     sendPaired({
//         action: 'internet_status',
//         confirmation: null,
//         data: { internetStatus, product: CONFIG.PRODUCT },
//         skipAcknowledgment: true
//     });

// export const sendOfflineStatus = (offlineStatus: OfflineStatus, inTransaction: boolean) =>
//     sendPaired({
//         action: 'offline_status',
//         confirmation: null,
//         data: { offlineStatus, product: CONFIG.PRODUCT },
//         skipAcknowledgment: !inTransaction
//     });

// export const sendClientFeatures = (
//     clientFeatures: ClientFeatures[],
//     skipAcknowledgment: { skipAcknowledgment: boolean }
// ) =>
//     sendPaired({
//         action: 'client_features',
//         confirmation: null,
//         data: { clientFeatures },
//         skipAcknowledgment: skipAcknowledgment.skipAcknowledgment
//     });

// export const sendProxiedApiRequest = (proxiedApiRequest: ProxiedApiRequest) =>
//     sendPaired({
//         action: 'proxied_api_request_v2',
//         confirmation: null,
//         data: { proxiedApiRequest },
//         skipAcknowledgment: true
//     });

// export const sendProxiedApiResponse = (proxiedApiResponse: ProxiedApiResponse) =>
//     sendPaired({
//         action: 'proxied_api_response_v2',
//         confirmation: null,
//         data: { proxiedApiResponse },
//         skipAcknowledgment: true
//     });

// export const sendActiveAlerts = (alerts: AlertSynchPayload[]) =>
//     sendPaired({
//         action: 'active_alerts',
//         confirmation: null,
//         data: { alerts },
//         skipAcknowledgment: false
//     });
