// import * as moment from 'moment';

// import { StartPaymentOptions } from '@instore/redux/merchant/types';
// import {
//     DEFAULT_TRANSACTION_OPTIONS,
//     ITransactionOptions,
//     TransactionType
// } from '@instore/redux/transaction/types';
// import { PaymentTypes, ShutdownReason } from '@instore/utils/enums';

// import { sendPaired } from './shared';

// export const sendPayReceiptTotal = (
//     total: number,
//     paymentType: PaymentTypes,
//     options: ITransactionOptions,
//     transactionTotalUid: string | null
// ) =>
//     sendPaired({
//         action: 'pay_receipt_total',
//         confirmation: null,
//         data: {
//             // isManualTransaction kept for backwards-compatability
//             isManualTransaction: options.manualTransaction,

//             options,

//             paymentType,

//             total,
//             transactionTotalUid
//         },
//         skipAcknowledgment: false
//     });

// export const sendPayReceiptUpdate = (total: number, isReward: boolean, options?: Partial<ITransactionOptions>) =>
//     sendPaired({
//         action: 'pay_receipt_update',
//         confirmation: null,
//         data: {
//             isReward,
//             options: {
//                 ...DEFAULT_TRANSACTION_OPTIONS,
//                 ...options
//             },
//             total
//         },
//         skipAcknowledgment: false
//     });

// export const sendPayPaymentTypeUpdate = (paymentType: PaymentTypes) =>
//     sendPaired({
//         action: 'pay_payment_type_update',
//         confirmation: null,
//         data: { paymentType },
//         skipAcknowledgment: false
//     });

// export const sendPayRefundRequest = (
//     total: number,
//     isManualTransaction: boolean,
//     transactionTotalUid: string | null
// ) =>
//     sendPaired({
//         action: 'pay_refund_request',
//         confirmation: null,
//         data: { isManualTransaction, total, transactionTotalUid },
//         skipAcknowledgment: false
//     });

// export const sendRewardAborted = () =>
//     sendPaired({ action: 'pay_reward_aborted', confirmation: null, data: {}, skipAcknowledgment: false });

// export const sendPayRewardApplied = () =>
//     sendPaired({ action: 'pay_reward_applied', confirmation: null, data: {}, skipAcknowledgment: false });

// export const sendPaySkipUser = () =>
//     sendPaired({ action: 'pay_skip_user_action', confirmation: null, data: {}, skipAcknowledgment: false });

// export const sendPayCashTendered = (cashAmount: number) =>
//     sendPaired({
//         action: 'pay_cash_tendered',
//         confirmation: null,
//         data: { cashAmount },
//         skipAcknowledgment: false
//     });

// export const sendNotDuplicateTransaction = () =>
//     sendPaired({ action: 'not_duplicate_transaction', confirmation: null, data: {}, skipAcknowledgment: false });

// // Handshake
// export const sendTransactionStartRequest = (sessionId: string, transactionType: TransactionType) =>
//     sendPaired({
//         action: 'transaction_start_request',
//         confirmation: null,
//         data: {
//             sessionId,
//             transactionType
//         },
//         skipAcknowledgment: false
//     });

// export const sendSessionId = (sessionId: string) =>
//     sendPaired({
//         action: 'session_id',
//         confirmation: null,
//         data: { sessionId },
//         skipAcknowledgment: false
//     });

// export const sendRefundProcessing = () =>
//     sendPaired({ action: 'merchant_refund_processing', confirmation: null, data: {}, skipAcknowledgment: false });

// export const sendGroupRefundProcessing = () =>
//     sendPaired({
//         action: 'merchant_group_refund_processing',
//         confirmation: null,
//         data: {},
//         skipAcknowledgment: false
//     });

// export const sendRefundSucceeded = () =>
//     sendPaired({ action: 'merchant_refund_succeeded', confirmation: null, data: {}, skipAcknowledgment: false });

// export const sendRefundFailed = () =>
//     sendPaired({ action: 'merchant_refund_failed', confirmation: null, data: {}, skipAcknowledgment: false });

// export const enterGroupRefund = () =>
//     sendPaired({ action: 'merchant_enter_group_refund', confirmation: null, data: {}, skipAcknowledgment: false });

// export const exitGroupRefund = () =>
//     sendPaired({ action: 'merchant_exit_group_refund', confirmation: null, data: {}, skipAcknowledgment: false });

// export const enterTransactionList = () =>
//     sendPaired({
//         action: 'merchant_enter_transaction_list',
//         confirmation: null,
//         data: {},
//         skipAcknowledgment: false
//     });

// export const exitTransactionList = () =>
//     sendPaired({
//         action: 'merchant_exit_transaction_list',
//         confirmation: null,
//         data: {},
//         skipAcknowledgment: false
//     });

// export const sendMerchantKeyedEntryTransactionComplete = (transactionUid: string) =>
//     sendPaired({
//         action: 'merchant_keyed_entry_transaction_complete',
//         confirmation: null,
//         data: {
//             transactionUid
//         },
//         skipAcknowledgment: false
//     });

// export const sendMerchantKeyedEntryInputComplete = (accountUid: string, cardUid: string) =>
//     sendPaired({
//         action: 'merchant_keyed_entry_input_complete',
//         confirmation: null,
//         data: {
//             accountUid,
//             cardUid
//         },
//         skipAcknowledgment: false
//     });

// export const sendMerchantClearCardError = () =>
//     sendPaired({
//         action: 'merchant_clear_card_error',
//         confirmation: null,
//         data: {},
//         skipAcknowledgment: false
//     });

// export const enterSplitPayment = () =>
//     sendPaired({ action: 'merchant_enter_split_payment', confirmation: null, data: {}, skipAcknowledgment: false });

// export const exitSplitPayment = () =>
//     sendPaired({ action: 'merchant_exit_split_payment', confirmation: null, data: {}, skipAcknowledgment: false });

// export const continueSplitPayment = () =>
//     sendPaired({
//         action: 'merchant_continue_split_payment',
//         confirmation: null,
//         data: {},
//         skipAcknowledgment: false
//     });

// /**
//  * In a split payment, we need to confirm that the user would like to abort all of the transactions
//  * that have been completed.  These websocket messages are to relay to cpay that an abort is pending,
//  * or that and abort has been cancelled.
//  */
// export const splitPaymentAbortPending = () =>
//     sendPaired({
//         action: 'merchant_split_payment_abort_pending',
//         confirmation: null,
//         data: {},
//         skipAcknowledgment: false
//     });

// export const splitPaymentAbortCancelled = () =>
//     sendPaired({
//         action: 'merchant_split_payment_abort_cancelled',
//         confirmation: null,
//         data: {},
//         skipAcknowledgment: false
//     });

// /**
//  * In a split payment, mPay needs to inform cPay at the end of a split if it is the final split. We will
//  * send it if it is either the final split, or at the end of a regular transaction.
//  */
// export const sendFinalPaymentComplete = () =>
//     sendPaired({
//         action: 'merchant_final_payment_complete',
//         confirmation: null,
//         data: {},
//         skipAcknowledgment: false
//     });

// // tell cpay to set the shutdown alert
// export const sendShutdownAlert = (shutdownTime: moment.Moment) =>
//     sendPaired({
//         action: 'shutdown_alert',
//         confirmation: null,
//         data: { shutdownTime },
//         skipAcknowledgment: true
//     });

// // tell cpay to cancel the shutdown alert
// export const sendCancelShutdownAlert = () =>
//     sendPaired({
//         action: 'cancel_shutdown_alert',
//         confirmation: null,
//         data: {},
//         skipAcknowledgment: true
//     });

// // ask cPay to shut down
// export const sendShutdownRequest = (shutdownReason: ShutdownReason) =>
//     sendPaired({
//         action: 'shutdown_request',
//         confirmation: null,
//         data: { shutdownReason },
//         skipAcknowledgment: true
//     });

// // explicit nfc flag is used to determine whether we show the tap option
// // when edynamo is down. This must be enabled by the merchant on a per
// // transaction basis.
// export const sendExplicitNfc = () =>
//     sendPaired({
//         action: 'explicit_nfc',
//         confirmation: null,
//         data: {},
//         skipAcknowledgment: false
//     });
// /**
//  * In early checkin we send over a total to be approved before actually
//  * starting the transaction flow
//  */
// export const sendPendingPayment = (pendingPayment: StartPaymentOptions) =>
//     sendPaired({
//         action: 'pay_pending_payment',
//         confirmation: null,
//         data: { pendingPayment },
//         skipAcknowledgment: false
//     });

// export const sendEarlyCheckinRewardApplied = (pendingPayment: StartPaymentOptions) =>
//     sendPaired({
//         action: 'pay_early_checkin_reward_applied',
//         confirmation: null,
//         data: { pendingPayment },
//         skipAcknowledgment: false
//     });

// export const sendEarlyCheckinMerchantDone = (paymentType: PaymentTypes) =>
//     sendPaired({
//         action: 'pay_early_checkin_merchant_done',
//         confirmation: null,
//         data: { paymentType },
//         skipAcknowledgment: false
//     });

// export const sendEarlyCheckinSwitchToCash = () =>
//     sendPaired({
//         action: 'pay_early_checkin_switch_to_cash',
//         confirmation: null,
//         data: {},
//         skipAcknowledgment: false
//     });
