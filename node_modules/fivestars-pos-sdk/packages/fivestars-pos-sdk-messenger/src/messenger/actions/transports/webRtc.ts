import * as SimplePeer from 'simple-peer';
// import { ActionType, createAction, getType } from 'typesafe-actions';

// import { sendPaired } from '@instore/redux/messenger/actions/paired/shared';
// import { LOG_FILTER } from '@instore/utils/actions';

// export const signalData = createAction('MESSENGER_RECEIVED_SIGNAL_DATA', resolve => (data: SimplePeer.SignalData) =>
//     resolve({ data, ...LOG_FILTER })
// );
export const signalData = (data: SimplePeer.SignalData): Record<string, unknown> => ({ action: 'MESSENGER_RECEIVED_SIGNAL_DATA', data })
// export type SignalDataAction = ActionType<typeof signalData>;

// export const rtcAnswer = createAction(
//     'MESSENGER_RECEIVE_RTC_ANSWER',
//     resolve => (signalData: SimplePeer.SignalData) => resolve({ signalData, ...LOG_FILTER })
// );
export const rtcAnswer = (signalData: SimplePeer.SignalData): Record<string, unknown> => ({ action: 'MESSENGER_RECEIVE_RTC_ANSWER', signalData })
// export type RtcAnswerAction = ActionType<typeof rtcAnswer>;

// export const rtcOffer = createAction(
//     'MESSENGER_RECEIVE_RTC_OFFER',
//     resolve => (signalData: SimplePeer.SignalData) => resolve({ signalData, ...LOG_FILTER })
// );
export const rtcOffer = (signalData: SimplePeer.SignalData): Record<string, unknown> => ({ action: 'MESSENGER_RECEIVE_RTC_OFFER', signalData })
// export type RtcOfferAction = ActionType<typeof rtcOffer>;

// export const reconnectRequest = createAction('MESSENGER_RTC_RECONNECT_REQUEST');
export const reconnectRequest = (): Record<string, unknown> => ({ action: 'MESSENGER_RTC_RECONNECT_REQUEST' })

// export const sendRtcAnswer = createAction(getType(sendPaired), resolve => (signalData: SimplePeer.SignalData) =>
//     resolve({ action: 'rtc_answer', data: { signalData }, skipAcknowledgment: true, ...LOG_FILTER })
// );
export const sendRtcAnswer = (signalData: SimplePeer.SignalData): Record<string, unknown> => ({ action: 'rtc_answer', data: { signalData }})

// export const sendRtcOffer = createAction(getType(sendPaired), resolve => (signalData: SimplePeer.SignalData) =>
//     resolve({ action: 'rtc_offer', data: { signalData }, skipAcknowledgment: true, ...LOG_FILTER })
// );
export const sendRtcOffer = (signalData: SimplePeer.SignalData): Record<string, unknown> => ({ action: 'rtc_offer', data: { signalData }})

// export const pingSent = createAction('MESSENGER_RTC_PING_SENT', resolve => () => resolve(LOG_FILTER));
export const pingSent = (): Record<string, unknown> => ({ action: 'MESSENGER_RTC_PING_SENT'})

// export const pingReceived = createAction('MESSENGER_RTC_PING_RECEIVED', resolve => (uuid: string) =>
//     resolve({ uuid, ...LOG_FILTER })
// );
export const pingReceived = (uuid: string): Record<string, unknown> => ({ action: 'MESSENGER_RTC_PING_RECEIVED', data: uuid })

// export const pongReceived = createAction('MESSENGER_RTC_PONG_RECEIVED', resolve => () => resolve(LOG_FILTER));
export const pongReceived = (): Record<string, unknown> => ({ action: 'MESSENGER_RTC_PONG_RECEIVED' })

// export const stopped = createAction('MESSENGER_RTC_STOPPED');
export const stopped = (): Record<string, unknown> => ({ action: 'MESSENGER_RTC_STOPPED' })

// export const ready = createAction('MESSENGER_RTC_READY');
export const ready = (): Record<string, unknown> => ({ action: 'MESSENGER_RTC_READY' })
