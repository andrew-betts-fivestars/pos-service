// import { call, cancel, delay, fork, race, take } from 'redux-saga/effects';
// import { ActionType } from 'typesafe-actions';

// import { CONFIG } from '@app/config';
// import { state } from '@instore/middleware/messenger/state';
// import * as messengerActions from '@instore/redux/messenger/actions';

// export function* sendPing() {
//     for (;;) {
//         yield take(messengerActions.webRtc.ready);
//         const PING_TASK = yield fork(_sendPing);
//         yield take(messengerActions.webRtc.stopped);
//         yield cancel(PING_TASK);
//     }
// }

// export function* _sendPing() {
//     for (;;) {
//         yield delay(CONFIG.MESSENGER.PING_FREQUENCY_IN_MS);
//         yield call(state.messenger.webRtcTransport.sendPing);
//     }
// }

// export function* sendPong(action: ActionType<typeof messengerActions.webRtc.pingReceived>) {
//     yield call(state.messenger.webRtcTransport.sendPong, action.payload.uuid);
// }

// /*
//  * There can be a delay closing the WebRTC connection when WiFi is turned off.
//  * The intent of this function is to quickly identify when WebRTC is not available
//  * by using the pong response to a ping as confirmation the conduit is functioning.
//  * Note: It is likely upgrading the simple-peer library would help but that depends
//  *       on getting WinPay off of Chrome 49.
//  */
// export function* reconnectOnPongTimeout() {
//     const WAIT_IN_MS = 10000;
//     const RECONNECT_PONG_TIMEOUTS = 1;
//     let pongTimeouts = 0;

//     for (;;) {
//         yield take(messengerActions.webRtc.pingSent);
//         const RESULT = yield race({
//             pongReceived: take(messengerActions.webRtc.pongReceived),
//             timeout: delay(WAIT_IN_MS)
//         });

//         if ('timeout' in RESULT) {
//             pongTimeouts += 1;

//             if (pongTimeouts === RECONNECT_PONG_TIMEOUTS && state.messenger.webRtcTransport.isReadyPaired()) {
//                 state.messenger.webRtcTransport.triggerReconnect();
//             }
//         } else {
//             pongTimeouts = 0;
//         }
//     }
// }
