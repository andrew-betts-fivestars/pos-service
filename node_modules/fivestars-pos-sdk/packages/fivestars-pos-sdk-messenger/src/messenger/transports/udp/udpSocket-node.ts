const dgram = require('dgram')
import { CONFIG } from '@fivestars-pos-sdk/config'
import { DgramModule, UdpEvent } from '@fivestars-pos-sdk/types'
import { Product } from '../../utils/enums'

export const LOG_PREFIX = 'UdpSocket (node)'

export class UdpSocket {
    static DEFAULT_PORT = 49152;
    static IS_BROADCAST = true;
    static BROADCAST_IP = '255.255.255.255';
    public server: any;

    constructor() {}

    public open(port: number): Promise<void> {
        console.info(`${LOG_PREFIX}::open`, port);
//        if (CONFIG.PRODUCT === Product.WINPAY) {
            return new Promise((resolve, reject) => {
                // creating a udp server
                this.server = dgram.createSocket("udp4");
                this.server.bind(port);
            });
//        }

        return Promise.resolve();
    }

    public listen(
            onMessage: (updEvent: UdpEvent) => void,
            onError: (errorMessage: string) => void
        ): void {
        console.info(`${LOG_PREFIX}::listen`);
//        if (CONFIG.PRODUCT === Product.WINPAY) {
            this.server.on('error', (error: Error) => {
                console.info(`${LOG_PREFIX}::on error`)              
                onError(JSON.stringify(error))
                this.server.close()
            })
            this.server.on('message', (msg: Record<string, number>, info: Record<string, number>) => {
                // console.info(`${LOG_PREFIX}::on message`)
                // console.log('Data received from client : ' + msg.toString())
                // console.log('Received %d bytes from %s:%d\n',msg.length, info.address, info.port)
                // onMessage(msg)
            })
//        }            
    }

    public send(message: string, address: string, port: number): Promise<void> {
        console.info(`${LOG_PREFIX}::send ${message} ${address} ${port}`    );
//        if (CONFIG.PRODUCT === Product.WINPAY) {
            return new Promise((resolve, reject) => {
            /*
                msg <Buffer> | <TypedArray> | <DataView> | <string> | <Array> Message to be sent.
                offset <integer> Offset in the buffer where the message starts.
                length <integer> Number of bytes in the message.
                port <integer> Destination port.
                address <string> Destination host name or IP address.
                callback <Function> Called when the message has been sent.
            **/
                this.server.send(message, 0, message.length, port, address, (error: Error) => {
                    if (error) {
                        console.info(`${LOG_PREFIX}::send error`, error)
                        this.server.close()
                    } else {
                        console.info(`${LOG_PREFIX}::send Data sent !!!`)
                    }
                })
            })
//        }
    }

    public close(): Promise<void> {
        console.info(`${LOG_PREFIX}::close`)
//        if (CONFIG.PRODUCT === Product.WINPAY) {
            return new Promise((resolve, reject) => {
                this.server.close()
            })
//        }
    }
}
