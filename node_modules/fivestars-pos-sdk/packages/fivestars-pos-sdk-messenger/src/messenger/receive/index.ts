// import { Channel } from 'redux-saga';
// import { call, put, take } from 'redux-saga/effects';
// import { getType } from 'typesafe-actions';

// import { acknowledgePairedMessage } from '@instore/middleware/messenger/pairedQueue';
// import { MessageHandler } from '@instore/middleware/messenger/receive/messageHandler';
// import * as messengerActions from '@instore/redux/messenger/actions';
// import { MessengerAction } from '@instore/redux/messenger/types';
// import { EventManager } from '@instore/utils/eventManager';
// import { log } from '@instore/utils/log';

// export const LOG_PREFIX = 'Communication::receive';

// /**
//  * Saga that takes actions emitted on the redux-saga channel that the messenger uses.
//  * Handles
//  *  - incoming messages (broadcasts and from the paired device)
//  *  - actions coming from Transport implementations
//  *
//  * @param eventManger
//  */
// export const receiveMessage = function* (eventManger: EventManager) {
//     const CHANNEL = eventManger.channel as Channel<messengerActions.WebSocketActions | MessengerAction>;

//     for (;;) {
//         const ACTION: messengerActions.WebSocketActions | MessengerAction = yield take(CHANNEL);
//         yield call(_messageHandler, ACTION);
//     }
// };

// export const _messageHandler = function* (action: MessengerAction | messengerActions.WebSocketActions) {
//     try {
//         switch (action.type) {
//             case getType(messengerActions.messageReceived):
//                 yield call(MessageHandler.process, action);
//                 break;
//             case getType(messengerActions.acknowledgement):
//                 yield call(acknowledgePairedMessage, action.payload.acknowledgement);
//                 break;
//         }
//         yield put(action);
//     } catch (error) {
//         console.info(`${LOG_PREFIX}::_messageHandler`, `Failed to process message ${action.type}`);
//         console.warn(`${LOG_PREFIX}::_messageHandler`, error);
//     }
// };
