// import { AnyAction } from 'redux';
// import { SagaIterator } from 'redux-saga';
// import { call, put } from 'redux-saga/effects';
// import { ActionType } from 'typesafe-actions';

// import { CONFIG } from '@app/config';
// import { state } from '@instore/middleware/messenger/state';
// import * as messengerActions from '@instore/redux/messenger/actions';
// import { MessageDetails } from '@instore/redux/messenger/types';
// import { log } from '@instore/utils/log';

export const LOG_PREFIX = 'Communication::Send::broadcast';

// type BroadcastAction = ActionType<
//     typeof messengerActions.sendBroadcast | typeof messengerActions.sendWebSocketServer
// >;

// /*
//  * Saga: Supports sending message to all devices or the server
//  */
// export const processBroadcastMessage = function* (action: BroadcastAction) {
//     const MESSAGE_DETAILS: MessageDetails = {
//         // destination and version are only for paired messages
//         destination: null,
//         messageData: action.payload.data,
//         messageType: action.payload.action,
//         source: yield call(state.messenger.getSource),
//         webappVersion: CONFIG.VERSION.APP_VERSION
//     };
//     yield call(sendBroadcastMessage, MESSAGE_DETAILS, action.payload.onSuccess);
// };

// export const sendBroadcastMessage = function* (
//     messageDetails: MessageDetails,
//     onSuccess: AnyAction | null
// ): SagaIterator<void> {
//     const RESULT: string | null = yield call(state.messenger.sendBroadcast, messageDetails);
//     const SUCCESS: boolean = RESULT !== null;

//     if (SUCCESS && onSuccess) {
//         yield put(onSuccess);
//     } else if (!SUCCESS) {
//         // Broadcast messages are things like the heartbeat,
//         // so if they fail to be sent (indicated by a return of null)
//         // it does not impact the running of transactions.
//         // These types of messages are re-sent by their generating
//         // process periodically.  Other examples are the
//         // protocol-version message and the cts-info message.
//         console.info(`${LOG_PREFIX}::sendBroadcastMessage`, 'Failed to send broadcast message');
//         console.info(`${LOG_PREFIX}::sendBroadcastMessage`, messageDetails);
//     }
// };
