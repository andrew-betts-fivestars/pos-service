//import { AnyAction } from 'redux';
//import { call } from 'redux-saga/effects';

//import { Messenger } from '@instore/middleware/messenger/messenger';
//import { MessageDetails } from '@instore/redux/messenger/types';
import { MessageDetails } from '@fivestars-pos-sdk/types'

//import { createEventManager, EventManager } from '@instore/utils/eventManager';

//import { receiveMessage } from './receive'
//import { BluetoothTransport } from './transports/bluetooth/bluetoothTransport';
//import { UdpTransport } from './transports/udp/udpTransport';
import { WebRtcTransport } from './transports'
import { WebSocketTransport } from './transports'

export type UnacknowledgedMessage = {
//    confirmation: AnyAction | null;
    uuid: string | null;
    messageDetails: MessageDetails;
    totalEvaluationCount: number;
    currentEvaluationCount: number;
};

type MessengerState = {
//    messenger: Messenger;
    pairedMessageQueue: Set<UnacknowledgedMessage>;
    resendLastPairedMessage: boolean;
};

export const state: MessengerState = {
    // cast to any for a lateinit hack -- initialized immediately in the initialize function
//    messenger: <any>{},
    pairedMessageQueue: new Set(),
    resendLastPairedMessage: false
};

/**
 * Creates the EventManager (redux-saga channel)
 */
export const initializeMessengerState = function* () {
    // AB todo: replace this functionality, next 4 lines
    // const EVENT_MANAGER: EventManager = yield call(createEventManager, {
    //     creator: 'Messenger',
    //     listener: receiveMessage
    // });

    // const BLUETOOTH: BluetoothTransport = new BluetoothTransport();
    // const UDP: UdpTransport = new UdpTransport();
    // const WEB_SOCKET: WebSocketTransport = new WebSocketTransport();
    // const WEB_RTC: WebRtcTransport = new WebRtcTransport();
    // state.messenger = new Messenger(EVENT_MANAGER, BLUETOOTH, UDP, WEB_SOCKET, WEB_RTC);
};
