"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Money = void 0;
var _ = __importStar(require("lodash"));
var config_1 = require("@fivestars-pos-sdk/config");
console.log("CONFIG: ", JSON.stringify(config_1.CONFIG));
/* eslint-disable-next-line @typescript-eslint/no-var-requires */
var dineroJs = require('dinero.js');
var BILL_DENOMIATIONS = [100, 500, 1000, 2000, 5000, 10000];
var Money = /** @class */ (function () {
    function Money(amount, dinero) {
        if (!(Money.CURRENCY &&
            Money.FORMAT &&
            Money.FORMAT_ROUNDING_MODE &&
            Money.LOCALE &&
            Money.PRECISION &&
            Money.ROUNDING_MODE)) {
            throw new Error('Must specify currency, format, format rounding mode, locale, precision, and rounding mode in the configuration for Money objects');
        }
        if (dinero) {
            this.dinero = dinero.multiply(1);
        }
        else if (amount || amount === 0) {
            this.dinero = dineroJs({
                amount: amount,
                currency: Money.CURRENCY,
                precision: Money.PRECISION
            }).setLocale(Money.LOCALE);
        }
        else {
            throw new Error('Must specify either a dinero object or amount to create a new Money object');
        }
    }
    Money.prototype._getDinero = function () {
        return this.dinero;
    };
    Money.prototype.getAmount = function () {
        return this.dinero.getAmount();
    };
    Money.prototype.add = function (addend) {
        return new Money(null, this.dinero.add(addend.dinero));
    };
    Money.prototype.subtract = function (subtrahend) {
        return new Money(null, this.dinero.subtract(subtrahend.dinero));
    };
    Money.prototype.multiply = function (multiplier) {
        return new Money(null, this.dinero.multiply(multiplier, Money.ROUNDING_MODE));
    };
    Money.prototype.divide = function (divisor) {
        return new Money(null, this.dinero.divide(divisor, Money.ROUNDING_MODE));
    };
    Money.prototype.percentage = function (percent) {
        return new Money(null, this.dinero.percentage(percent));
    };
    Money.prototype.equals = function (comparator) {
        return this.dinero.equalsTo(comparator.dinero);
    };
    Money.prototype.lessThan = function (comparator) {
        return this.dinero.lessThan(comparator.dinero);
    };
    Money.prototype.greaterThan = function (comparator) {
        return this.dinero.greaterThan(comparator.dinero);
    };
    Money.prototype.toDisplayFormat = function () {
        return this.dinero.toFormat(Money.FORMAT, Money.FORMAT_ROUNDING_MODE);
    };
    Money.prototype.roundedDown = function () {
        return this.dinero.toRoundedUnit(0, 'HALF_DOWN');
    };
    Money.prototype.roundedUp = function () {
        return this.dinero.toRoundedUnit(0, 'HALF_UP');
    };
    Money.prototype.cashOptions = function () {
        /*
            This function returns an arry on money objects that represents the next closest
            full dollar amount for the range of bill denominations $1-$100 as compared to the total.

            e.g.  a Money object with an amount 0f 350, would return the and array of money objects
            at values 400 (next closest $1), 500 (next closest 5$), etc.

            That array of objects will then get de-duped based on the amount.

            e.g. a Money object og 650 would have a next closest $5 and $10 of $10.  We use these options
            to populate cash submit options, so we only want each option to be reflected once.
        */
        // A Money amount of 0 would result in no bills being required to get there, so use 1 as a minimum
        var DINERO_AMOUNT = this.dinero.getAmount() || 1;
        var OPTIONS = BILL_DENOMIATIONS.map(function (denomiation) {
            var SUFFICIENT_BILLS = Math.ceil(DINERO_AMOUNT / denomiation);
            return new Money(SUFFICIENT_BILLS * denomiation);
        })
            // filter out an option that is equal to our original amount
            .filter(function (money) { return money.getAmount() !== DINERO_AMOUNT; });
        return _.uniqBy(OPTIONS, function (options) { return options.getAmount(); });
    };
    Money.prototype.toJSON = function () {
        return JSON.stringify(this.dinero.toObject());
    };
    //    static CURRENCY = CONFIG.DINERO.get().CURRENCY;
    Money.CURRENCY = 'USD';
    //    static FORMAT = CONFIG.DINERO.get().FORMAT;
    Money.FORMAT = '\$0,0.00';
    //    static FORMAT_ROUNDING_MODE = CONFIG.DINERO.get().FORMAT_ROUNDING_MODE;
    Money.FORMAT_ROUNDING_MODE = 'HALF_AWAY_FROM_ZERO';
    //    static LOCALE = CONFIG.DINERO.get().LOCALE;
    Money.LOCALE = 'en-US';
    //    static PRECISION = CONFIG.DINERO.get().PRECISION;
    Money.PRECISION = 2;
    //    static ROUNDING_MODE = CONFIG.DINERO.get().ROUNDING_MODE;
    Money.ROUNDING_MODE = 'HALF_EVEN';
    return Money;
}());
exports.Money = Money;
