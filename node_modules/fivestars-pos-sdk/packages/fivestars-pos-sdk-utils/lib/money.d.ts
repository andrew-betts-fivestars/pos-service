import { Dinero } from 'dinero.js';
export interface IMoney {
    _getDinero(): Dinero;
    getAmount(): number;
    add(addend: IMoney): IMoney;
    subtract(subtrahend: IMoney): IMoney;
    multiply(multiplier: number): IMoney;
    divide(divisor: number): IMoney;
    percentage(percent: number): IMoney;
    equals(comparator: IMoney): boolean;
    greaterThan(comparator: IMoney): boolean;
    lessThan(comparator: IMoney): boolean;
    toDisplayFormat(): string;
    roundedDown(): number;
    roundedUp(): number;
    cashOptions(): IMoney[];
}
export declare class Money implements IMoney {
    private dinero;
    static CURRENCY: string;
    static FORMAT: string;
    static FORMAT_ROUNDING_MODE: string;
    static LOCALE: string;
    static PRECISION: number;
    static ROUNDING_MODE: string;
    constructor(amount: number | null, dinero?: Dinero);
    _getDinero(): Dinero;
    getAmount(): number;
    add(addend: Money): Money;
    subtract(subtrahend: Money): Money;
    multiply(multiplier: number): Money;
    divide(divisor: number): Money;
    percentage(percent: number): Money;
    equals(comparator: Money): boolean;
    lessThan(comparator: Money): boolean;
    greaterThan(comparator: Money): boolean;
    toDisplayFormat(): string;
    roundedDown(): number;
    roundedUp(): number;
    cashOptions(): IMoney[];
    toJSON(): string;
}
