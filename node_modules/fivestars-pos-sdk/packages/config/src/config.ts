import { config } from 'dotenv'

import { ClientFeatures, Product } from '@fivestars-pos-sdk/types'

config({ path: './.env' })



export const CONFIG = {
    AWS_S3: {
        ACCESS_KEY_ID: process.env.REACT_APP_ACCESS_KEY_ID,
        AWS_API_VERSION: '2006-03-01',
        AWS_REGION: process.env.REACT_APP_AWS_REGION,
        ENVIRONMENT_OVERRIDES_BUCKET_NAME: process.env.REACT_APP_ENVIRONMENT_OVERRIDES_BUCKET_NAME,
        SECRET_KEY_ID: process.env.REACT_APP_SECRET_KEY_ID,
        WINPAY_CONFIG_BUCKET_NAME: process.env.REACT_APP_WINPAY_CONFIG_BUCKET_NAME
    },
    BATTERY: {
        CRITICAL: Number(process.env.REACT_APP_BATTERY_CRITICAL_PERCENTAGE),
        LOW: Number(process.env.REACT_APP_BATTERY_LOW_PERCENTAGE),
        TEMP_CRITICAL: Number(process.env.REACT_APP_BATTERY_TEMP_CRITICAL),
        TEMP_DIM_DISPLAY: Number(process.env.REACT_APP_BATTERY_TEMP_DIM_DISPLAY),

        TEMP_RESTART_CHARGING: Number(process.env.REACT_APP_BATTERY_TEMP_RESTART_CHARGING),

        TEMP_WARNING: Number(process.env.REACT_APP_BATTERY_TEMP_WARNING),
        UNPLUGGED_SHUTDOWN_DELAY_MINUTES: Number(process.env.REACT_APP_BATTERY_UNPLUGGED_SHUTDOWN_DELAY_MINUTES),
        UNPLUGGED_SHUTDOWN_PERCENTAGE: Number(process.env.REACT_APP_BATTERY_UNPLUGGED_SHUTDOWN_PERCENTAGE),

        get: () => ({
            CRITICAL: CONFIG.BATTERY.CRITICAL,
            LOW: CONFIG.BATTERY.LOW,
            UNPLUGGED_SHUTDOWN_DELAY_MINUTES: CONFIG.BATTERY.UNPLUGGED_SHUTDOWN_DELAY_MINUTES,
            UNPLUGGED_SHUTDOWN_PERCENTAGE: CONFIG.BATTERY.UNPLUGGED_SHUTDOWN_PERCENTAGE
        })
    },
    CLIENT_FEATURES: [] as ClientFeatures[],
    DEFAULT_HARDWARE_IDENTIFIER:
        process.env.REACT_APP_DEFAULT_HARDWARE_IDENTIFIER || String(Math.floor(Math.random() * 10000)),
    DINERO: {
        CURRENCY: process.env.REACT_APP_DINERO_CURRENCY,
        FORMAT: process.env.REACT_APP_DINERO_FORMAT,
        FORMAT_ROUNDING_MODE: process.env.REACT_APP_DINERO_FORMAT_ROUNDING_MODE,
        LOCALE: process.env.REACT_APP_DINERO_LOCALE,
        PRECISION: Number(process.env.REACT_APP_DINERO_PRECISION),
        ROUNDING_MODE: process.env.REACT_APP_DINERO_ROUNDING_MODE,
        get: () => ({
            CURRENCY: CONFIG.DINERO.CURRENCY,
            FORMAT: CONFIG.DINERO.FORMAT,
            FORMAT_ROUNDING_MODE: CONFIG.DINERO.FORMAT_ROUNDING_MODE,
            LOCALE: CONFIG.DINERO.LOCALE,
            PRECISION: CONFIG.DINERO.PRECISION,
            ROUNDING_MODE: CONFIG.DINERO.ROUNDING_MODE
        })
    },
    DUPLICATE_TRANSACTION: {
        ALERT_TIME_THRESHOLD_SECONDS: Number(
            process.env.REACT_APP_DUPLICATE_TRANSACTION_ALERT_TIME_THRESHOLD_SECONDS
        )
    },
    EDGE_API: {
        HOST: process.env.REACT_APP_EDGE_API_HOST,
        SERVICE: {
            LOYALTY: {
                PATH: process.env.REACT_APP_EDGE_API_LOYALTY_SERVICE_PATH
            }
        }
    },
    ENV: process.env.REACT_APP_ENV,
    FIREBASE: {
        CONFIG: process.env.REACT_APP_FIREBASE_CONFIG,
        FETCH_TIMEOUT_IN_MS: Number(process.env.REACT_APP_FIREBASE_MIN_FETCH_TIMEOUT_IN_MS),
        MIN_FETCH_INTERVAL_IN_MS:
            Number(process.env.REACT_APP_FIREBASE_MIN_FETCH_INTERVAL_IN_HOURS) * 60 * 60 * 1000
    },
    HEARTBEAT: {
        FREQUENCY_IN_MS: Number(process.env.REACT_APP_HEARTBEAT_FREQUENCY_IN_MINUTES) * 60 * 1000,
        UPTIME_TICK_IN_MS: Number(process.env.REACT_APP_UPTIME_TICK_IN_MINUTES) * 60 * 1000,
        get: () => ({
            FREQUENCY_IN_MS: CONFIG.HEARTBEAT.FREQUENCY_IN_MS,
            UPTIME_TICK_IN_MS: CONFIG.HEARTBEAT.UPTIME_TICK_IN_MS
        })
    },
    LOYALTY_API: {
        DEFAULT_TIMEOUT: process.env.REACT_APP_LOYALTY_API_DEFAULT_TIMEOUT,
        HOST: process.env.REACT_APP_LOYALTY_API_HOST,
        PATH: process.env.REACT_APP_LOYALTY_API_PATH,
        PORT: process.env.REACT_APP_LOYALTY_API_PORT,
        PRODUCT_NAME: process.env.REACT_APP_LOYALTY_API_PRODUCT_NAME,
        PRODUCT_PATH: process.env.REACT_APP_LOYALTY_API_PRODUCT_PATH,
        RETRY: process.env.REACT_APP_LOYALTY_API_RETRY,
        SCHEME: process.env.REACT_APP_LOYALTY_API_SCHEME
    },
    LOYALTY_UPDATE: {
        FREQUENCY_IN_MS: Number(process.env.REACT_APP_LOYALTY_UPDATE_FREQUENCY_IN_MINUTES) * 60 * 1000
    },
    MESSENGER: {
        BEST_TRANSPORT: {
            DURATION_SCORE: {
                AVG_VS_BAD_WEIGHT: 0.25,
                POSITIVE_WEIGHT: 0.75
            },
            MEDIAN_CEILING_IN_MS: 75,
            MEDIAN_PCT_DIFF_THRESHOLD: 1.5,
            RELIABILITY_THRESHOLD: 0.05,
            STICKY_THRESHOLD: 0.1
        },
        PING_FREQUENCY_IN_MS: Number(process.env.REACT_APP_PING_FREQUENCY_IN_MS),
        SHOW_CURRENT_TRANSPORT: process.env.REACT_APP_DEBUG_SHOW_CURRENT_TRANSPORT === 'true',
        VERSION: '1.0.0'
    },
    NETWORK: {
        APP_TIME_DEGRADED_INTERNET_IN_MS: 60 * 1000
    },
    NIGHTLY_RESTART: {
        IDLE_TIMEOUT_IN_MS: Number(process.env.REACT_APP_IDLE_TIMEOUT_IN_MINUTES) * 60 * 1000,
        WHITELIST_END_HOUR: Number(process.env.REACT_APP_NIGHTLY_RESTART_WHITELIST_END_HOUR),
        WHITELIST_START_HOUR: Number(process.env.REACT_APP_NIGHTLY_RESTART_WHITELIST_START_HOUR),
        get: () => ({
            IDLE_TIMEOUT_IN_MS: CONFIG.NIGHTLY_RESTART.IDLE_TIMEOUT_IN_MS,
            WHITELIST_END_HOUR: CONFIG.NIGHTLY_RESTART.WHITELIST_END_HOUR,
            WHITELIST_START_HOUR: CONFIG.NIGHTLY_RESTART.WHITELIST_START_HOUR
        })
    },
    PAY_API: {
        HOST: process.env.REACT_APP_PAY_API_HOST,
        PATH: process.env.REACT_APP_PAY_API_PATH,
        PORT: process.env.REACT_APP_PAY_API_PORT,
        RETRY: process.env.REACT_APP_PAY_API_RETRY,
        SCHEME: process.env.REACT_APP_PAY_API_SCHEME
    },
    PRODUCT: process.env.REACT_APP_PRODUCT as Product,
    SENTRY: {
        DSN: process.env.REACT_APP_SENTRY_DSN,
        ENABLED: process.env.REACT_APP_SENTRY_ENABLED,
        ENVIRONMENT: process.env.REACT_APP_SENTRY_ENVIRONMENT,
        get: () => ({
            DSN: CONFIG.SENTRY.DSN,
            ENABLED: CONFIG.SENTRY.ENABLED === 'true',
            ENVIRONMENT: CONFIG.SENTRY.ENVIRONMENT
        })
    },
    TEST_SETTINGS: {
        ALLOW_REWARDS_FLOW_ON_MANUAL_TXN: process.env.REACT_APP_ALLOW_REWARDS_ON_MANUAL_TXN === 'true',
        IS_SMALL_PORTRAIT_OVERRIDE: process.env.REACT_APP_FORM_FACTOR === 'smallPortrait'
    },
    THERMAL: {
        MAX_SAMPLES: Number(process.env.REACT_APP_THERMAL_MAX_SAMPLES),
        SAMPLE_INTERVAL_IN_MS: Number(process.env.REACT_APP_THERMAL_POLL_INTERVAL_IN_SECONDS) * 1000
    },
    TREASURE_DATA: {
        APIKEY: process.env.REACT_APP_TREASURE_DATA_APIKEY,
        DATABASE: process.env.REACT_APP_TREASURE_DATA_DATABASE,
        TABLE: process.env.REACT_APP_TREASURE_DATA_TABLE,
        get: () => ({
            APIKEY: CONFIG.TREASURE_DATA.APIKEY,
            DATABASE: CONFIG.TREASURE_DATA.DATABASE,
            TABLE: CONFIG.TREASURE_DATA.TABLE
        })
    },

    UPGRADE_CHECK: {
        FREQUENCY_IN_MS: Number(process.env.REACT_APP_UPGRADE_CHECK_FREQUENCY_IN_MINUTES) * 60 * 1000,
        get: () => ({
            FREQUENCY_IN_MS: CONFIG.UPGRADE_CHECK.FREQUENCY_IN_MS
        })
    },

    VERSION: {
        APP_VERSION: '0.2.5',
        REV_PARSE: process.env.REACT_APP_REV_PARSE,
        get: () => ({
            APP_VERSION: CONFIG.VERSION.APP_VERSION,
            REV_PARSE: CONFIG.VERSION.REV_PARSE
        })
    },

    VGS: {
        LIBRARY_URL: 'https://js.verygoodvault.com/vgs-collect/keyboard/1.2/fivestars.js',
        PATH: process.env.REACT_APP_VGS_PATH,
        VAULT_ID: process.env.REACT_APP_VAULT_ID
    },

    WEB_SOCKET: {
        HOST: process.env.REACT_APP_WEBSOCKET_HOST,
        MAX_RETRY_DELAY: process.env.REACT_APP_WEBSOCKET_MAX_RETRY_DELAY,
        PATH_END: process.env.REACT_APP_WEBSOCKET_PATH_END,
        PATH_START: process.env.REACT_APP_WEBSOCKET_PATH_START,
        PORT: process.env.REACT_APP_WEBSOCKET_PORT,
        RETRY_DELAY: process.env.REACT_APP_WEBSOCKET_RETRY_DELAY,
        SCHEME: process.env.REACT_APP_WEBSOCKET_SCHEME,
        get: () => ({
            HOST: CONFIG.WEB_SOCKET.HOST,
            MAX_RETRY_DELAY: CONFIG.WEB_SOCKET.MAX_RETRY_DELAY,
            PATH_END: CONFIG.WEB_SOCKET.PATH_END,
            PATH_START: CONFIG.WEB_SOCKET.PATH_START,
            PORT: CONFIG.WEB_SOCKET.PORT,
            RETRY_DELAY: CONFIG.WEB_SOCKET.RETRY_DELAY,
            SCHEME: CONFIG.WEB_SOCKET.SCHEME
        })
    }
}